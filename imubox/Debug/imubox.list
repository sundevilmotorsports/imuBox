
imubox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800aba0  0800aba0  0000bba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0dc  0800b0dc  0000d1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b0dc  0800b0dc  0000c0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0e4  0800b0e4  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0e4  0800b0e4  0000c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0e8  0800b0e8  0000c0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b0ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1dc  2**0
                  CONTENTS
 10 .bss          000006ec  200001dc  200001dc  0000d1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  0000d1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d115  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002365  00000000  00000000  0002a321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  0002c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000135f  00000000  00000000  0002dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211f2  00000000  00000000  0002f317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ca3  00000000  00000000  00050509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c80ed  00000000  00000000  000661ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e299  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008744  00000000  00000000  0012e2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00136a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab84 	.word	0x0800ab84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ab84 	.word	0x0800ab84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3320      	adds	r3, #32
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f9c2 	bl	80023b8 <ism330dhcx_device_conf_set>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e082      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Set main memory bank */
  if (ISM330DHCX_Set_Mem_Bank(pObj, (uint8_t)ISM330DHCX_USER_BANK) != ISM330DHCX_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fad5 	bl	80015f2 <ISM330DHCX_Set_Mem_Bank>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <ISM330DHCX_Init+0x34>
  {
    return ISM330DHCX_ERROR;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e078      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3320      	adds	r3, #32
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fa1e 	bl	800249c <ism330dhcx_auto_increment_set>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <ISM330DHCX_Init+0x4c>
  {
    return ISM330DHCX_ERROR;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e06c      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3320      	adds	r3, #32
 8001070:	2101      	movs	r1, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f9ec 	bl	8002450 <ism330dhcx_reset_set>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <ISM330DHCX_Init+0x64>
  {
    return ISM330DHCX_ERROR;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e060      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3320      	adds	r3, #32
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fa06 	bl	800249c <ism330dhcx_auto_increment_set>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <ISM330DHCX_Init+0x7c>
  {
    return ISM330DHCX_ERROR;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e054      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3320      	adds	r3, #32
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f8d2 	bl	800224c <ism330dhcx_block_data_update_set>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <ISM330DHCX_Init+0x94>
  {
    return ISM330DHCX_ERROR;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e048      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3320      	adds	r3, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fa3a 	bl	8002534 <ism330dhcx_fifo_mode_set>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <ISM330DHCX_Init+0xac>
  {
    return ISM330DHCX_ERROR;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e03c      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3320      	adds	r3, #32
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fd66 	bl	8001bac <ism330dhcx_xl_data_rate_set>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <ISM330DHCX_Init+0xcc>
  {
    return ISM330DHCX_ERROR;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e02c      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3320      	adds	r3, #32
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fcfc 	bl	8001af0 <ism330dhcx_xl_full_scale_set>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <ISM330DHCX_Init+0xe4>
  {
    return ISM330DHCX_ERROR;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e020      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2204      	movs	r2, #4
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3320      	adds	r3, #32
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff2e 	bl	8001f74 <ism330dhcx_gy_data_rate_set>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <ISM330DHCX_Init+0x104>
  {
    return ISM330DHCX_ERROR;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e010      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3320      	adds	r3, #32
 8001128:	210c      	movs	r1, #12
 800112a:	4618      	mov	r0, r3
 800112c:	f000 feaa 	bl	8001e84 <ism330dhcx_gy_full_scale_set>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <ISM330DHCX_Init+0x11c>
  {
    return ISM330DHCX_ERROR;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e004      	b.n	8001146 <ISM330DHCX_Init+0x126>
  }

  pObj->is_initialized = 1;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return ISM330DHCX_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e014      	b.n	800118e <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f103 0220 	add.w	r2, r3, #32
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f000 fd1a 	bl	8001bac <ism330dhcx_xl_data_rate_set>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e004      	b.n	800118e <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return ISM330DHCX_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3320      	adds	r3, #32
 80011aa:	f107 020b 	add.w	r2, r7, #11
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fcc3 	bl	8001b3c <ism330dhcx_xl_full_scale_get>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	e023      	b.n	800120a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d81b      	bhi.n	8001200 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80011c8:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011f9 	.word	0x080011f9
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	080011f1 	.word	0x080011f1
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 80011e4:	601a      	str	r2, [r3, #0]
      break;
 80011e6:	e00f      	b.n	8001208 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 80011ec:	601a      	str	r2, [r3, #0]
      break;
 80011ee:	e00b      	b.n	8001208 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80011f4:	601a      	str	r2, [r3, #0]
      break;
 80011f6:	e007      	b.n	8001208 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80011fc:	601a      	str	r2, [r3, #0]
      break;
 80011fe:	e003      	b.n	8001208 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	60fb      	str	r3, [r7, #12]
      break;
 8001206:	bf00      	nop
  }

  return ret;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	3d79db23 	.word	0x3d79db23
 8001218:	3df9db23 	.word	0x3df9db23
 800121c:	3e79db23 	.word	0x3e79db23
 8001220:	3ef9db23 	.word	0x3ef9db23

08001224 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001236:	2b01      	cmp	r3, #1
 8001238:	d106      	bne.n	8001248 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800123a:	ed97 0a00 	vldr	s0, [r7]
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9fe 	bl	8001640 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8001244:	4603      	mov	r3, r0
 8001246:	e005      	b.n	8001254 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001248:	ed97 0a00 	vldr	s0, [r7]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fa83 	bl	8001758 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8001252:	4603      	mov	r3, r0
  }
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	dd0b      	ble.n	8001284 <ISM330DHCX_ACC_SetFullScale+0x28>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b04      	cmp	r3, #4
 8001270:	dd06      	ble.n	8001280 <ISM330DHCX_ACC_SetFullScale+0x24>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b08      	cmp	r3, #8
 8001276:	dc01      	bgt.n	800127c <ISM330DHCX_ACC_SetFullScale+0x20>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800127c:	2301      	movs	r3, #1
 800127e:	e002      	b.n	8001286 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001280:	2302      	movs	r3, #2
 8001282:	e000      	b.n	8001286 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001284:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8001286:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3320      	adds	r3, #32
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fc2d 	bl	8001af0 <ism330dhcx_xl_full_scale_set>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e000      	b.n	80012a4 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3320      	adds	r3, #32
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 f82e 	bl	8002328 <ism330dhcx_acceleration_raw_get>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e03c      	b.n	8001352 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff5a 	bl	8001198 <ISM330DHCX_ACC_GetSensitivity>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e030      	b.n	8001352 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80012f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001308:	ee17 2a90 	vmov	r2, s15
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001348:	ee17 2a90 	vmov	r2, s15
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e014      	b.n	800139a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f103 0220 	add.w	r2, r3, #32
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f000 fdf8 	bl	8001f74 <ism330dhcx_gy_data_rate_set>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e004      	b.n	800139a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return ISM330DHCX_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3320      	adds	r3, #32
 80013b6:	f107 020b 	add.w	r2, r7, #11
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fd87 	bl	8001ed0 <ism330dhcx_gy_full_scale_get>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	e03d      	b.n	800144a <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d835      	bhi.n	8001440 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001419 	.word	0x08001419
 80013e0:	08001439 	.word	0x08001439
 80013e4:	08001411 	.word	0x08001411
 80013e8:	08001441 	.word	0x08001441
 80013ec:	08001421 	.word	0x08001421
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001441 	.word	0x08001441
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001429 	.word	0x08001429
 8001400:	08001441 	.word	0x08001441
 8001404:	08001441 	.word	0x08001441
 8001408:	08001441 	.word	0x08001441
 800140c:	08001431 	.word	0x08001431
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8001414:	601a      	str	r2, [r3, #0]
      break;
 8001416:	e017      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 800141c:	601a      	str	r2, [r3, #0]
      break;
 800141e:	e013      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8001424:	601a      	str	r2, [r3, #0]
      break;
 8001426:	e00f      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 800142c:	601a      	str	r2, [r3, #0]
      break;
 800142e:	e00b      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	4a0c      	ldr	r2, [pc, #48]	@ (8001464 <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 8001434:	601a      	str	r2, [r3, #0]
      break;
 8001436:	e007      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 800143c:	601a      	str	r2, [r3, #0]
      break;
 800143e:	e003      	b.n	8001448 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	60fb      	str	r3, [r7, #12]
      break;
 8001446:	bf00      	nop
  }

  return ret;
 8001448:	68fb      	ldr	r3, [r7, #12]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	408c0000 	.word	0x408c0000
 8001458:	410c0000 	.word	0x410c0000
 800145c:	418c0000 	.word	0x418c0000
 8001460:	420c0000 	.word	0x420c0000
 8001464:	428c0000 	.word	0x428c0000
 8001468:	430c0000 	.word	0x430c0000

0800146c <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001482:	ed97 0a00 	vldr	s0, [r7]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f9e8 	bl	800185c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 800148c:	4603      	mov	r3, r0
 800148e:	e005      	b.n	800149c <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001490:	ed97 0a00 	vldr	s0, [r7]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fa6d 	bl	8001974 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800149a:	4603      	mov	r3, r0
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80014b2:	dd18      	ble.n	80014e6 <ISM330DHCX_GYRO_SetFullScale+0x42>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2bfa      	cmp	r3, #250	@ 0xfa
 80014b8:	dd13      	ble.n	80014e2 <ISM330DHCX_GYRO_SetFullScale+0x3e>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014c0:	dd0d      	ble.n	80014de <ISM330DHCX_GYRO_SetFullScale+0x3a>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c8:	dd07      	ble.n	80014da <ISM330DHCX_GYRO_SetFullScale+0x36>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014d0:	dc01      	bgt.n	80014d6 <ISM330DHCX_GYRO_SetFullScale+0x32>
 80014d2:	230c      	movs	r3, #12
 80014d4:	e008      	b.n	80014e8 <ISM330DHCX_GYRO_SetFullScale+0x44>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e006      	b.n	80014e8 <ISM330DHCX_GYRO_SetFullScale+0x44>
 80014da:	2308      	movs	r3, #8
 80014dc:	e004      	b.n	80014e8 <ISM330DHCX_GYRO_SetFullScale+0x44>
 80014de:	2304      	movs	r3, #4
 80014e0:	e002      	b.n	80014e8 <ISM330DHCX_GYRO_SetFullScale+0x44>
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <ISM330DHCX_GYRO_SetFullScale+0x44>
 80014e6:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80014e8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3320      	adds	r3, #32
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fcc6 	bl	8001e84 <ism330dhcx_gy_full_scale_set>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e000      	b.n	8001506 <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3320      	adds	r3, #32
 8001522:	f107 0210 	add.w	r2, r7, #16
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f000 feb5 	bl	8002298 <ism330dhcx_angular_rate_raw_get>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <ISM330DHCX_GYRO_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	e03c      	b.n	80015b4 <ISM330DHCX_GYRO_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff2f 	bl	80013a4 <ISM330DHCX_GYRO_GetSensitivity>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <ISM330DHCX_GYRO_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e030      	b.n	80015b4 <ISM330DHCX_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001552:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156a:	ee17 2a90 	vmov	r2, s15
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001572:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 2a90 	vmov	r2, s15
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001592:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015aa:	ee17 2a90 	vmov	r2, s15
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
 80015c8:	4613      	mov	r3, r2
 80015ca:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f103 0020 	add.w	r0, r3, #32
 80015d2:	1cba      	adds	r2, r7, #2
 80015d4:	78f9      	ldrb	r1, [r7, #3]
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 fa6c 	bl	8001ab4 <ism330dhcx_write_reg>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e000      	b.n	80015ea <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <ISM330DHCX_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - ISM330DHCX_USER_BANK, 1 - ISM330DHCX_SENSOR_HUB_BANK, 2 - ISM330DHCX_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Set_Mem_Bank(ISM330DHCX_Object_t *pObj, uint8_t Val)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  ism330dhcx_reg_access_t reg;

  reg = (Val == 1U) ? ISM330DHCX_SENSOR_HUB_BANK
        : (Val == 2U) ? ISM330DHCX_EMBEDDED_FUNC_BANK
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d006      	beq.n	8001616 <ISM330DHCX_Set_Mem_Bank+0x24>
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d101      	bne.n	8001612 <ISM330DHCX_Set_Mem_Bank+0x20>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <ISM330DHCX_Set_Mem_Bank+0x26>
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <ISM330DHCX_Set_Mem_Bank+0x26>
 8001616:	2301      	movs	r3, #1
  reg = (Val == 1U) ? ISM330DHCX_SENSOR_HUB_BANK
 8001618:	72fb      	strb	r3, [r7, #11]
        :               ISM330DHCX_USER_BANK;

  if (ism330dhcx_mem_bank_set(&(pObj->Ctx), reg) != ISM330DHCX_OK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3320      	adds	r3, #32
 800161e:	7afa      	ldrb	r2, [r7, #11]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 feee 	bl	8002404 <ism330dhcx_mem_bank_set>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <ISM330DHCX_Set_Mem_Bank+0x42>
  {
    ret = ISM330DHCX_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001634:	68fb      	ldr	r3, [r7, #12]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800164c:	edd7 7a00 	vldr	s15, [r7]
 8001650:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d801      	bhi.n	8001662 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800165e:	2301      	movs	r3, #1
 8001660:	e058      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001662:	edd7 7a00 	vldr	s15, [r7]
 8001666:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d801      	bhi.n	8001678 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001674:	2302      	movs	r3, #2
 8001676:	e04d      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001678:	edd7 7a00 	vldr	s15, [r7]
 800167c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800173c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001688:	d801      	bhi.n	800168e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800168a:	2303      	movs	r3, #3
 800168c:	e042      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800168e:	edd7 7a00 	vldr	s15, [r7]
 8001692:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001740 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	d801      	bhi.n	80016a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80016a0:	2304      	movs	r3, #4
 80016a2:	e037      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016a4:	edd7 7a00 	vldr	s15, [r7]
 80016a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001744 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d801      	bhi.n	80016ba <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e02c      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001748 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 80016c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d801      	bhi.n	80016d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80016cc:	2306      	movs	r3, #6
 80016ce:	e021      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016d0:	edd7 7a00 	vldr	s15, [r7]
 80016d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800174c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d801      	bhi.n	80016e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e016      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016e6:	edd7 7a00 	vldr	s15, [r7]
 80016ea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001750 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d801      	bhi.n	80016fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80016f8:	2308      	movs	r3, #8
 80016fa:	e00b      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80016fc:	edd7 7a00 	vldr	s15, [r7]
 8001700:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001754 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d801      	bhi.n	8001712 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800170e:	2309      	movs	r3, #9
 8001710:	e000      	b.n	8001714 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001712:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8001714:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3320      	adds	r3, #32
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fa44 	bl	8001bac <ism330dhcx_xl_data_rate_set>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e000      	b.n	8001732 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	42500000 	.word	0x42500000
 8001740:	42d00000 	.word	0x42d00000
 8001744:	43500000 	.word	0x43500000
 8001748:	43d00000 	.word	0x43d00000
 800174c:	44504000 	.word	0x44504000
 8001750:	44d04000 	.word	0x44d04000
 8001754:	45504000 	.word	0x45504000

08001758 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001764:	edd7 7a00 	vldr	s15, [r7]
 8001768:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d801      	bhi.n	800177a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001776:	2301      	movs	r3, #1
 8001778:	e058      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800177a:	edd7 7a00 	vldr	s15, [r7]
 800177e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	d801      	bhi.n	8001790 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 800178c:	2302      	movs	r3, #2
 800178e:	e04d      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001790:	edd7 7a00 	vldr	s15, [r7]
 8001794:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001840 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d801      	bhi.n	80017a6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e042      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80017a6:	edd7 7a00 	vldr	s15, [r7]
 80017aa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001844 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d801      	bhi.n	80017bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e037      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80017bc:	edd7 7a00 	vldr	s15, [r7]
 80017c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001848 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d801      	bhi.n	80017d2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e02c      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80017d2:	edd7 7a00 	vldr	s15, [r7]
 80017d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800184c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d801      	bhi.n	80017e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80017e4:	2306      	movs	r3, #6
 80017e6:	e021      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80017e8:	edd7 7a00 	vldr	s15, [r7]
 80017ec:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001850 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d801      	bhi.n	80017fe <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e016      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80017fe:	edd7 7a00 	vldr	s15, [r7]
 8001802:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001854 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d801      	bhi.n	8001814 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001810:	2308      	movs	r3, #8
 8001812:	e00b      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001814:	edd7 7a00 	vldr	s15, [r7]
 8001818:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001858 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 800181c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d801      	bhi.n	800182a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001826:	2309      	movs	r3, #9
 8001828:	e000      	b.n	800182c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800182a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	42500000 	.word	0x42500000
 8001844:	42d00000 	.word	0x42d00000
 8001848:	43500000 	.word	0x43500000
 800184c:	43d00000 	.word	0x43d00000
 8001850:	44504000 	.word	0x44504000
 8001854:	44d04000 	.word	0x44d04000
 8001858:	45504000 	.word	0x45504000

0800185c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001868:	edd7 7a00 	vldr	s15, [r7]
 800186c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d801      	bhi.n	800187e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800187a:	2301      	movs	r3, #1
 800187c:	e058      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800187e:	edd7 7a00 	vldr	s15, [r7]
 8001882:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d801      	bhi.n	8001894 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8001890:	2302      	movs	r3, #2
 8001892:	e04d      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001894:	edd7 7a00 	vldr	s15, [r7]
 8001898:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001958 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800189c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d801      	bhi.n	80018aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e042      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018aa:	edd7 7a00 	vldr	s15, [r7]
 80018ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800195c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d801      	bhi.n	80018c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80018bc:	2304      	movs	r3, #4
 80018be:	e037      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018c0:	edd7 7a00 	vldr	s15, [r7]
 80018c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001960 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d801      	bhi.n	80018d6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e02c      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018d6:	edd7 7a00 	vldr	s15, [r7]
 80018da:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001964 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d801      	bhi.n	80018ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80018e8:	2306      	movs	r3, #6
 80018ea:	e021      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018ec:	edd7 7a00 	vldr	s15, [r7]
 80018f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001968 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80018f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d801      	bhi.n	8001902 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80018fe:	2307      	movs	r3, #7
 8001900:	e016      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001902:	edd7 7a00 	vldr	s15, [r7]
 8001906:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800196c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800190a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d801      	bhi.n	8001918 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8001914:	2308      	movs	r3, #8
 8001916:	e00b      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001918:	edd7 7a00 	vldr	s15, [r7]
 800191c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001970 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d801      	bhi.n	800192e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800192a:	2309      	movs	r3, #9
 800192c:	e000      	b.n	8001930 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800192e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8001930:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3320      	adds	r3, #32
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb1a 	bl	8001f74 <ism330dhcx_gy_data_rate_set>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e000      	b.n	800194e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	42500000 	.word	0x42500000
 800195c:	42d00000 	.word	0x42d00000
 8001960:	43500000 	.word	0x43500000
 8001964:	43d00000 	.word	0x43d00000
 8001968:	44504000 	.word	0x44504000
 800196c:	44d04000 	.word	0x44d04000
 8001970:	45504000 	.word	0x45504000

08001974 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8001980:	edd7 7a00 	vldr	s15, [r7]
 8001984:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d801      	bhi.n	8001996 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8001992:	2301      	movs	r3, #1
 8001994:	e058      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001996:	edd7 7a00 	vldr	s15, [r7]
 800199a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d801      	bhi.n	80019ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e04d      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019ac:	edd7 7a00 	vldr	s15, [r7]
 80019b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001a5c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80019b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d801      	bhi.n	80019c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80019be:	2303      	movs	r3, #3
 80019c0:	e042      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019c2:	edd7 7a00 	vldr	s15, [r7]
 80019c6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a60 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80019ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d801      	bhi.n	80019d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e037      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019d8:	edd7 7a00 	vldr	s15, [r7]
 80019dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001a64 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80019e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	d801      	bhi.n	80019ee <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e02c      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019ee:	edd7 7a00 	vldr	s15, [r7]
 80019f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001a68 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80019f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	d801      	bhi.n	8001a04 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e021      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a04:	edd7 7a00 	vldr	s15, [r7]
 8001a08:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001a6c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d801      	bhi.n	8001a1a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e016      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a1a:	edd7 7a00 	vldr	s15, [r7]
 8001a1e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a70 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d801      	bhi.n	8001a30 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	e00b      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001a74 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d801      	bhi.n	8001a46 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e000      	b.n	8001a48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a46:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	42500000 	.word	0x42500000
 8001a60:	42d00000 	.word	0x42d00000
 8001a64:	43500000 	.word	0x43500000
 8001a68:	43d00000 	.word	0x43d00000
 8001a6c:	44504000 	.word	0x44504000
 8001a70:	44d04000 	.word	0x44d04000
 8001a74:	45504000 	.word	0x45504000

08001a78 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	72fb      	strb	r3, [r7, #11]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ism330dhcx_read_reg+0x20>
  {
    return -1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e009      	b.n	8001aac <ism330dhcx_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685c      	ldr	r4, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68d8      	ldr	r0, [r3, #12]
 8001aa0:	893b      	ldrh	r3, [r7, #8]
 8001aa2:	7af9      	ldrb	r1, [r7, #11]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	47a0      	blx	r4
 8001aa8:	6178      	str	r0, [r7, #20]

  return ret;
 8001aaa:	697b      	ldr	r3, [r7, #20]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}

08001ab4 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	72fb      	strb	r3, [r7, #11]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <ism330dhcx_write_reg+0x20>
  {
    return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <ism330dhcx_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68d8      	ldr	r0, [r3, #12]
 8001adc:	893b      	ldrh	r3, [r7, #8]
 8001ade:	7af9      	ldrb	r1, [r7, #11]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	47a0      	blx	r4
 8001ae4:	6178      	str	r0, [r7, #20]

  return ret;
 8001ae6:	697b      	ldr	r3, [r7, #20]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd90      	pop	{r4, r7, pc}

08001af0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001afc:	f107 0208 	add.w	r2, r7, #8
 8001b00:	2301      	movs	r3, #1
 8001b02:	2110      	movs	r1, #16
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffb7 	bl	8001a78 <ism330dhcx_read_reg>
 8001b0a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	7a3b      	ldrb	r3, [r7, #8]
 8001b1c:	f362 0383 	bfi	r3, r2, #2, #2
 8001b20:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001b22:	f107 0208 	add.w	r2, r7, #8
 8001b26:	2301      	movs	r3, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffc2 	bl	8001ab4 <ism330dhcx_write_reg>
 8001b30:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff92 	bl	8001a78 <ism330dhcx_read_reg>
 8001b54:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8001b56:	7a3b      	ldrb	r3, [r7, #8]
 8001b58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d81a      	bhi.n	8001b98 <ism330dhcx_xl_full_scale_get+0x5c>
 8001b62:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <ism330dhcx_xl_full_scale_get+0x2c>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b81 	.word	0x08001b81
 8001b70:	08001b89 	.word	0x08001b89
 8001b74:	08001b91 	.word	0x08001b91
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e00f      	b.n	8001ba0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
      break;
 8001b86:	e00b      	b.n	8001ba0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
      break;
 8001b8e:	e007      	b.n	8001ba0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2203      	movs	r2, #3
 8001b94:	701a      	strb	r2, [r3, #0]
      break;
 8001b96:	e003      	b.n	8001ba0 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	bf00      	nop
  }

  return ret;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop

08001bac <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fcdc 	bl	8002580 <ism330dhcx_fsm_enable_get>
 8001bc8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 80c4 	bne.w	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001bd2:	7b3b      	ldrb	r3, [r7, #12]
 8001bd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001bd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001bda:	7b3b      	ldrb	r3, [r7, #12]
 8001bdc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001be0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001be6:	7b3b      	ldrb	r3, [r7, #12]
 8001be8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001bec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001bf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001bfe:	7b3b      	ldrb	r3, [r7, #12]
 8001c00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001c16:	7b3b      	ldrb	r3, [r7, #12]
 8001c18:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001c28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
 8001c30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001c3a:	7b7b      	ldrb	r3, [r7, #13]
 8001c3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001c40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001c46:	7b7b      	ldrb	r3, [r7, #13]
 8001c48:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001c52:	7b7b      	ldrb	r3, [r7, #13]
 8001c54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001c5e:	7b7b      	ldrb	r3, [r7, #13]
 8001c60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001c6a:	7b7b      	ldrb	r3, [r7, #13]
 8001c6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
 8001c78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001c82:	7b7b      	ldrb	r3, [r7, #13]
 8001c84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001c88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d163      	bne.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001c92:	f107 030b 	add.w	r3, r7, #11
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fc9d 	bl	80025d8 <ism330dhcx_fsm_data_rate_get>
 8001c9e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d159      	bne.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d853      	bhi.n	8001d54 <ism330dhcx_xl_data_rate_set+0x1a8>
 8001cac:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb4 <ism330dhcx_xl_data_rate_set+0x108>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001cc5 	.word	0x08001cc5
 8001cb8:	08001cd7 	.word	0x08001cd7
 8001cbc:	08001cf5 	.word	0x08001cf5
 8001cc0:	08001d1f 	.word	0x08001d1f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001cce:	e044      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	75fb      	strb	r3, [r7, #23]
            break;
 8001cd4:	e041      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001ce0:	e03b      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d102      	bne.n	8001cee <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	75fb      	strb	r3, [r7, #23]
            break;
 8001cec:	e035      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	75fb      	strb	r3, [r7, #23]
            break;
 8001cf2:	e032      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001cfe:	e02c      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001d06:	2303      	movs	r3, #3
 8001d08:	75fb      	strb	r3, [r7, #23]
            break;
 8001d0a:	e026      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d102      	bne.n	8001d18 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001d12:	2303      	movs	r3, #3
 8001d14:	75fb      	strb	r3, [r7, #23]
            break;
 8001d16:	e020      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001d1c:	e01d      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001d24:	2304      	movs	r3, #4
 8001d26:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001d28:	e017      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d102      	bne.n	8001d36 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001d30:	2304      	movs	r3, #4
 8001d32:	75fb      	strb	r3, [r7, #23]
            break;
 8001d34:	e011      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d102      	bne.n	8001d42 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	75fb      	strb	r3, [r7, #23]
            break;
 8001d40:	e00b      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d102      	bne.n	8001d4e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	75fb      	strb	r3, [r7, #23]
            break;
 8001d4c:	e005      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	75fb      	strb	r3, [r7, #23]
            break;
 8001d52:	e002      	b.n	8001d5a <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	75fb      	strb	r3, [r7, #23]
            break;
 8001d58:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d16c      	bne.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001d64:	f107 030a 	add.w	r3, r7, #10
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fc7c 	bl	8002668 <ism330dhcx_mlc_get>
 8001d70:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8001d72:	7abb      	ldrb	r3, [r7, #10]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d162      	bne.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8001d78:	f107 0309 	add.w	r3, r7, #9
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fc9c 	bl	80026bc <ism330dhcx_mlc_data_rate_get>
 8001d84:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d158      	bne.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8001d8c:	7a7b      	ldrb	r3, [r7, #9]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d852      	bhi.n	8001e38 <ism330dhcx_xl_data_rate_set+0x28c>
 8001d92:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001dbb 	.word	0x08001dbb
 8001da0:	08001dd9 	.word	0x08001dd9
 8001da4:	08001e03 	.word	0x08001e03
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001db2:	e044      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	75fb      	strb	r3, [r7, #23]
            break;
 8001db8:	e041      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001dc4:	e03b      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	75fb      	strb	r3, [r7, #23]
            break;
 8001dd0:	e035      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	75fb      	strb	r3, [r7, #23]
            break;
 8001dd6:	e032      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001dde:	2303      	movs	r3, #3
 8001de0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001de2:	e02c      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001dea:	2303      	movs	r3, #3
 8001dec:	75fb      	strb	r3, [r7, #23]
            break;
 8001dee:	e026      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d102      	bne.n	8001dfc <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001df6:	2303      	movs	r3, #3
 8001df8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dfa:	e020      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8001e00:	e01d      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001e0c:	e017      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d102      	bne.n	8001e1a <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e14:	2304      	movs	r3, #4
 8001e16:	75fb      	strb	r3, [r7, #23]
            break;
 8001e18:	e011      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d102      	bne.n	8001e26 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e20:	2304      	movs	r3, #4
 8001e22:	75fb      	strb	r3, [r7, #23]
            break;
 8001e24:	e00b      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d102      	bne.n	8001e32 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	75fb      	strb	r3, [r7, #23]
            break;
 8001e30:	e005      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	75fb      	strb	r3, [r7, #23]
            break;
 8001e36:	e002      	b.n	8001e3e <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	75fb      	strb	r3, [r7, #23]
            break;
 8001e3c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001e44:	f107 0208 	add.w	r2, r7, #8
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fe13 	bl	8001a78 <ism330dhcx_read_reg>
 8001e52:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	7a3b      	ldrb	r3, [r7, #8]
 8001e64:	f362 1307 	bfi	r3, r2, #4, #4
 8001e68:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2110      	movs	r1, #16
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fe1e 	bl	8001ab4 <ism330dhcx_write_reg>
 8001e78:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001e7a:	693b      	ldr	r3, [r7, #16]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001e90:	f107 0208 	add.w	r2, r7, #8
 8001e94:	2301      	movs	r3, #1
 8001e96:	2111      	movs	r1, #17
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fded 	bl	8001a78 <ism330dhcx_read_reg>
 8001e9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	7a3b      	ldrb	r3, [r7, #8]
 8001eb0:	f362 0303 	bfi	r3, r2, #0, #4
 8001eb4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8001eb6:	f107 0208 	add.w	r2, r7, #8
 8001eba:	2301      	movs	r3, #1
 8001ebc:	2111      	movs	r1, #17
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fdf8 	bl	8001ab4 <ism330dhcx_write_reg>
 8001ec4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001eda:	f107 0208 	add.w	r2, r7, #8
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2111      	movs	r1, #17
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fdc8 	bl	8001a78 <ism330dhcx_read_reg>
 8001ee8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8001eea:	7a3b      	ldrb	r3, [r7, #8]
 8001eec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d834      	bhi.n	8001f60 <ism330dhcx_gy_full_scale_get+0x90>
 8001ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <ism330dhcx_gy_full_scale_get+0x2c>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f39 	.word	0x08001f39
 8001f00:	08001f59 	.word	0x08001f59
 8001f04:	08001f31 	.word	0x08001f31
 8001f08:	08001f61 	.word	0x08001f61
 8001f0c:	08001f41 	.word	0x08001f41
 8001f10:	08001f61 	.word	0x08001f61
 8001f14:	08001f61 	.word	0x08001f61
 8001f18:	08001f61 	.word	0x08001f61
 8001f1c:	08001f49 	.word	0x08001f49
 8001f20:	08001f61 	.word	0x08001f61
 8001f24:	08001f61 	.word	0x08001f61
 8001f28:	08001f61 	.word	0x08001f61
 8001f2c:	08001f51 	.word	0x08001f51
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2202      	movs	r2, #2
 8001f34:	701a      	strb	r2, [r3, #0]
      break;
 8001f36:	e017      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
      break;
 8001f3e:	e013      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	701a      	strb	r2, [r3, #0]
      break;
 8001f46:	e00f      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	701a      	strb	r2, [r3, #0]
      break;
 8001f4e:	e00b      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	220c      	movs	r2, #12
 8001f54:	701a      	strb	r2, [r3, #0]
      break;
 8001f56:	e007      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
      break;
 8001f5e:	e003      	b.n	8001f68 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]
      break;
 8001f66:	bf00      	nop
  }

  return ret;
 8001f68:	68fb      	ldr	r3, [r7, #12]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop

08001f74 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 faf8 	bl	8002580 <ism330dhcx_fsm_enable_get>
 8001f90:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 80c4 	bne.w	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001f9a:	7b3b      	ldrb	r3, [r7, #12]
 8001f9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001fa2:	7b3b      	ldrb	r3, [r7, #12]
 8001fa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001fa8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001fae:	7b3b      	ldrb	r3, [r7, #12]
 8001fb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001fb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001fba:	7b3b      	ldrb	r3, [r7, #12]
 8001fbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001fc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001fcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001fd2:	7b3b      	ldrb	r3, [r7, #12]
 8001fd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001fd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001fde:	7b3b      	ldrb	r3, [r7, #12]
 8001fe0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fe4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001fea:	7b3b      	ldrb	r3, [r7, #12]
 8001fec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001ff0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001ff6:	7b7b      	ldrb	r3, [r7, #13]
 8001ff8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ffc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002008:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800200a:	4313      	orrs	r3, r2
 800200c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800200e:	7b7b      	ldrb	r3, [r7, #13]
 8002010:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002014:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002016:	4313      	orrs	r3, r2
 8002018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002022:	4313      	orrs	r3, r2
 8002024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002026:	7b7b      	ldrb	r3, [r7, #13]
 8002028:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800202c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800202e:	4313      	orrs	r3, r2
 8002030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002032:	7b7b      	ldrb	r3, [r7, #13]
 8002034:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800203a:	4313      	orrs	r3, r2
 800203c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002046:	4313      	orrs	r3, r2
 8002048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800204a:	7b7b      	ldrb	r3, [r7, #13]
 800204c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002052:	4313      	orrs	r3, r2
 8002054:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002056:	2b01      	cmp	r3, #1
 8002058:	d163      	bne.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800205a:	f107 030b 	add.w	r3, r7, #11
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fab9 	bl	80025d8 <ism330dhcx_fsm_data_rate_get>
 8002066:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d159      	bne.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d853      	bhi.n	800211c <ism330dhcx_gy_data_rate_set+0x1a8>
 8002074:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <ism330dhcx_gy_data_rate_set+0x108>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	0800209f 	.word	0x0800209f
 8002084:	080020bd 	.word	0x080020bd
 8002088:	080020e7 	.word	0x080020e7
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002096:	e044      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	75fb      	strb	r3, [r7, #23]
            break;
 800209c:	e041      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80020a4:	2302      	movs	r3, #2
 80020a6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80020a8:	e03b      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80020b0:	2302      	movs	r3, #2
 80020b2:	75fb      	strb	r3, [r7, #23]
            break;
 80020b4:	e035      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	75fb      	strb	r3, [r7, #23]
            break;
 80020ba:	e032      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80020c2:	2303      	movs	r3, #3
 80020c4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80020c6:	e02c      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80020ce:	2303      	movs	r3, #3
 80020d0:	75fb      	strb	r3, [r7, #23]
            break;
 80020d2:	e026      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d102      	bne.n	80020e0 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80020da:	2303      	movs	r3, #3
 80020dc:	75fb      	strb	r3, [r7, #23]
            break;
 80020de:	e020      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	75fb      	strb	r3, [r7, #23]
            break;
 80020e4:	e01d      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80020ec:	2304      	movs	r3, #4
 80020ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80020f0:	e017      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80020f8:	2304      	movs	r3, #4
 80020fa:	75fb      	strb	r3, [r7, #23]
            break;
 80020fc:	e011      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d102      	bne.n	800210a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002104:	2304      	movs	r3, #4
 8002106:	75fb      	strb	r3, [r7, #23]
            break;
 8002108:	e00b      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d102      	bne.n	8002116 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002110:	2304      	movs	r3, #4
 8002112:	75fb      	strb	r3, [r7, #23]
            break;
 8002114:	e005      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	75fb      	strb	r3, [r7, #23]
            break;
 800211a:	e002      	b.n	8002122 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	75fb      	strb	r3, [r7, #23]
            break;
 8002120:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d16c      	bne.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800212c:	f107 030a 	add.w	r3, r7, #10
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa98 	bl	8002668 <ism330dhcx_mlc_get>
 8002138:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800213a:	7abb      	ldrb	r3, [r7, #10]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d162      	bne.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8002140:	f107 0309 	add.w	r3, r7, #9
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fab8 	bl	80026bc <ism330dhcx_mlc_data_rate_get>
 800214c:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d158      	bne.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8002154:	7a7b      	ldrb	r3, [r7, #9]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d852      	bhi.n	8002200 <ism330dhcx_gy_data_rate_set+0x28c>
 800215a:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <ism330dhcx_gy_data_rate_set+0x1ec>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002183 	.word	0x08002183
 8002168:	080021a1 	.word	0x080021a1
 800216c:	080021cb 	.word	0x080021cb
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800217a:	e044      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	75fb      	strb	r3, [r7, #23]
            break;
 8002180:	e041      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002188:	2302      	movs	r3, #2
 800218a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800218c:	e03b      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002194:	2302      	movs	r3, #2
 8002196:	75fb      	strb	r3, [r7, #23]
            break;
 8002198:	e035      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	75fb      	strb	r3, [r7, #23]
            break;
 800219e:	e032      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80021a6:	2303      	movs	r3, #3
 80021a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80021aa:	e02c      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80021b2:	2303      	movs	r3, #3
 80021b4:	75fb      	strb	r3, [r7, #23]
            break;
 80021b6:	e026      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d102      	bne.n	80021c4 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80021be:	2303      	movs	r3, #3
 80021c0:	75fb      	strb	r3, [r7, #23]
            break;
 80021c2:	e020      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	75fb      	strb	r3, [r7, #23]
            break;
 80021c8:	e01d      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021d0:	2304      	movs	r3, #4
 80021d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80021d4:	e017      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021dc:	2304      	movs	r3, #4
 80021de:	75fb      	strb	r3, [r7, #23]
            break;
 80021e0:	e011      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d102      	bne.n	80021ee <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021e8:	2304      	movs	r3, #4
 80021ea:	75fb      	strb	r3, [r7, #23]
            break;
 80021ec:	e00b      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d102      	bne.n	80021fa <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021f4:	2304      	movs	r3, #4
 80021f6:	75fb      	strb	r3, [r7, #23]
            break;
 80021f8:	e005      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	75fb      	strb	r3, [r7, #23]
            break;
 80021fe:	e002      	b.n	8002206 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	75fb      	strb	r3, [r7, #23]
            break;
 8002204:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800220c:	f107 0208 	add.w	r2, r7, #8
 8002210:	2301      	movs	r3, #1
 8002212:	2111      	movs	r1, #17
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fc2f 	bl	8001a78 <ism330dhcx_read_reg>
 800221a:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	7a3b      	ldrb	r3, [r7, #8]
 800222c:	f362 1307 	bfi	r3, r2, #4, #4
 8002230:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002232:	f107 0208 	add.w	r2, r7, #8
 8002236:	2301      	movs	r3, #1
 8002238:	2111      	movs	r1, #17
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fc3a 	bl	8001ab4 <ism330dhcx_write_reg>
 8002240:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8002242:	693b      	ldr	r3, [r7, #16]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(const stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002258:	f107 0208 	add.w	r2, r7, #8
 800225c:	2301      	movs	r3, #1
 800225e:	2112      	movs	r1, #18
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fc09 	bl	8001a78 <ism330dhcx_read_reg>
 8002266:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	7a3b      	ldrb	r3, [r7, #8]
 8002278:	f362 1386 	bfi	r3, r2, #6, #1
 800227c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800227e:	f107 0208 	add.w	r2, r7, #8
 8002282:	2301      	movs	r3, #1
 8002284:	2112      	movs	r1, #18
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fc14 	bl	8001ab4 <ism330dhcx_write_reg>
 800228c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	2306      	movs	r3, #6
 80022a8:	2122      	movs	r1, #34	@ 0x22
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fbe4 	bl	8001a78 <ism330dhcx_read_reg>
 80022b0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80022b2:	7b7b      	ldrb	r3, [r7, #13]
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	7b3a      	ldrb	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	3302      	adds	r3, #2
 80022d8:	b212      	sxth	r2, r2
 80022da:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	3302      	adds	r3, #2
 80022e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	7bba      	ldrb	r2, [r7, #14]
 80022ec:	4413      	add	r3, r2
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	3302      	adds	r3, #2
 80022f4:	b212      	sxth	r2, r2
 80022f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80022f8:	7c7a      	ldrb	r2, [r7, #17]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	3304      	adds	r3, #4
 80022fe:	b212      	sxth	r2, r2
 8002300:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3304      	adds	r3, #4
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	b29b      	uxth	r3, r3
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b29b      	uxth	r3, r3
 8002310:	7c3a      	ldrb	r2, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	b29a      	uxth	r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3304      	adds	r3, #4
 800231a:	b212      	sxth	r2, r2
 800231c:	801a      	strh	r2, [r3, #0]

  return ret;
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	2306      	movs	r3, #6
 8002338:	2128      	movs	r1, #40	@ 0x28
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fb9c 	bl	8001a78 <ism330dhcx_read_reg>
 8002340:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002342:	7b7b      	ldrb	r3, [r7, #13]
 8002344:	b21a      	sxth	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	b29b      	uxth	r3, r3
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	7b3a      	ldrb	r2, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21a      	sxth	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3302      	adds	r3, #2
 8002368:	b212      	sxth	r2, r2
 800236a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3302      	adds	r3, #2
 8002370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002374:	b29b      	uxth	r3, r3
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b29b      	uxth	r3, r3
 800237a:	7bba      	ldrb	r2, [r7, #14]
 800237c:	4413      	add	r3, r2
 800237e:	b29a      	uxth	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3302      	adds	r3, #2
 8002384:	b212      	sxth	r2, r2
 8002386:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002388:	7c7a      	ldrb	r2, [r7, #17]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3304      	adds	r3, #4
 800238e:	b212      	sxth	r2, r2
 8002390:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239a:	b29b      	uxth	r3, r3
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b29b      	uxth	r3, r3
 80023a0:	7c3a      	ldrb	r2, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3304      	adds	r3, #4
 80023aa:	b212      	sxth	r2, r2
 80023ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80023c4:	f107 0208 	add.w	r2, r7, #8
 80023c8:	2301      	movs	r3, #1
 80023ca:	2118      	movs	r1, #24
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb53 	bl	8001a78 <ism330dhcx_read_reg>
 80023d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	7a3b      	ldrb	r3, [r7, #8]
 80023e4:	f362 0341 	bfi	r3, r2, #1, #1
 80023e8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 80023ea:	f107 0208 	add.w	r2, r7, #8
 80023ee:	2301      	movs	r3, #1
 80023f0:	2118      	movs	r1, #24
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fb5e 	bl	8001ab4 <ism330dhcx_write_reg>
 80023f8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(const stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002410:	f107 0208 	add.w	r2, r7, #8
 8002414:	2301      	movs	r3, #1
 8002416:	2101      	movs	r1, #1
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fb2d 	bl	8001a78 <ism330dhcx_read_reg>
 800241e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	7a3b      	ldrb	r3, [r7, #8]
 8002430:	f362 1387 	bfi	r3, r2, #6, #2
 8002434:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002436:	f107 0208 	add.w	r2, r7, #8
 800243a:	2301      	movs	r3, #1
 800243c:	2101      	movs	r1, #1
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fb38 	bl	8001ab4 <ism330dhcx_write_reg>
 8002444:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800245c:	f107 0208 	add.w	r2, r7, #8
 8002460:	2301      	movs	r3, #1
 8002462:	2112      	movs	r1, #18
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fb07 	bl	8001a78 <ism330dhcx_read_reg>
 800246a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	f362 0300 	bfi	r3, r2, #0, #1
 8002480:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002482:	f107 0208 	add.w	r2, r7, #8
 8002486:	2301      	movs	r3, #1
 8002488:	2112      	movs	r1, #18
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fb12 	bl	8001ab4 <ism330dhcx_write_reg>
 8002490:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80024a8:	f107 0208 	add.w	r2, r7, #8
 80024ac:	2301      	movs	r3, #1
 80024ae:	2112      	movs	r1, #18
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fae1 	bl	8001a78 <ism330dhcx_read_reg>
 80024b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	7a3b      	ldrb	r3, [r7, #8]
 80024c8:	f362 0382 	bfi	r3, r2, #2, #1
 80024cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80024ce:	f107 0208 	add.w	r2, r7, #8
 80024d2:	2301      	movs	r3, #1
 80024d4:	2112      	movs	r1, #18
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff faec 	bl	8001ab4 <ism330dhcx_write_reg>
 80024dc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <ism330dhcx_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_filter_lp2_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80024f4:	f107 0208 	add.w	r2, r7, #8
 80024f8:	2301      	movs	r3, #1
 80024fa:	2110      	movs	r1, #16
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fabb 	bl	8001a78 <ism330dhcx_read_reg>
 8002502:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <ism330dhcx_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	7a3b      	ldrb	r3, [r7, #8]
 8002514:	f362 0341 	bfi	r3, r2, #1, #1
 8002518:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800251a:	f107 0208 	add.w	r2, r7, #8
 800251e:	2301      	movs	r3, #1
 8002520:	2110      	movs	r1, #16
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fac6 	bl	8001ab4 <ism330dhcx_write_reg>
 8002528:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(const stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8002540:	f107 0208 	add.w	r2, r7, #8
 8002544:	2301      	movs	r3, #1
 8002546:	210a      	movs	r1, #10
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fa95 	bl	8001a78 <ism330dhcx_read_reg>
 800254e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	b2da      	uxtb	r2, r3
 800255e:	7a3b      	ldrb	r3, [r7, #8]
 8002560:	f362 0302 	bfi	r3, r2, #0, #3
 8002564:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8002566:	f107 0208 	add.w	r2, r7, #8
 800256a:	2301      	movs	r3, #1
 800256c:	210a      	movs	r1, #10
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff faa0 	bl	8001ab4 <ism330dhcx_write_reg>
 8002574:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(const stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800258a:	2102      	movs	r1, #2
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff39 	bl	8002404 <ism330dhcx_mem_bank_set>
 8002592:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800259a:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800259c:	2301      	movs	r3, #1
 800259e:	2146      	movs	r1, #70	@ 0x46
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fa69 	bl	8001a78 <ism330dhcx_read_reg>
 80025a6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d107      	bne.n	80025be <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80025b2:	2301      	movs	r3, #1
 80025b4:	2147      	movs	r1, #71	@ 0x47
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fa5e 	bl	8001a78 <ism330dhcx_read_reg>
 80025bc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80025c4:	2100      	movs	r1, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff1c 	bl	8002404 <ism330dhcx_mem_bank_set>
 80025cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80025e2:	2102      	movs	r1, #2
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff0d 	bl	8002404 <ism330dhcx_mem_bank_set>
 80025ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	2301      	movs	r3, #1
 80025f8:	215f      	movs	r1, #95	@ 0x5f
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fa3c 	bl	8001a78 <ism330dhcx_read_reg>
 8002600:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fefa 	bl	8002404 <ism330dhcx_mem_bank_set>
 8002610:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d81a      	bhi.n	8002654 <ism330dhcx_fsm_data_rate_get+0x7c>
 800261e:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002635 	.word	0x08002635
 8002628:	0800263d 	.word	0x0800263d
 800262c:	08002645 	.word	0x08002645
 8002630:	0800264d 	.word	0x0800264d
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
      break;
 800263a:	e00f      	b.n	800265c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
      break;
 8002642:	e00b      	b.n	800265c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2202      	movs	r2, #2
 8002648:	701a      	strb	r2, [r3, #0]
      break;
 800264a:	e007      	b.n	800265c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2203      	movs	r2, #3
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e003      	b.n	800265c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
      break;
 800265a:	bf00      	nop
  }

  return ret;
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop

08002668 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002672:	2102      	movs	r1, #2
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fec5 	bl	8002404 <ism330dhcx_mem_bank_set>
 800267a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8002682:	f107 0208 	add.w	r2, r7, #8
 8002686:	2301      	movs	r3, #1
 8002688:	2105      	movs	r1, #5
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f9f4 	bl	8001a78 <ism330dhcx_read_reg>
 8002690:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002698:	2100      	movs	r1, #0
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff feb2 	bl	8002404 <ism330dhcx_mem_bank_set>
 80026a0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80026a2:	7a3b      	ldrb	r3, [r7, #8]
 80026a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80026c6:	2102      	movs	r1, #2
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fe9b 	bl	8002404 <ism330dhcx_mem_bank_set>
 80026ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80026d6:	f107 0208 	add.w	r2, r7, #8
 80026da:	2301      	movs	r3, #1
 80026dc:	2160      	movs	r1, #96	@ 0x60
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff f9ca 	bl	8001a78 <ism330dhcx_read_reg>
 80026e4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d12a      	bne.n	8002742 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80026ec:	7a3b      	ldrb	r3, [r7, #8]
 80026ee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d81b      	bhi.n	8002730 <ism330dhcx_mlc_data_rate_get+0x74>
 80026f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <ism330dhcx_mlc_data_rate_get+0x44>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	08002719 	.word	0x08002719
 8002708:	08002721 	.word	0x08002721
 800270c:	08002729 	.word	0x08002729
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
        break;
 8002716:	e00f      	b.n	8002738 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
        break;
 800271e:	e00b      	b.n	8002738 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
        break;
 8002726:	e007      	b.n	8002738 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2203      	movs	r2, #3
 800272c:	701a      	strb	r2, [r3, #0]
        break;
 800272e:	e003      	b.n	8002738 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
        break;
 8002736:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fe62 	bl	8002404 <ism330dhcx_mem_bank_set>
 8002740:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	0000      	movs	r0, r0
	...

08002750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002754:	b08c      	sub	sp, #48	@ 0x30
 8002756:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002758:	f000 ff24 	bl	80035a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 800275c:	4ba2      	ldr	r3, [pc, #648]	@ (80029e8 <main+0x298>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x000;
 8002762:	4ba1      	ldr	r3, [pc, #644]	@ (80029e8 <main+0x298>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8002768:	4b9f      	ldr	r3, [pc, #636]	@ (80029e8 <main+0x298>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 6;
 800276e:	4b9e      	ldr	r3, [pc, #632]	@ (80029e8 <main+0x298>)
 8002770:	2206      	movs	r2, #6
 8002772:	611a      	str	r2, [r3, #16]

  TxHeader1.IDE = CAN_ID_STD;
 8002774:	4b9d      	ldr	r3, [pc, #628]	@ (80029ec <main+0x29c>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  TxHeader1.StdId = 0x000;
 800277a:	4b9c      	ldr	r3, [pc, #624]	@ (80029ec <main+0x29c>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
  TxHeader1.RTR = CAN_RTR_DATA;
 8002780:	4b9a      	ldr	r3, [pc, #616]	@ (80029ec <main+0x29c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  TxHeader1.DLC = 6;
 8002786:	4b99      	ldr	r3, [pc, #612]	@ (80029ec <main+0x29c>)
 8002788:	2206      	movs	r2, #6
 800278a:	611a      	str	r2, [r3, #16]

  TxHeader2.IDE = CAN_ID_STD;
 800278c:	4b98      	ldr	r3, [pc, #608]	@ (80029f0 <main+0x2a0>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  TxHeader2.StdId = 0x000;
 8002792:	4b97      	ldr	r3, [pc, #604]	@ (80029f0 <main+0x2a0>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
  TxHeader2.RTR = CAN_RTR_DATA;
 8002798:	4b95      	ldr	r3, [pc, #596]	@ (80029f0 <main+0x2a0>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  TxHeader2.DLC = 6;
 800279e:	4b94      	ldr	r3, [pc, #592]	@ (80029f0 <main+0x2a0>)
 80027a0:	2206      	movs	r2, #6
 80027a2:	611a      	str	r2, [r3, #16]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a4:	f000 fa64 	bl	8002c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a8:	f000 fb7e 	bl	8002ea8 <MX_GPIO_Init>
  MX_CAN2_Init();
 80027ac:	f000 faca 	bl	8002d44 <MX_CAN2_Init>
  MX_I2C1_Init();
 80027b0:	f000 fafc 	bl	8002dac <MX_I2C1_Init>
  MX_I2C2_Init();
 80027b4:	f000 fb28 	bl	8002e08 <MX_I2C2_Init>
  MX_USB_OTG_FS_HCD_Init();
 80027b8:	f000 fb54 	bl	8002e64 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80027bc:	2064      	movs	r0, #100	@ 0x64
 80027be:	f000 ff63 	bl	8003688 <HAL_Delay>
  if (ISM330DHCX_Init(&myISM) != ISM330DHCX_OK) { // ISM330HDCX OK is equal to 0
 80027c2:	488c      	ldr	r0, [pc, #560]	@ (80029f4 <main+0x2a4>)
 80027c4:	f7fe fc2c 	bl	8001020 <ISM330DHCX_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <main+0x88>
	  	  printf("lmao your ism didnt work lil bro \n");
 80027ce:	488a      	ldr	r0, [pc, #552]	@ (80029f8 <main+0x2a8>)
 80027d0:	f004 fd8c 	bl	80072ec <puts>
          Error_Handler();
 80027d4:	f000 fc5c 	bl	8003090 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t status;
  status = device_reset(&myISM);
 80027d8:	4886      	ldr	r0, [pc, #536]	@ (80029f4 <main+0x2a4>)
 80027da:	f000 fbc5 	bl	8002f68 <device_reset>
 80027de:	6238      	str	r0, [r7, #32]
  if (!status) {
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d104      	bne.n	80027f0 <main+0xa0>
	  printf("ism failed to reset \n");
 80027e6:	4885      	ldr	r0, [pc, #532]	@ (80029fc <main+0x2ac>)
 80027e8:	f004 fd80 	bl	80072ec <puts>
	  Error_Handler();
 80027ec:	f000 fc50 	bl	8003090 <Error_Handler>
  }

  config_ism(&myISM);
 80027f0:	4880      	ldr	r0, [pc, #512]	@ (80029f4 <main+0x2a4>)
 80027f2:	f000 fbfd 	bl	8002ff0 <config_ism>
  //implement CAN here

  ISM330DHCX_ACC_Enable(&myISM);
 80027f6:	487f      	ldr	r0, [pc, #508]	@ (80029f4 <main+0x2a4>)
 80027f8:	f7fe fca9 	bl	800114e <ISM330DHCX_ACC_Enable>
  ISM330DHCX_GYRO_Enable(&myISM);
 80027fc:	487d      	ldr	r0, [pc, #500]	@ (80029f4 <main+0x2a4>)
 80027fe:	f7fe fdac 	bl	800135a <ISM330DHCX_GYRO_Enable>
  HAL_Delay(500);
 8002802:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002806:	f000 ff3f 	bl	8003688 <HAL_Delay>

  uint32_t prevTime = HAL_GetTick();
 800280a:	f000 ff31 	bl	8003670 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	@ 0x24
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2140      	movs	r1, #64	@ 0x40
 8002814:	487a      	ldr	r0, [pc, #488]	@ (8002a00 <main+0x2b0>)
 8002816:	f001 fba9 	bl	8003f6c <HAL_GPIO_WritePin>
	  if (ISM330DHCX_ACC_GetAxes(&myISM, &accelData) == ISM330DHCX_OK && ISM330DHCX_GYRO_GetAxes(&myISM, &gyroData) == ISM330DHCX_OK) {
 800281a:	497a      	ldr	r1, [pc, #488]	@ (8002a04 <main+0x2b4>)
 800281c:	4875      	ldr	r0, [pc, #468]	@ (80029f4 <main+0x2a4>)
 800281e:	f7fe fd45 	bl	80012ac <ISM330DHCX_ACC_GetAxes>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 81de 	bne.w	8002be6 <main+0x496>
 800282a:	4977      	ldr	r1, [pc, #476]	@ (8002a08 <main+0x2b8>)
 800282c:	4871      	ldr	r0, [pc, #452]	@ (80029f4 <main+0x2a4>)
 800282e:	f7fe fe6e 	bl	800150e <ISM330DHCX_GYRO_GetAxes>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 81d6 	bne.w	8002be6 <main+0x496>
		  float dt = ((float) HAL_GetTick() - (float) prevTime) / 1000.0;
 800283a:	f000 ff19 	bl	8003670 <HAL_GetTick>
 800283e:	ee07 0a90 	vmov	s15, r0
 8002842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002854:	ee17 0a90 	vmov	r0, s15
 8002858:	f7fd fe76 	bl	8000548 <__aeabi_f2d>
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <main+0x2bc>)
 8002862:	f7fd fff3 	bl	800084c <__aeabi_ddiv>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f7fe f9bb 	bl	8000be8 <__aeabi_d2f>
 8002872:	4603      	mov	r3, r0
 8002874:	61fb      	str	r3, [r7, #28]
		  prevTime = HAL_GetTick();
 8002876:	f000 fefb 	bl	8003670 <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	@ 0x24

		  int xAccel = (int) accelData.x;
 800287c:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <main+0x2b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
		  int yAccel = (int) accelData.y;
 8002882:	4b60      	ldr	r3, [pc, #384]	@ (8002a04 <main+0x2b4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	617b      	str	r3, [r7, #20]
		  int zAccel = (int) accelData.z;
 8002888:	4b5e      	ldr	r3, [pc, #376]	@ (8002a04 <main+0x2b4>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]

		  //write to CAN
		  TxHeader.StdId = 0x360;
 800288e:	4b56      	ldr	r3, [pc, #344]	@ (80029e8 <main+0x298>)
 8002890:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8002894:	601a      	str	r2, [r3, #0]
		  TxData[0] = (xAccel & 0xFF000000) >> 24;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	0e1b      	lsrs	r3, r3, #24
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b5c      	ldr	r3, [pc, #368]	@ (8002a10 <main+0x2c0>)
 800289e:	701a      	strb	r2, [r3, #0]
		  TxData[1] = (xAccel & 0x00FF0000) >> 16;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	141b      	asrs	r3, r3, #16
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <main+0x2c0>)
 80028a8:	705a      	strb	r2, [r3, #1]
		  TxData[2] = (xAccel & 0x0000FF00) >> 8;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	121b      	asrs	r3, r3, #8
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <main+0x2c0>)
 80028b2:	709a      	strb	r2, [r3, #2]
		  TxData[3] = xAccel & 0xFF;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <main+0x2c0>)
 80028ba:	70da      	strb	r2, [r3, #3]
		  TxData[4] = (yAccel & 0xFF000000) >> 24;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	0e1b      	lsrs	r3, r3, #24
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <main+0x2c0>)
 80028c4:	711a      	strb	r2, [r3, #4]
		  TxData[5] = (yAccel & 0x00FF0000) >> 16;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	141b      	asrs	r3, r3, #16
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <main+0x2c0>)
 80028ce:	715a      	strb	r2, [r3, #5]
		  TxData[6] = (yAccel & 0x0000FF00) >> 8;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	121b      	asrs	r3, r3, #8
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a10 <main+0x2c0>)
 80028d8:	719a      	strb	r2, [r3, #6]
		  TxData[7] = yAccel & 0xFF;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <main+0x2c0>)
 80028e0:	71da      	strb	r2, [r3, #7]
		  if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80028e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002a14 <main+0x2c4>)
 80028e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a10 <main+0x2c0>)
 80028e6:	4940      	ldr	r1, [pc, #256]	@ (80029e8 <main+0x298>)
 80028e8:	484b      	ldr	r0, [pc, #300]	@ (8002a18 <main+0x2c8>)
 80028ea:	f000 ffec 	bl	80038c6 <HAL_CAN_AddTxMessage>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <main+0x1a8>
		     Error_Handler();
 80028f4:	f000 fbcc 	bl	8003090 <Error_Handler>
		  }

		  // Fill half of second can message
		  TxHeader1.StdId = 0x361;
 80028f8:	4b3c      	ldr	r3, [pc, #240]	@ (80029ec <main+0x29c>)
 80028fa:	f240 3261 	movw	r2, #865	@ 0x361
 80028fe:	601a      	str	r2, [r3, #0]
		  TxData1[0] = (zAccel & 0xFF000000) >> 24;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	0e1b      	lsrs	r3, r3, #24
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b45      	ldr	r3, [pc, #276]	@ (8002a1c <main+0x2cc>)
 8002908:	701a      	strb	r2, [r3, #0]
		  TxData1[1] = (zAccel & 0x00FF0000) >> 16;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	141b      	asrs	r3, r3, #16
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b42      	ldr	r3, [pc, #264]	@ (8002a1c <main+0x2cc>)
 8002912:	705a      	strb	r2, [r3, #1]
		  TxData1[2] = (zAccel & 0x0000FF00) >> 8;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	121b      	asrs	r3, r3, #8
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <main+0x2cc>)
 800291c:	709a      	strb	r2, [r3, #2]
 		  TxData1[3] = zAccel & 0xFF;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b3e      	ldr	r3, [pc, #248]	@ (8002a1c <main+0x2cc>)
 8002924:	70da      	strb	r2, [r3, #3]

		  int xGyro = (int) gyroData.x;
 8002926:	4b38      	ldr	r3, [pc, #224]	@ (8002a08 <main+0x2b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
		  int yGyro = (int) gyroData.y;
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <main+0x2b8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60bb      	str	r3, [r7, #8]
		  int zGyro = (int) gyroData.z;
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <main+0x2b8>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	607b      	str	r3, [r7, #4]

		  TxData[4] = (xGyro * 0xFF000000) >> 24;
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	0e1b      	lsrs	r3, r3, #24
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <main+0x2c0>)
 8002948:	711a      	strb	r2, [r3, #4]
		  TxData1[5] = (xGyro & 0x00FF0000) >> 16;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	141b      	asrs	r3, r3, #16
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <main+0x2cc>)
 8002952:	715a      	strb	r2, [r3, #5]
		  TxData1[6] = (xGyro & 0x0000FF00) >> 8;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	121b      	asrs	r3, r3, #8
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b30      	ldr	r3, [pc, #192]	@ (8002a1c <main+0x2cc>)
 800295c:	719a      	strb	r2, [r3, #6]
  		  TxData1[7] = xGyro & 0xFF;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <main+0x2cc>)
 8002964:	71da      	strb	r2, [r3, #7]

		  if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader1, TxData1, &TxMailbox1) != HAL_OK) {
 8002966:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <main+0x2d0>)
 8002968:	4a2c      	ldr	r2, [pc, #176]	@ (8002a1c <main+0x2cc>)
 800296a:	4920      	ldr	r1, [pc, #128]	@ (80029ec <main+0x29c>)
 800296c:	482a      	ldr	r0, [pc, #168]	@ (8002a18 <main+0x2c8>)
 800296e:	f000 ffaa 	bl	80038c6 <HAL_CAN_AddTxMessage>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <main+0x22c>
			 Error_Handler();
 8002978:	f000 fb8a 	bl	8003090 <Error_Handler>
		  }

		  //write third CAN message
		  TxHeader2.StdId = 0x362;
 800297c:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <main+0x2a0>)
 800297e:	f240 3262 	movw	r2, #866	@ 0x362
 8002982:	601a      	str	r2, [r3, #0]
		  TxData2[0] = (yGyro & 0xFF000000) >> 24;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	0e1b      	lsrs	r3, r3, #24
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <main+0x2d4>)
 800298c:	701a      	strb	r2, [r3, #0]
		  TxData2[1] = (yGyro & 0x00FF0000) >> 16;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	141b      	asrs	r3, r3, #16
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <main+0x2d4>)
 8002996:	705a      	strb	r2, [r3, #1]
		  TxData2[2] = (yGyro & 0x0000FF00) >> 8;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	121b      	asrs	r3, r3, #8
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <main+0x2d4>)
 80029a0:	709a      	strb	r2, [r3, #2]
		  TxData2[3] = yGyro & 0xFF;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <main+0x2d4>)
 80029a8:	70da      	strb	r2, [r3, #3]
		  TxData2[4] = (zGyro & 0xFF000000) >> 24;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0e1b      	lsrs	r3, r3, #24
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <main+0x2d4>)
 80029b2:	711a      	strb	r2, [r3, #4]
		  TxData2[5] = (zGyro & 0x00FF0000) >> 16;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	141b      	asrs	r3, r3, #16
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <main+0x2d4>)
 80029bc:	715a      	strb	r2, [r3, #5]
		  TxData2[6] = (zGyro & 0x0000FF00) >> 8;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	121b      	asrs	r3, r3, #8
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <main+0x2d4>)
 80029c6:	719a      	strb	r2, [r3, #6]
		  TxData2[7] = zGyro & 0xFF;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <main+0x2d4>)
 80029ce:	71da      	strb	r2, [r3, #7]
		  if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2) != HAL_OK) {
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <main+0x2d8>)
 80029d2:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <main+0x2d4>)
 80029d4:	4906      	ldr	r1, [pc, #24]	@ (80029f0 <main+0x2a0>)
 80029d6:	4810      	ldr	r0, [pc, #64]	@ (8002a18 <main+0x2c8>)
 80029d8:	f000 ff75 	bl	80038c6 <HAL_CAN_AddTxMessage>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d024      	beq.n	8002a2c <main+0x2dc>
			 Error_Handler();
 80029e2:	f000 fb55 	bl	8003090 <Error_Handler>
 80029e6:	e021      	b.n	8002a2c <main+0x2dc>
 80029e8:	20000704 	.word	0x20000704
 80029ec:	20000728 	.word	0x20000728
 80029f0:	2000074c 	.word	0x2000074c
 80029f4:	200006a8 	.word	0x200006a8
 80029f8:	0800aba0 	.word	0x0800aba0
 80029fc:	0800abc4 	.word	0x0800abc4
 8002a00:	40020000 	.word	0x40020000
 8002a04:	200006e0 	.word	0x200006e0
 8002a08:	200006ec 	.word	0x200006ec
 8002a0c:	408f4000 	.word	0x408f4000
 8002a10:	2000071c 	.word	0x2000071c
 8002a14:	20000724 	.word	0x20000724
 8002a18:	200001f8 	.word	0x200001f8
 8002a1c:	20000740 	.word	0x20000740
 8002a20:	20000748 	.word	0x20000748
 8002a24:	20000764 	.word	0x20000764
 8002a28:	2000076c 	.word	0x2000076c
		  }

		  pitchAccel = atan2(-yAccel, sqrt(pow(xAccel, 2) + pow(zAccel, 2))) * (180000.0f / M_PI);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd77 	bl	8000524 <__aeabi_i2d>
 8002a36:	4604      	mov	r4, r0
 8002a38:	460d      	mov	r5, r1
 8002a3a:	69b8      	ldr	r0, [r7, #24]
 8002a3c:	f7fd fd72 	bl	8000524 <__aeabi_i2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 8002c30 <main+0x4e0>
 8002a48:	ec43 2b10 	vmov	d0, r2, r3
 8002a4c:	f002 fad6 	bl	8004ffc <pow>
 8002a50:	ec59 8b10 	vmov	r8, r9, d0
 8002a54:	6938      	ldr	r0, [r7, #16]
 8002a56:	f7fd fd65 	bl	8000524 <__aeabi_i2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002c30 <main+0x4e0>
 8002a62:	ec43 2b10 	vmov	d0, r2, r3
 8002a66:	f002 fac9 	bl	8004ffc <pow>
 8002a6a:	ec53 2b10 	vmov	r2, r3, d0
 8002a6e:	4640      	mov	r0, r8
 8002a70:	4649      	mov	r1, r9
 8002a72:	f7fd fc0b 	bl	800028c <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	ec43 2b17 	vmov	d7, r2, r3
 8002a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a82:	eef0 0a67 	vmov.f32	s1, s15
 8002a86:	f002 fb29 	bl	80050dc <sqrt>
 8002a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a8e:	eef0 7a60 	vmov.f32	s15, s1
 8002a92:	eeb0 1a47 	vmov.f32	s2, s14
 8002a96:	eef0 1a67 	vmov.f32	s3, s15
 8002a9a:	ec45 4b10 	vmov	d0, r4, r5
 8002a9e:	f002 faab 	bl	8004ff8 <atan2>
 8002aa2:	ec51 0b10 	vmov	r0, r1, d0
 8002aa6:	a364      	add	r3, pc, #400	@ (adr r3, 8002c38 <main+0x4e8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fda4 	bl	80005f8 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f896 	bl	8000be8 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a64      	ldr	r2, [pc, #400]	@ (8002c50 <main+0x500>)
 8002ac0:	6013      	str	r3, [r2, #0]
		  rollAccel = atan2(xAccel, sqrt(pow(yAccel, 2) + pow(zAccel, 2))) * (180000.0f / M_PI);
 8002ac2:	69b8      	ldr	r0, [r7, #24]
 8002ac4:	f7fd fd2e 	bl	8000524 <__aeabi_i2d>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	460d      	mov	r5, r1
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f7fd fd29 	bl	8000524 <__aeabi_i2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8002c30 <main+0x4e0>
 8002ada:	ec43 2b10 	vmov	d0, r2, r3
 8002ade:	f002 fa8d 	bl	8004ffc <pow>
 8002ae2:	ec59 8b10 	vmov	r8, r9, d0
 8002ae6:	6938      	ldr	r0, [r7, #16]
 8002ae8:	f7fd fd1c 	bl	8000524 <__aeabi_i2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002c30 <main+0x4e0>
 8002af4:	ec43 2b10 	vmov	d0, r2, r3
 8002af8:	f002 fa80 	bl	8004ffc <pow>
 8002afc:	ec53 2b10 	vmov	r2, r3, d0
 8002b00:	4640      	mov	r0, r8
 8002b02:	4649      	mov	r1, r9
 8002b04:	f7fd fbc2 	bl	800028c <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	ec43 2b17 	vmov	d7, r2, r3
 8002b10:	eeb0 0a47 	vmov.f32	s0, s14
 8002b14:	eef0 0a67 	vmov.f32	s1, s15
 8002b18:	f002 fae0 	bl	80050dc <sqrt>
 8002b1c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b20:	eef0 7a60 	vmov.f32	s15, s1
 8002b24:	eeb0 1a47 	vmov.f32	s2, s14
 8002b28:	eef0 1a67 	vmov.f32	s3, s15
 8002b2c:	ec45 4b10 	vmov	d0, r4, r5
 8002b30:	f002 fa62 	bl	8004ff8 <atan2>
 8002b34:	ec51 0b10 	vmov	r0, r1, d0
 8002b38:	a33f      	add	r3, pc, #252	@ (adr r3, 8002c38 <main+0x4e8>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fd5b 	bl	80005f8 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fe f84d 	bl	8000be8 <__aeabi_d2f>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a40      	ldr	r2, [pc, #256]	@ (8002c54 <main+0x504>)
 8002b52:	6013      	str	r3, [r2, #0]
		  pitch = kpitch * (pitch + ((float)xGyro * dt)) + (1.0f - kpitch) * pitchAccel;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b66:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <main+0x508>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b70:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <main+0x50c>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7a:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <main+0x50c>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b88:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <main+0x500>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b96:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <main+0x508>)
 8002b98:	edc3 7a00 	vstr	s15, [r3]

		  printf("%f\t%f\n", pitchAccel * 180000.0/3.1415, pitch);
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <main+0x500>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcd1 	bl	8000548 <__aeabi_f2d>
 8002ba6:	a326      	add	r3, pc, #152	@ (adr r3, 8002c40 <main+0x4f0>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fd24 	bl	80005f8 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	a323      	add	r3, pc, #140	@ (adr r3, 8002c48 <main+0x4f8>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fe45 	bl	800084c <__aeabi_ddiv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	461d      	mov	r5, r3
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <main+0x508>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcba 	bl	8000548 <__aeabi_f2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bdc:	4622      	mov	r2, r4
 8002bde:	462b      	mov	r3, r5
 8002be0:	481f      	ldr	r0, [pc, #124]	@ (8002c60 <main+0x510>)
 8002be2:	f004 fb1b 	bl	800721c <iprintf>
	  }
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  static uint32_t timeout = 0;
	  if (HAL_GetTick() - timeout > 5000) {
 8002be6:	f000 fd43 	bl	8003670 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <main+0x514>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f67f ae0a 	bls.w	8002810 <main+0xc0>
		  ledState = (ledState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <main+0x518>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <main+0x518>)
 8002c0e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ledState);
 8002c10:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <main+0x518>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	2140      	movs	r1, #64	@ 0x40
 8002c18:	4814      	ldr	r0, [pc, #80]	@ (8002c6c <main+0x51c>)
 8002c1a:	f001 f9a7 	bl	8003f6c <HAL_GPIO_WritePin>
		  timeout = HAL_GetTick();
 8002c1e:	f000 fd27 	bl	8003670 <HAL_GetTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <main+0x514>)
 8002c26:	6013      	str	r3, [r2, #0]
  {
 8002c28:	e5f2      	b.n	8002810 <main+0xc0>
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40000000 	.word	0x40000000
 8002c38:	f1c56b6c 	.word	0xf1c56b6c
 8002c3c:	40ebf9f8 	.word	0x40ebf9f8
 8002c40:	00000000 	.word	0x00000000
 8002c44:	4105f900 	.word	0x4105f900
 8002c48:	c083126f 	.word	0xc083126f
 8002c4c:	400921ca 	.word	0x400921ca
 8002c50:	200006fc 	.word	0x200006fc
 8002c54:	20000700 	.word	0x20000700
 8002c58:	200006f8 	.word	0x200006f8
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	0800abdc 	.word	0x0800abdc
 8002c64:	20000770 	.word	0x20000770
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	40020400 	.word	0x40020400

08002c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b094      	sub	sp, #80	@ 0x50
 8002c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c76:	f107 0320 	add.w	r3, r7, #32
 8002c7a:	2230      	movs	r2, #48	@ 0x30
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 fc36 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	4b28      	ldr	r3, [pc, #160]	@ (8002d3c <SystemClock_Config+0xcc>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <SystemClock_Config+0xcc>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca4:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <SystemClock_Config+0xcc>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <SystemClock_Config+0xd0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <SystemClock_Config+0xd0>)
 8002cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <SystemClock_Config+0xd0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002ce0:	2306      	movs	r3, #6
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ce4:	23a8      	movs	r3, #168	@ 0xa8
 8002ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cec:	2307      	movs	r3, #7
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf0:	f107 0320 	add.w	r3, r7, #32
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fb17 	bl	8004328 <HAL_RCC_OscConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d00:	f000 f9c6 	bl	8003090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d04:	230f      	movs	r3, #15
 8002d06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2105      	movs	r1, #5
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 fd78 	bl	8004818 <HAL_RCC_ClockConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d2e:	f000 f9af 	bl	8003090 <Error_Handler>
  }
}
 8002d32:	bf00      	nop
 8002d34:	3750      	adds	r7, #80	@ 0x50
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000

08002d44 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002d48:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d4a:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <MX_CAN2_Init+0x64>)
 8002d4c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d50:	2210      	movs	r2, #16
 8002d52:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d5a:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002d60:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	@ (8002da4 <MX_CAN2_Init+0x60>)
 8002d92:	f000 fc9d 	bl	80036d0 <HAL_CAN_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8002d9c:	f000 f978 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200001f8 	.word	0x200001f8
 8002da8:	40006800 	.word	0x40006800

08002dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <MX_I2C1_Init+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002db8:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_I2C1_Init+0x58>)
 8002dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <MX_I2C1_Init+0x50>)
 8002dea:	f001 f959 	bl	80040a0 <HAL_I2C_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002df4:	f000 f94c 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000220 	.word	0x20000220
 8002e00:	40005400 	.word	0x40005400
 8002e04:	000186a0 	.word	0x000186a0

08002e08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <MX_I2C2_Init+0x54>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <MX_I2C2_Init+0x58>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <MX_I2C2_Init+0x50>)
 8002e46:	f001 f92b 	bl	80040a0 <HAL_I2C_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e50:	f000 f91e 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000274 	.word	0x20000274
 8002e5c:	40005800 	.word	0x40005800
 8002e60:	000186a0 	.word	0x000186a0

08002e64 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002e68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002e6e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e72:	2208      	movs	r2, #8
 8002e74:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e84:	2202      	movs	r2, #2
 8002e86:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002e8e:	4805      	ldr	r0, [pc, #20]	@ (8002ea4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002e90:	f001 f89f 	bl	8003fd2 <HAL_HCD_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8002e9a:	f000 f8f9 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200002c8 	.word	0x200002c8

08002ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a25      	ldr	r2, [pc, #148]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ece:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eea:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4b18      	ldr	r3, [pc, #96]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <MX_GPIO_Init+0xb4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	4812      	ldr	r0, [pc, #72]	@ (8002f60 <MX_GPIO_Init+0xb8>)
 8002f18:	f001 f828 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480c      	ldr	r0, [pc, #48]	@ (8002f64 <MX_GPIO_Init+0xbc>)
 8002f32:	f000 fe7f 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f36:	2340      	movs	r3, #64	@ 0x40
 8002f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4804      	ldr	r0, [pc, #16]	@ (8002f60 <MX_GPIO_Init+0xb8>)
 8002f4e:	f000 fe71 	bl	8003c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f52:	bf00      	nop
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020000 	.word	0x40020000

08002f68 <device_reset>:

/* USER CODE BEGIN 4 */

int device_reset(ISM330DHCX_Object_t *ism) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	ism330dhcx_ctrl3_c_t ctrl3_c;
	int32_t ret;

	ret = ism330dhcx_read_reg(&ism->Ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f103 0020 	add.w	r0, r3, #32
 8002f76:	f107 0208 	add.w	r2, r7, #8
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	2112      	movs	r1, #18
 8002f7e:	f7fe fd7b 	bl	8001a78 <ism330dhcx_read_reg>
 8002f82:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <device_reset+0x26>
		return ret;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	e02b      	b.n	8002fe6 <device_reset+0x7e>
	}

	ctrl3_c.sw_reset = 1; // turns on reset
 8002f8e:	7a3b      	ldrb	r3, [r7, #8]
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	723b      	strb	r3, [r7, #8]
	ret = ism330dhcx_write_reg(&ism->Ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f103 0020 	add.w	r0, r3, #32
 8002f9c:	f107 0208 	add.w	r2, r7, #8
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	2112      	movs	r1, #18
 8002fa4:	f7fe fd86 	bl	8001ab4 <ism330dhcx_write_reg>
 8002fa8:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <device_reset+0x4c>
		return ret;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e018      	b.n	8002fe6 <device_reset+0x7e>
	}

	do { //check to make sure register is updated
		HAL_Delay(10);
 8002fb4:	200a      	movs	r0, #10
 8002fb6:	f000 fb67 	bl	8003688 <HAL_Delay>
		ret = ism330dhcx_read_reg(&ism->Ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 0020 	add.w	r0, r3, #32
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2112      	movs	r1, #18
 8002fc8:	f7fe fd56 	bl	8001a78 <ism330dhcx_read_reg>
 8002fcc:	60f8      	str	r0, [r7, #12]
		if (ret != 0) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <device_reset+0x70>
			return ret;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	e006      	b.n	8002fe6 <device_reset+0x7e>
		}
	} while (ctrl3_c.sw_reset != 0);
 8002fd8:	7a3b      	ldrb	r3, [r7, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e7      	bne.n	8002fb4 <device_reset+0x4c>

	return 0;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <config_ism>:

void config_ism(ISM330DHCX_Object_t *ism) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	// enable block update
    if (ISM330DHCX_Write_Reg(ism, ISM330DHCX_CTRL3_C, 0x40) != ISM330DHCX_OK) {
 8002ff8:	2240      	movs	r2, #64	@ 0x40
 8002ffa:	2112      	movs	r1, #18
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fe fadd 	bl	80015bc <ISM330DHCX_Write_Reg>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <config_ism+0x1c>
        Error_Handler();
 8003008:	f000 f842 	bl	8003090 <Error_Handler>
    }

    // set acc data rate to 208hz
    if (ISM330DHCX_ACC_SetOutputDataRate(ism, 208.0f) != ISM330DHCX_OK) {
 800300c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800308c <config_ism+0x9c>
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe f907 	bl	8001224 <ISM330DHCX_ACC_SetOutputDataRate>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <config_ism+0x30>
        Error_Handler();
 800301c:	f000 f838 	bl	8003090 <Error_Handler>
    }
    // set acc data to scale to +- 2 G's
    if (ISM330DHCX_ACC_SetFullScale(ism, 2) != ISM330DHCX_OK) {
 8003020:	2102      	movs	r1, #2
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe f91a 	bl	800125c <ISM330DHCX_ACC_SetFullScale>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <config_ism+0x42>
        Error_Handler();
 800302e:	f000 f82f 	bl	8003090 <Error_Handler>
    }

    // set gyro data rate to 208hz
    if (ISM330DHCX_GYRO_SetOutputDataRate(ism, 208.0f) != ISM330DHCX_OK) {
 8003032:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800308c <config_ism+0x9c>
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fa18 	bl	800146c <ISM330DHCX_GYRO_SetOutputDataRate>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <config_ism+0x56>
        Error_Handler();
 8003042:	f000 f825 	bl	8003090 <Error_Handler>
    }
    //set gyro scaling to 500 dps
    if (ISM330DHCX_GYRO_SetFullScale(ism, 500) != ISM330DHCX_OK) {
 8003046:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fa2a 	bl	80014a4 <ISM330DHCX_GYRO_SetFullScale>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <config_ism+0x6a>
        Error_Handler();
 8003056:	f000 f81b 	bl	8003090 <Error_Handler>
    }

    // enable lpf2 filter
    if (ism330dhcx_xl_filter_lp2_set(&(ism->Ctx),1) != ISM330DHCX_OK) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3320      	adds	r3, #32
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fa41 	bl	80024e8 <ism330dhcx_xl_filter_lp2_set>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <config_ism+0x80>
        Error_Handler();
 800306c:	f000 f810 	bl	8003090 <Error_Handler>
    }

    // some filter
    if (ISM330DHCX_Write_Reg(ism, ISM330DHCX_CTRL1_XL, 0x00) != ISM330DHCX_OK) {
 8003070:	2200      	movs	r2, #0
 8003072:	2110      	movs	r1, #16
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fe faa1 	bl	80015bc <ISM330DHCX_Write_Reg>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <config_ism+0x94>
        Error_Handler();
 8003080:	f000 f806 	bl	8003090 <Error_Handler>
//
//    // josh cooked here? soemthing to do with setting the bandwidth to agressive
//    if (ISM330DHCX_Write_Reg(ism, ISM330DHCX_CTRL4_C, 0x00) != ISM330DHCX_OK) {
//        Error_Handler();
//    }
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	43500000 	.word	0x43500000

08003090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8003098:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800309c:	4803      	ldr	r0, [pc, #12]	@ (80030ac <Error_Handler+0x1c>)
 800309e:	f000 ff7e 	bl	8003f9e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030a2:	2064      	movs	r0, #100	@ 0x64
 80030a4:	f000 faf0 	bl	8003688 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80030a8:	bf00      	nop
 80030aa:	e7f5      	b.n	8003098 <Error_Handler+0x8>
 80030ac:	40020400 	.word	0x40020400

080030b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_MspInit+0x4c>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	4a0f      	ldr	r2, [pc, #60]	@ (80030fc <HAL_MspInit+0x4c>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_MspInit+0x4c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_MspInit+0x4c>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a08      	ldr	r2, [pc, #32]	@ (80030fc <HAL_MspInit+0x4c>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_MspInit+0x4c>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a20      	ldr	r2, [pc, #128]	@ (80031a0 <HAL_CAN_MspInit+0xa0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d13a      	bne.n	8003198 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a1e      	ldr	r2, [pc, #120]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 800312c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6313      	str	r3, [r2, #48]	@ 0x30
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_CAN_MspInit+0xa4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003176:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800317a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003188:	2309      	movs	r3, #9
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4619      	mov	r1, r3
 8003192:	4805      	ldr	r0, [pc, #20]	@ (80031a8 <HAL_CAN_MspInit+0xa8>)
 8003194:	f000 fd4e 	bl	8003c34 <HAL_GPIO_Init>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8003198:	bf00      	nop
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40006800 	.word	0x40006800
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020400 	.word	0x40020400

080031ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	@ 0x30
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_I2C_MspInit+0xec>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d12d      	bne.n	800322a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	4b32      	ldr	r3, [pc, #200]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a31      	ldr	r2, [pc, #196]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f0:	2312      	movs	r3, #18
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031fc:	2304      	movs	r3, #4
 80031fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 031c 	add.w	r3, r7, #28
 8003204:	4619      	mov	r1, r3
 8003206:	4826      	ldr	r0, [pc, #152]	@ (80032a0 <HAL_I2C_MspInit+0xf4>)
 8003208:	f000 fd14 	bl	8003c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	4b22      	ldr	r3, [pc, #136]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 8003216:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800321a:	6413      	str	r3, [r2, #64]	@ 0x40
 800321c:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003228:	e031      	b.n	800328e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_I2C_MspInit+0xf8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d12c      	bne.n	800328e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	4b18      	ldr	r3, [pc, #96]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	4a17      	ldr	r2, [pc, #92]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	6313      	str	r3, [r2, #48]	@ 0x30
 8003244:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003250:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003256:	2312      	movs	r3, #18
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325e:	2303      	movs	r3, #3
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003262:	2304      	movs	r3, #4
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	4619      	mov	r1, r3
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <HAL_I2C_MspInit+0xf4>)
 800326e:	f000 fce1 	bl	8003c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	4a08      	ldr	r2, [pc, #32]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 800327c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003280:	6413      	str	r3, [r2, #64]	@ 0x40
 8003282:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_I2C_MspInit+0xf0>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	bf00      	nop
 8003290:	3730      	adds	r7, #48	@ 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40005400 	.word	0x40005400
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40005800 	.word	0x40005800

080032a8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c8:	d132      	bne.n	8003330 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032f8:	230a      	movs	r3, #10
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	480e      	ldr	r0, [pc, #56]	@ (800333c <HAL_HCD_MspInit+0x94>)
 8003304:	f000 fc96 	bl	8003c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330c:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 800330e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003312:	6353      	str	r3, [r2, #52]	@ 0x34
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	4a06      	ldr	r2, [pc, #24]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 800331e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003322:	6453      	str	r3, [r2, #68]	@ 0x44
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <HAL_HCD_MspInit+0x90>)
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003330:	bf00      	nop
 8003332:	3728      	adds	r7, #40	@ 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <NMI_Handler+0x4>

08003348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <HardFault_Handler+0x4>

08003350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <MemManage_Handler+0x4>

08003358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <BusFault_Handler+0x4>

08003360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <UsageFault_Handler+0x4>

08003368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003396:	f000 f957 	bl	8003648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}

0800339e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  return 1;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <_kill>:

int _kill(int pid, int sig)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033b8:	f004 f8ec 	bl	8007594 <__errno>
 80033bc:	4603      	mov	r3, r0
 80033be:	2216      	movs	r2, #22
 80033c0:	601a      	str	r2, [r3, #0]
  return -1;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_exit>:

void _exit (int status)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d6:	f04f 31ff 	mov.w	r1, #4294967295
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffe7 	bl	80033ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <_exit+0x12>

080033e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033f6:	f3af 8000 	nop.w
 80033fa:	4601      	mov	r1, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60ba      	str	r2, [r7, #8]
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	dbf0      	blt.n	80033f6 <_read+0x12>
  }

  return len;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e009      	b.n	8003444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf1      	blt.n	8003430 <_write+0x12>
  }
  return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_close>:

int _close(int file)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800347e:	605a      	str	r2, [r3, #4]
  return 0;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_isatty>:

int _isatty(int file)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c8:	4a14      	ldr	r2, [pc, #80]	@ (800351c <_sbrk+0x5c>)
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <_sbrk+0x60>)
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d4:	4b13      	ldr	r3, [pc, #76]	@ (8003524 <_sbrk+0x64>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034dc:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <_sbrk+0x64>)
 80034de:	4a12      	ldr	r2, [pc, #72]	@ (8003528 <_sbrk+0x68>)
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e2:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <_sbrk+0x64>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d207      	bcs.n	8003500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f0:	f004 f850 	bl	8007594 <__errno>
 80034f4:	4603      	mov	r3, r0
 80034f6:	220c      	movs	r2, #12
 80034f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	e009      	b.n	8003514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003500:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <_sbrk+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003506:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	4a05      	ldr	r2, [pc, #20]	@ (8003524 <_sbrk+0x64>)
 8003510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20020000 	.word	0x20020000
 8003520:	00000400 	.word	0x00000400
 8003524:	20000774 	.word	0x20000774
 8003528:	200008c8 	.word	0x200008c8

0800352c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003530:	4b06      	ldr	r3, [pc, #24]	@ (800354c <SystemInit+0x20>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	4a05      	ldr	r2, [pc, #20]	@ (800354c <SystemInit+0x20>)
 8003538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800353c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003588 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003554:	f7ff ffea 	bl	800352c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800355a:	490d      	ldr	r1, [pc, #52]	@ (8003590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003560:	e002      	b.n	8003568 <LoopCopyDataInit>

08003562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003566:	3304      	adds	r3, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800356c:	d3f9      	bcc.n	8003562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356e:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003570:	4c0a      	ldr	r4, [pc, #40]	@ (800359c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003574:	e001      	b.n	800357a <LoopFillZerobss>

08003576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003578:	3204      	adds	r2, #4

0800357a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800357c:	d3fb      	bcc.n	8003576 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800357e:	f004 f80f 	bl	80075a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003582:	f7ff f8e5 	bl	8002750 <main>
  bx  lr    
 8003586:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003590:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003594:	0800b0ec 	.word	0x0800b0ec
  ldr r2, =_sbss
 8003598:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800359c:	200008c8 	.word	0x200008c8

080035a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a0:	e7fe      	b.n	80035a0 <ADC_IRQHandler>
	...

080035a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <HAL_Init+0x40>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <HAL_Init+0x40>)
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <HAL_Init+0x40>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f000 fafd 	bl	8003bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d2:	200f      	movs	r0, #15
 80035d4:	f000 f808 	bl	80035e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d8:	f7ff fd6a 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f0:	4b12      	ldr	r3, [pc, #72]	@ (800363c <HAL_InitTick+0x54>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_InitTick+0x58>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb07 	bl	8003c1a <HAL_SYSTICK_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00e      	b.n	8003634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d80a      	bhi.n	8003632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f000 fadd 	bl	8003be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003628:	4a06      	ldr	r2, [pc, #24]	@ (8003644 <HAL_InitTick+0x5c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000008 	.word	0x20000008
 8003640:	20000010 	.word	0x20000010
 8003644:	2000000c 	.word	0x2000000c

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000010 	.word	0x20000010
 800366c:	20000778 	.word	0x20000778

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000778 	.word	0x20000778

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_Delay+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ae:	bf00      	nop
 80036b0:	f7ff ffde 	bl	8003670 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000010 	.word	0x20000010

080036d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ed      	b.n	80038be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fd06 	bl	8003100 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003704:	f7ff ffb4 	bl	8003670 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800370a:	e012      	b.n	8003732 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800370c:	f7ff ffb0 	bl	8003670 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d90b      	bls.n	8003732 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2205      	movs	r2, #5
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0c5      	b.n	80038be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0e5      	beq.n	800370c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0202 	bic.w	r2, r2, #2
 800374e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003750:	f7ff ff8e 	bl	8003670 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003756:	e012      	b.n	800377e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003758:	f7ff ff8a 	bl	8003670 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b0a      	cmp	r3, #10
 8003764:	d90b      	bls.n	800377e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2205      	movs	r2, #5
 8003776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e09f      	b.n	80038be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e1b      	ldrb	r3, [r3, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7e5b      	ldrb	r3, [r3, #25]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7e9b      	ldrb	r3, [r3, #26]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0220 	orr.w	r2, r2, #32
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0220 	bic.w	r2, r2, #32
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7edb      	ldrb	r3, [r3, #27]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d108      	bne.n	8003824 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0210 	bic.w	r2, r2, #16
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0210 	orr.w	r2, r2, #16
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7f1b      	ldrb	r3, [r3, #28]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d108      	bne.n	800384e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0208 	orr.w	r2, r2, #8
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e007      	b.n	800385e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0208 	bic.w	r2, r2, #8
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7f5b      	ldrb	r3, [r3, #29]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e007      	b.n	8003888 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	ea42 0103 	orr.w	r1, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b089      	sub	sp, #36	@ 0x24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e4:	7ffb      	ldrb	r3, [r7, #31]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d003      	beq.n	80038f2 <HAL_CAN_AddTxMessage+0x2c>
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f040 80ad 	bne.w	8003a4c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8095 	beq.w	8003a3c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800391c:	2201      	movs	r2, #1
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	409a      	lsls	r2, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	6809      	ldr	r1, [r1, #0]
 800393c:	431a      	orrs	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3318      	adds	r3, #24
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	440b      	add	r3, r1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e00f      	b.n	800396a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003954:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800395e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3318      	adds	r3, #24
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	440b      	add	r3, r1
 8003968:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	3318      	adds	r3, #24
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	440b      	add	r3, r1
 800397a:	3304      	adds	r3, #4
 800397c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	7d1b      	ldrb	r3, [r3, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d111      	bne.n	80039aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3318      	adds	r3, #24
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3318      	adds	r3, #24
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	440b      	add	r3, r1
 80039a6:	3304      	adds	r3, #4
 80039a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3307      	adds	r3, #7
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	061a      	lsls	r2, r3, #24
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3306      	adds	r3, #6
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3305      	adds	r3, #5
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	4313      	orrs	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	3204      	adds	r2, #4
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	4610      	mov	r0, r2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	6811      	ldr	r1, [r2, #0]
 80039d2:	ea43 0200 	orr.w	r2, r3, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	440b      	add	r3, r1
 80039dc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80039e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3303      	adds	r3, #3
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	061a      	lsls	r2, r3, #24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3302      	adds	r3, #2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	4313      	orrs	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	4610      	mov	r0, r2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6811      	ldr	r1, [r2, #0]
 8003a08:	ea43 0200 	orr.w	r2, r3, r0
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	440b      	add	r3, r1
 8003a12:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003a16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	4413      	add	r3, r2
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	6811      	ldr	r1, [r2, #0]
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3318      	adds	r3, #24
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	440b      	add	r3, r1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e00e      	b.n	8003a5a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e006      	b.n	8003a5a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	@ 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	db0a      	blt.n	8003af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	490c      	ldr	r1, [pc, #48]	@ (8003b18 <__NVIC_SetPriority+0x4c>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	440b      	add	r3, r1
 8003af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af4:	e00a      	b.n	8003b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	4908      	ldr	r1, [pc, #32]	@ (8003b1c <__NVIC_SetPriority+0x50>)
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	3b04      	subs	r3, #4
 8003b04:	0112      	lsls	r2, r2, #4
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	440b      	add	r3, r1
 8003b0a:	761a      	strb	r2, [r3, #24]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000e100 	.word	0xe000e100
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	@ 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f1c3 0307 	rsb	r3, r3, #7
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	bf28      	it	cs
 8003b3e:	2304      	movcs	r3, #4
 8003b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d902      	bls.n	8003b50 <NVIC_EncodePriority+0x30>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3b03      	subs	r3, #3
 8003b4e:	e000      	b.n	8003b52 <NVIC_EncodePriority+0x32>
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	401a      	ands	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b68:	f04f 31ff 	mov.w	r1, #4294967295
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	4313      	orrs	r3, r2
         );
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3724      	adds	r7, #36	@ 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b98:	d301      	bcc.n	8003b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e00f      	b.n	8003bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <SysTick_Config+0x40>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	f7ff ff8e 	bl	8003acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <SysTick_Config+0x40>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <SysTick_Config+0x40>)
 8003bb8:	2207      	movs	r2, #7
 8003bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	e000e010 	.word	0xe000e010

08003bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff47 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf4:	f7ff ff5c 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff8e 	bl	8003b20 <NVIC_EncodePriority>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5d 	bl	8003acc <__NVIC_SetPriority>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffb0 	bl	8003b88 <SysTick_Config>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b089      	sub	sp, #36	@ 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e16b      	b.n	8003f28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c50:	2201      	movs	r2, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	f040 815a 	bne.w	8003f22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d005      	beq.n	8003c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d130      	bne.n	8003ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	2203      	movs	r2, #3
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 0201 	and.w	r2, r3, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d017      	beq.n	8003d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d123      	bne.n	8003d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	220f      	movs	r2, #15
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	08da      	lsrs	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3208      	adds	r2, #8
 8003d72:	69b9      	ldr	r1, [r7, #24]
 8003d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0203 	and.w	r2, r3, #3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80b4 	beq.w	8003f22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4b60      	ldr	r3, [pc, #384]	@ (8003f40 <HAL_GPIO_Init+0x30c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003f40 <HAL_GPIO_Init+0x30c>)
 8003dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dca:	4b5d      	ldr	r3, [pc, #372]	@ (8003f40 <HAL_GPIO_Init+0x30c>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f44 <HAL_GPIO_Init+0x310>)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a52      	ldr	r2, [pc, #328]	@ (8003f48 <HAL_GPIO_Init+0x314>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02b      	beq.n	8003e5a <HAL_GPIO_Init+0x226>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a51      	ldr	r2, [pc, #324]	@ (8003f4c <HAL_GPIO_Init+0x318>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d025      	beq.n	8003e56 <HAL_GPIO_Init+0x222>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a50      	ldr	r2, [pc, #320]	@ (8003f50 <HAL_GPIO_Init+0x31c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01f      	beq.n	8003e52 <HAL_GPIO_Init+0x21e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4f      	ldr	r2, [pc, #316]	@ (8003f54 <HAL_GPIO_Init+0x320>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d019      	beq.n	8003e4e <HAL_GPIO_Init+0x21a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f58 <HAL_GPIO_Init+0x324>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_GPIO_Init+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4d      	ldr	r2, [pc, #308]	@ (8003f5c <HAL_GPIO_Init+0x328>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00d      	beq.n	8003e46 <HAL_GPIO_Init+0x212>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f60 <HAL_GPIO_Init+0x32c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <HAL_GPIO_Init+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4b      	ldr	r2, [pc, #300]	@ (8003f64 <HAL_GPIO_Init+0x330>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <HAL_GPIO_Init+0x20a>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00e      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	e00c      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e42:	2306      	movs	r3, #6
 8003e44:	e00a      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e46:	2305      	movs	r3, #5
 8003e48:	e008      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	e006      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e004      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e002      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_GPIO_Init+0x228>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f002 0203 	and.w	r2, r2, #3
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	4093      	lsls	r3, r2
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e6c:	4935      	ldr	r1, [pc, #212]	@ (8003f44 <HAL_GPIO_Init+0x310>)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9e:	4a32      	ldr	r2, [pc, #200]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b30      	ldr	r3, [pc, #192]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ece:	4b26      	ldr	r3, [pc, #152]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f1c:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <HAL_GPIO_Init+0x334>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	f67f ae90 	bls.w	8003c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	40020400 	.word	0x40020400
 8003f50:	40020800 	.word	0x40020800
 8003f54:	40020c00 	.word	0x40020c00
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40021400 	.word	0x40021400
 8003f60:	40021800 	.word	0x40021800
 8003f64:	40021c00 	.word	0x40021c00
 8003f68:	40013c00 	.word	0x40013c00

08003f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f88:	e003      	b.n	8003f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	041a      	lsls	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	619a      	str	r2, [r3, #24]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fb0:	887a      	ldrh	r2, [r7, #2]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	041a      	lsls	r2, r3, #16
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	619a      	str	r2, [r3, #24]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af02      	add	r7, sp, #8
 8003fd8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e059      	b.n	8004098 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f952 	bl	80032a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2203      	movs	r2, #3
 8004008:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004012:	d102      	bne.n	800401a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fe2a 	bl	8004c78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7c1a      	ldrb	r2, [r3, #16]
 800402c:	f88d 2000 	strb.w	r2, [sp]
 8004030:	3304      	adds	r3, #4
 8004032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004034:	f000 fdbc 	bl	8004bb0 <USB_CoreInit>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e026      	b.n	8004098 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fe22 	bl	8004c9a <USB_SetCurrentMode>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e017      	b.n	8004098 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7c1a      	ldrb	r2, [r3, #16]
 8004070:	f88d 2000 	strb.w	r2, [sp]
 8004074:	3304      	adds	r3, #4
 8004076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004078:	f000 fefa 	bl	8004e70 <USB_HostInit>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e004      	b.n	8004098 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e12b      	b.n	800430a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff f870 	bl	80031ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	@ 0x24
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004104:	f000 fd40 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8004108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4a81      	ldr	r2, [pc, #516]	@ (8004314 <HAL_I2C_Init+0x274>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d807      	bhi.n	8004124 <HAL_I2C_Init+0x84>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a80      	ldr	r2, [pc, #512]	@ (8004318 <HAL_I2C_Init+0x278>)
 8004118:	4293      	cmp	r3, r2
 800411a:	bf94      	ite	ls
 800411c:	2301      	movls	r3, #1
 800411e:	2300      	movhi	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e006      	b.n	8004132 <HAL_I2C_Init+0x92>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a7d      	ldr	r2, [pc, #500]	@ (800431c <HAL_I2C_Init+0x27c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	bf94      	ite	ls
 800412c:	2301      	movls	r3, #1
 800412e:	2300      	movhi	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0e7      	b.n	800430a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a78      	ldr	r2, [pc, #480]	@ (8004320 <HAL_I2C_Init+0x280>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9b      	lsrs	r3, r3, #18
 8004144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a6a      	ldr	r2, [pc, #424]	@ (8004314 <HAL_I2C_Init+0x274>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d802      	bhi.n	8004174 <HAL_I2C_Init+0xd4>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3301      	adds	r3, #1
 8004172:	e009      	b.n	8004188 <HAL_I2C_Init+0xe8>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_I2C_Init+0x284>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	3301      	adds	r3, #1
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	430b      	orrs	r3, r1
 800418e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800419a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	495c      	ldr	r1, [pc, #368]	@ (8004314 <HAL_I2C_Init+0x274>)
 80041a4:	428b      	cmp	r3, r1
 80041a6:	d819      	bhi.n	80041dc <HAL_I2C_Init+0x13c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1e59      	subs	r1, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041bc:	400b      	ands	r3, r1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_I2C_Init+0x138>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e59      	subs	r1, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d6:	e051      	b.n	800427c <HAL_I2C_Init+0x1dc>
 80041d8:	2304      	movs	r3, #4
 80041da:	e04f      	b.n	800427c <HAL_I2C_Init+0x1dc>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d111      	bne.n	8004208 <HAL_I2C_Init+0x168>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e012      	b.n	800422e <HAL_I2C_Init+0x18e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e58      	subs	r0, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	0099      	lsls	r1, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	fbb0 f3f3 	udiv	r3, r0, r3
 800421e:	3301      	adds	r3, #1
 8004220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Init+0x196>
 8004232:	2301      	movs	r3, #1
 8004234:	e022      	b.n	800427c <HAL_I2C_Init+0x1dc>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10e      	bne.n	800425c <HAL_I2C_Init+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1e58      	subs	r0, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	440b      	add	r3, r1
 800424c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004250:	3301      	adds	r3, #1
 8004252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425a:	e00f      	b.n	800427c <HAL_I2C_Init+0x1dc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1e58      	subs	r0, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	0099      	lsls	r1, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	6809      	ldr	r1, [r1, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6911      	ldr	r1, [r2, #16]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68d2      	ldr	r2, [r2, #12]
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	430b      	orrs	r3, r1
 80042be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	000186a0 	.word	0x000186a0
 8004318:	001e847f 	.word	0x001e847f
 800431c:	003d08ff 	.word	0x003d08ff
 8004320:	431bde83 	.word	0x431bde83
 8004324:	10624dd3 	.word	0x10624dd3

08004328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e267      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d075      	beq.n	8004432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00c      	beq.n	800436c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435a:	2b08      	cmp	r3, #8
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b82      	ldr	r3, [pc, #520]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b7e      	ldr	r3, [pc, #504]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05b      	beq.n	8004430 <HAL_RCC_OscConfig+0x108>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d157      	bne.n	8004430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e242      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x74>
 800438e:	4b76      	ldr	r3, [pc, #472]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a75      	ldr	r2, [pc, #468]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x98>
 80043a6:	4b70      	ldr	r3, [pc, #448]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 80043c0:	4b69      	ldr	r3, [pc, #420]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a68      	ldr	r2, [pc, #416]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b66      	ldr	r3, [pc, #408]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a65      	ldr	r2, [pc, #404]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7ff f946 	bl	8003670 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7ff f942 	bl	8003670 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	@ 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e207      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xc0>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7ff f932 	bl	8003670 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7ff f92e 	bl	8003670 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1f3      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b51      	ldr	r3, [pc, #324]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0xe8>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800443e:	4b4a      	ldr	r3, [pc, #296]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444a:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b44      	ldr	r3, [pc, #272]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c7      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b3b      	ldr	r3, [pc, #236]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4937      	ldr	r1, [pc, #220]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	e03a      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004498:	4b34      	ldr	r3, [pc, #208]	@ (800456c <HAL_RCC_OscConfig+0x244>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7ff f8e7 	bl	8003670 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7ff f8e3 	bl	8003670 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1a8      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b28      	ldr	r3, [pc, #160]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4925      	ldr	r1, [pc, #148]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	e015      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <HAL_RCC_OscConfig+0x244>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7ff f8c6 	bl	8003670 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7ff f8c2 	bl	8003670 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e187      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d036      	beq.n	8004580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <HAL_RCC_OscConfig+0x248>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7ff f8a6 	bl	8003670 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004528:	f7ff f8a2 	bl	8003670 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e167      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x200>
 8004546:	e01b      	b.n	8004580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_RCC_OscConfig+0x248>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7ff f88f 	bl	8003670 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	e00e      	b.n	8004574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004556:	f7ff f88b 	bl	8003670 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d907      	bls.n	8004574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e150      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004568:	40023800 	.word	0x40023800
 800456c:	42470000 	.word	0x42470000
 8004570:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b88      	ldr	r3, [pc, #544]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ea      	bne.n	8004556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8097 	beq.w	80046bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b81      	ldr	r3, [pc, #516]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b77      	ldr	r3, [pc, #476]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b74      	ldr	r3, [pc, #464]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a73      	ldr	r2, [pc, #460]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7ff f84b 	bl	8003670 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7ff f847 	bl	8003670 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e10c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b6a      	ldr	r3, [pc, #424]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x2ea>
 8004604:	4b64      	ldr	r3, [pc, #400]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	4a63      	ldr	r2, [pc, #396]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004610:	e01c      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b05      	cmp	r3, #5
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x30c>
 800461a:	4b5f      	ldr	r3, [pc, #380]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	4a5e      	ldr	r2, [pc, #376]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	@ 0x70
 8004626:	4b5c      	ldr	r3, [pc, #368]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	4a5b      	ldr	r2, [pc, #364]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	@ 0x70
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004634:	4b58      	ldr	r3, [pc, #352]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	4a57      	ldr	r2, [pc, #348]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004640:	4b55      	ldr	r3, [pc, #340]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a54      	ldr	r2, [pc, #336]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7ff f80c 	bl	8003670 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7ff f808 	bl	8003670 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0cb      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b49      	ldr	r3, [pc, #292]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCC_OscConfig+0x334>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fe fff6 	bl	8003670 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fe fff2 	bl	8003670 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0b5      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	4b3e      	ldr	r3, [pc, #248]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ee      	bne.n	8004688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	4a38      	ldr	r2, [pc, #224]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80a1 	beq.w	8004808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c6:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d05c      	beq.n	800478c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d141      	bne.n	800475e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b31      	ldr	r3, [pc, #196]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe ffc6 	bl	8003670 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe ffc2 	bl	8003670 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e087      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	3b01      	subs	r3, #1
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	491b      	ldr	r1, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fe ff9b 	bl	8003670 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473e:	f7fe ff97 	bl	8003670 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e05c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	4b11      	ldr	r3, [pc, #68]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x416>
 800475c:	e054      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fe ff84 	bl	8003670 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe ff80 	bl	8003670 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e045      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x444>
 800478a:	e03d      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e038      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x4ec>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d121      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d11a      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0cc      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b68      	ldr	r3, [pc, #416]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d90c      	bls.n	8004854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b65      	ldr	r3, [pc, #404]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b63      	ldr	r3, [pc, #396]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0b8      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800486c:	4b59      	ldr	r3, [pc, #356]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a58      	ldr	r2, [pc, #352]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004876:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004884:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a52      	ldr	r2, [pc, #328]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800488e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b50      	ldr	r3, [pc, #320]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494d      	ldr	r1, [pc, #308]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d044      	beq.n	8004938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d119      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e6:	4b3b      	ldr	r3, [pc, #236]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e067      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4934      	ldr	r1, [pc, #208]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004908:	f7fe feb2 	bl	8003670 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fe feae 	bl	8003670 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e04f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d20c      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e032      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4916      	ldr	r1, [pc, #88]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498a:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	490e      	ldr	r1, [pc, #56]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499e:	f000 f821 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a2:	4602      	mov	r2, r0
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	490a      	ldr	r1, [pc, #40]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	5ccb      	ldrb	r3, [r1, r3]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ba:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fe12 	bl	80035e8 <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0800abe4 	.word	0x0800abe4
 80049dc:	20000008 	.word	0x20000008
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b090      	sub	sp, #64	@ 0x40
 80049ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049fc:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x40>
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	f200 80a1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x34>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a16:	e09b      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a1c:	e09b      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1e:	4b53      	ldr	r3, [pc, #332]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a22:	e098      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b4f      	ldr	r3, [pc, #316]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	2200      	movs	r2, #0
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4b47      	ldr	r3, [pc, #284]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a50:	fb03 f201 	mul.w	r2, r3, r1
 8004a54:	2300      	movs	r3, #0
 8004a56:	fb00 f303 	mul.w	r3, r0, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4a43      	ldr	r2, [pc, #268]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a64:	460a      	mov	r2, r1
 8004a66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6a:	4413      	add	r3, r2
 8004a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a70:	2200      	movs	r2, #0
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a7e:	f7fc f903 	bl	8000c88 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4613      	mov	r3, r2
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8a:	e053      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8c:	4b35      	ldr	r3, [pc, #212]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	2200      	movs	r2, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	617a      	str	r2, [r7, #20]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a9e:	f04f 0b00 	mov.w	fp, #0
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	ebb2 080a 	subs.w	r8, r2, sl
 8004abe:	eb63 090b 	sbc.w	r9, r3, fp
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ace:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ad2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ad6:	ebb2 0408 	subs.w	r4, r2, r8
 8004ada:	eb63 0509 	sbc.w	r5, r3, r9
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	00eb      	lsls	r3, r5, #3
 8004ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aec:	00e2      	lsls	r2, r4, #3
 8004aee:	4614      	mov	r4, r2
 8004af0:	461d      	mov	r5, r3
 8004af2:	eb14 030a 	adds.w	r3, r4, sl
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	eb45 030b 	adc.w	r3, r5, fp
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	60fa      	str	r2, [r7, #12]
 8004b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b28:	f7fc f8ae 	bl	8000c88 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3740      	adds	r7, #64	@ 0x40
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	00b71b00 	.word	0x00b71b00

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000008 	.word	0x20000008

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	@ (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0800abf4 	.word	0x0800abf4

08004bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	f107 001c 	add.w	r0, r7, #28
 8004bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d123      	bne.n	8004c12 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f901 	bl	8004e0e <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e01b      	b.n	8004c4a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8f5 	bl	8004e0e <USB_CoreReset>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c3c:	e005      	b.n	8004c4a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c4a:	7fbb      	ldrb	r3, [r7, #30]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10b      	bne.n	8004c68 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f043 0206 	orr.w	r2, r3, #6
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr

08004c78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 0201 	bic.w	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d115      	bne.n	8004ce8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cc8:	200a      	movs	r0, #10
 8004cca:	f7fe fcdd 	bl	8003688 <HAL_Delay>
      ms += 10U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	330a      	adds	r3, #10
 8004cd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f88c 	bl	8004df2 <USB_GetMode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d01e      	beq.n	8004d1e <USB_SetCurrentMode+0x84>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ce4:	d9f0      	bls.n	8004cc8 <USB_SetCurrentMode+0x2e>
 8004ce6:	e01a      	b.n	8004d1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d115      	bne.n	8004d1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cfa:	200a      	movs	r0, #10
 8004cfc:	f7fe fcc4 	bl	8003688 <HAL_Delay>
      ms += 10U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	330a      	adds	r3, #10
 8004d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f873 	bl	8004df2 <USB_GetMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <USB_SetCurrentMode+0x84>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d16:	d9f0      	bls.n	8004cfa <USB_SetCurrentMode+0x60>
 8004d18:	e001      	b.n	8004d1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e005      	b.n	8004d2a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d22:	d101      	bne.n	8004d28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d4c:	d901      	bls.n	8004d52 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e01b      	b.n	8004d8a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	daf2      	bge.n	8004d40 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d76:	d901      	bls.n	8004d7c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e006      	b.n	8004d8a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d0f0      	beq.n	8004d6a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dae:	d901      	bls.n	8004db4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e018      	b.n	8004de6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	daf2      	bge.n	8004da2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dd2:	d901      	bls.n	8004dd8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e006      	b.n	8004de6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d0f0      	beq.n	8004dc6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e26:	d901      	bls.n	8004e2c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e01b      	b.n	8004e64 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	daf2      	bge.n	8004e1a <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f043 0201 	orr.w	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e50:	d901      	bls.n	8004e56 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e006      	b.n	8004e64 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d0f0      	beq.n	8004e44 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e70:	b084      	sub	sp, #16
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d119      	bne.n	8004efa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d10a      	bne.n	8004ee4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e014      	b.n	8004f0e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ef2:	f023 0304 	bic.w	r3, r3, #4
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e009      	b.n	8004f0e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f0e:	2110      	movs	r1, #16
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff0e 	bl	8004d32 <USB_FlushTxFifo>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff38 	bl	8004d96 <USB_FlushRxFifo>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e015      	b.n	8004f62 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f66:	461a      	mov	r2, r3
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d3e3      	bcc.n	8004f36 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <USB_HostInit+0x170>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10b      	bne.n	8004f9c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <USB_HostInit+0x174>)
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <USB_HostInit+0x178>)
 8004f96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004f9a:	e009      	b.n	8004fb0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	@ (8004fec <USB_HostInit+0x17c>)
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <USB_HostInit+0x180>)
 8004fac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f043 0210 	orr.w	r2, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <USB_HostInit+0x184>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fdc:	b004      	add	sp, #16
 8004fde:	4770      	bx	lr
 8004fe0:	40040000 	.word	0x40040000
 8004fe4:	01000200 	.word	0x01000200
 8004fe8:	00e00300 	.word	0x00e00300
 8004fec:	00600080 	.word	0x00600080
 8004ff0:	004000e0 	.word	0x004000e0
 8004ff4:	a3200008 	.word	0xa3200008

08004ff8 <atan2>:
 8004ff8:	f000 b97e 	b.w	80052f8 <__ieee754_atan2>

08004ffc <pow>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	ed2d 8b02 	vpush	{d8}
 8005002:	eeb0 8a40 	vmov.f32	s16, s0
 8005006:	eef0 8a60 	vmov.f32	s17, s1
 800500a:	ec55 4b11 	vmov	r4, r5, d1
 800500e:	f000 fa3b 	bl	8005488 <__ieee754_pow>
 8005012:	4622      	mov	r2, r4
 8005014:	462b      	mov	r3, r5
 8005016:	4620      	mov	r0, r4
 8005018:	4629      	mov	r1, r5
 800501a:	ec57 6b10 	vmov	r6, r7, d0
 800501e:	f7fb fd85 	bl	8000b2c <__aeabi_dcmpun>
 8005022:	2800      	cmp	r0, #0
 8005024:	d13b      	bne.n	800509e <pow+0xa2>
 8005026:	ec51 0b18 	vmov	r0, r1, d8
 800502a:	2200      	movs	r2, #0
 800502c:	2300      	movs	r3, #0
 800502e:	f7fb fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005032:	b1b8      	cbz	r0, 8005064 <pow+0x68>
 8005034:	2200      	movs	r2, #0
 8005036:	2300      	movs	r3, #0
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005040:	2800      	cmp	r0, #0
 8005042:	d146      	bne.n	80050d2 <pow+0xd6>
 8005044:	ec45 4b10 	vmov	d0, r4, r5
 8005048:	f000 f874 	bl	8005134 <finite>
 800504c:	b338      	cbz	r0, 800509e <pow+0xa2>
 800504e:	2200      	movs	r2, #0
 8005050:	2300      	movs	r3, #0
 8005052:	4620      	mov	r0, r4
 8005054:	4629      	mov	r1, r5
 8005056:	f7fb fd41 	bl	8000adc <__aeabi_dcmplt>
 800505a:	b300      	cbz	r0, 800509e <pow+0xa2>
 800505c:	f002 fa9a 	bl	8007594 <__errno>
 8005060:	2322      	movs	r3, #34	@ 0x22
 8005062:	e01b      	b.n	800509c <pow+0xa0>
 8005064:	ec47 6b10 	vmov	d0, r6, r7
 8005068:	f000 f864 	bl	8005134 <finite>
 800506c:	b9e0      	cbnz	r0, 80050a8 <pow+0xac>
 800506e:	eeb0 0a48 	vmov.f32	s0, s16
 8005072:	eef0 0a68 	vmov.f32	s1, s17
 8005076:	f000 f85d 	bl	8005134 <finite>
 800507a:	b1a8      	cbz	r0, 80050a8 <pow+0xac>
 800507c:	ec45 4b10 	vmov	d0, r4, r5
 8005080:	f000 f858 	bl	8005134 <finite>
 8005084:	b180      	cbz	r0, 80050a8 <pow+0xac>
 8005086:	4632      	mov	r2, r6
 8005088:	463b      	mov	r3, r7
 800508a:	4630      	mov	r0, r6
 800508c:	4639      	mov	r1, r7
 800508e:	f7fb fd4d 	bl	8000b2c <__aeabi_dcmpun>
 8005092:	2800      	cmp	r0, #0
 8005094:	d0e2      	beq.n	800505c <pow+0x60>
 8005096:	f002 fa7d 	bl	8007594 <__errno>
 800509a:	2321      	movs	r3, #33	@ 0x21
 800509c:	6003      	str	r3, [r0, #0]
 800509e:	ecbd 8b02 	vpop	{d8}
 80050a2:	ec47 6b10 	vmov	d0, r6, r7
 80050a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a8:	2200      	movs	r2, #0
 80050aa:	2300      	movs	r3, #0
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d0f2      	beq.n	800509e <pow+0xa2>
 80050b8:	eeb0 0a48 	vmov.f32	s0, s16
 80050bc:	eef0 0a68 	vmov.f32	s1, s17
 80050c0:	f000 f838 	bl	8005134 <finite>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d0ea      	beq.n	800509e <pow+0xa2>
 80050c8:	ec45 4b10 	vmov	d0, r4, r5
 80050cc:	f000 f832 	bl	8005134 <finite>
 80050d0:	e7c3      	b.n	800505a <pow+0x5e>
 80050d2:	4f01      	ldr	r7, [pc, #4]	@ (80050d8 <pow+0xdc>)
 80050d4:	2600      	movs	r6, #0
 80050d6:	e7e2      	b.n	800509e <pow+0xa2>
 80050d8:	3ff00000 	.word	0x3ff00000

080050dc <sqrt>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	ed2d 8b02 	vpush	{d8}
 80050e2:	ec55 4b10 	vmov	r4, r5, d0
 80050e6:	f000 f831 	bl	800514c <__ieee754_sqrt>
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	eeb0 8a40 	vmov.f32	s16, s0
 80050f6:	eef0 8a60 	vmov.f32	s17, s1
 80050fa:	f7fb fd17 	bl	8000b2c <__aeabi_dcmpun>
 80050fe:	b990      	cbnz	r0, 8005126 <sqrt+0x4a>
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb fce8 	bl	8000adc <__aeabi_dcmplt>
 800510c:	b158      	cbz	r0, 8005126 <sqrt+0x4a>
 800510e:	f002 fa41 	bl	8007594 <__errno>
 8005112:	2321      	movs	r3, #33	@ 0x21
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f7fb fb95 	bl	800084c <__aeabi_ddiv>
 8005122:	ec41 0b18 	vmov	d8, r0, r1
 8005126:	eeb0 0a48 	vmov.f32	s0, s16
 800512a:	eef0 0a68 	vmov.f32	s1, s17
 800512e:	ecbd 8b02 	vpop	{d8}
 8005132:	bd38      	pop	{r3, r4, r5, pc}

08005134 <finite>:
 8005134:	b082      	sub	sp, #8
 8005136:	ed8d 0b00 	vstr	d0, [sp]
 800513a:	9801      	ldr	r0, [sp, #4]
 800513c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005140:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005144:	0fc0      	lsrs	r0, r0, #31
 8005146:	b002      	add	sp, #8
 8005148:	4770      	bx	lr
	...

0800514c <__ieee754_sqrt>:
 800514c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	4a66      	ldr	r2, [pc, #408]	@ (80052ec <__ieee754_sqrt+0x1a0>)
 8005152:	ec55 4b10 	vmov	r4, r5, d0
 8005156:	43aa      	bics	r2, r5
 8005158:	462b      	mov	r3, r5
 800515a:	4621      	mov	r1, r4
 800515c:	d110      	bne.n	8005180 <__ieee754_sqrt+0x34>
 800515e:	4622      	mov	r2, r4
 8005160:	4620      	mov	r0, r4
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb fa48 	bl	80005f8 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb f88c 	bl	800028c <__adddf3>
 8005174:	4604      	mov	r4, r0
 8005176:	460d      	mov	r5, r1
 8005178:	ec45 4b10 	vmov	d0, r4, r5
 800517c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	2d00      	cmp	r5, #0
 8005182:	dc0e      	bgt.n	80051a2 <__ieee754_sqrt+0x56>
 8005184:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005188:	4322      	orrs	r2, r4
 800518a:	d0f5      	beq.n	8005178 <__ieee754_sqrt+0x2c>
 800518c:	b19d      	cbz	r5, 80051b6 <__ieee754_sqrt+0x6a>
 800518e:	4622      	mov	r2, r4
 8005190:	4620      	mov	r0, r4
 8005192:	4629      	mov	r1, r5
 8005194:	f7fb f878 	bl	8000288 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f7fb fb56 	bl	800084c <__aeabi_ddiv>
 80051a0:	e7e8      	b.n	8005174 <__ieee754_sqrt+0x28>
 80051a2:	152a      	asrs	r2, r5, #20
 80051a4:	d115      	bne.n	80051d2 <__ieee754_sqrt+0x86>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e009      	b.n	80051be <__ieee754_sqrt+0x72>
 80051aa:	0acb      	lsrs	r3, r1, #11
 80051ac:	3a15      	subs	r2, #21
 80051ae:	0549      	lsls	r1, r1, #21
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0fa      	beq.n	80051aa <__ieee754_sqrt+0x5e>
 80051b4:	e7f7      	b.n	80051a6 <__ieee754_sqrt+0x5a>
 80051b6:	462a      	mov	r2, r5
 80051b8:	e7fa      	b.n	80051b0 <__ieee754_sqrt+0x64>
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	3001      	adds	r0, #1
 80051be:	02dc      	lsls	r4, r3, #11
 80051c0:	d5fb      	bpl.n	80051ba <__ieee754_sqrt+0x6e>
 80051c2:	1e44      	subs	r4, r0, #1
 80051c4:	1b12      	subs	r2, r2, r4
 80051c6:	f1c0 0420 	rsb	r4, r0, #32
 80051ca:	fa21 f404 	lsr.w	r4, r1, r4
 80051ce:	4323      	orrs	r3, r4
 80051d0:	4081      	lsls	r1, r0
 80051d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051d6:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80051da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051de:	07d2      	lsls	r2, r2, #31
 80051e0:	bf5c      	itt	pl
 80051e2:	005b      	lslpl	r3, r3, #1
 80051e4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80051e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051ec:	bf58      	it	pl
 80051ee:	0049      	lslpl	r1, r1, #1
 80051f0:	2600      	movs	r6, #0
 80051f2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80051f6:	107f      	asrs	r7, r7, #1
 80051f8:	0049      	lsls	r1, r1, #1
 80051fa:	2016      	movs	r0, #22
 80051fc:	4632      	mov	r2, r6
 80051fe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005202:	1915      	adds	r5, r2, r4
 8005204:	429d      	cmp	r5, r3
 8005206:	bfde      	ittt	le
 8005208:	192a      	addle	r2, r5, r4
 800520a:	1b5b      	suble	r3, r3, r5
 800520c:	1936      	addle	r6, r6, r4
 800520e:	0fcd      	lsrs	r5, r1, #31
 8005210:	3801      	subs	r0, #1
 8005212:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005216:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800521a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800521e:	d1f0      	bne.n	8005202 <__ieee754_sqrt+0xb6>
 8005220:	4605      	mov	r5, r0
 8005222:	2420      	movs	r4, #32
 8005224:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005228:	4293      	cmp	r3, r2
 800522a:	eb0c 0e00 	add.w	lr, ip, r0
 800522e:	dc02      	bgt.n	8005236 <__ieee754_sqrt+0xea>
 8005230:	d113      	bne.n	800525a <__ieee754_sqrt+0x10e>
 8005232:	458e      	cmp	lr, r1
 8005234:	d811      	bhi.n	800525a <__ieee754_sqrt+0x10e>
 8005236:	f1be 0f00 	cmp.w	lr, #0
 800523a:	eb0e 000c 	add.w	r0, lr, ip
 800523e:	da3f      	bge.n	80052c0 <__ieee754_sqrt+0x174>
 8005240:	2800      	cmp	r0, #0
 8005242:	db3d      	blt.n	80052c0 <__ieee754_sqrt+0x174>
 8005244:	f102 0801 	add.w	r8, r2, #1
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	458e      	cmp	lr, r1
 800524c:	bf88      	it	hi
 800524e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005252:	eba1 010e 	sub.w	r1, r1, lr
 8005256:	4465      	add	r5, ip
 8005258:	4642      	mov	r2, r8
 800525a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800525e:	3c01      	subs	r4, #1
 8005260:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005264:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005268:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800526c:	d1dc      	bne.n	8005228 <__ieee754_sqrt+0xdc>
 800526e:	4319      	orrs	r1, r3
 8005270:	d01b      	beq.n	80052aa <__ieee754_sqrt+0x15e>
 8005272:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80052f0 <__ieee754_sqrt+0x1a4>
 8005276:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80052f4 <__ieee754_sqrt+0x1a8>
 800527a:	e9da 0100 	ldrd	r0, r1, [sl]
 800527e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005282:	f7fb f801 	bl	8000288 <__aeabi_dsub>
 8005286:	e9da 8900 	ldrd	r8, r9, [sl]
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb fc2d 	bl	8000af0 <__aeabi_dcmple>
 8005296:	b140      	cbz	r0, 80052aa <__ieee754_sqrt+0x15e>
 8005298:	f1b5 3fff 	cmp.w	r5, #4294967295
 800529c:	e9da 0100 	ldrd	r0, r1, [sl]
 80052a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80052a4:	d10e      	bne.n	80052c4 <__ieee754_sqrt+0x178>
 80052a6:	3601      	adds	r6, #1
 80052a8:	4625      	mov	r5, r4
 80052aa:	1073      	asrs	r3, r6, #1
 80052ac:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80052b0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80052b4:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80052b8:	086b      	lsrs	r3, r5, #1
 80052ba:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80052be:	e759      	b.n	8005174 <__ieee754_sqrt+0x28>
 80052c0:	4690      	mov	r8, r2
 80052c2:	e7c1      	b.n	8005248 <__ieee754_sqrt+0xfc>
 80052c4:	f7fa ffe2 	bl	800028c <__adddf3>
 80052c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fb fc02 	bl	8000adc <__aeabi_dcmplt>
 80052d8:	b120      	cbz	r0, 80052e4 <__ieee754_sqrt+0x198>
 80052da:	1cab      	adds	r3, r5, #2
 80052dc:	bf08      	it	eq
 80052de:	3601      	addeq	r6, #1
 80052e0:	3502      	adds	r5, #2
 80052e2:	e7e2      	b.n	80052aa <__ieee754_sqrt+0x15e>
 80052e4:	1c6b      	adds	r3, r5, #1
 80052e6:	f023 0501 	bic.w	r5, r3, #1
 80052ea:	e7de      	b.n	80052aa <__ieee754_sqrt+0x15e>
 80052ec:	7ff00000 	.word	0x7ff00000
 80052f0:	0800ac08 	.word	0x0800ac08
 80052f4:	0800ac00 	.word	0x0800ac00

080052f8 <__ieee754_atan2>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	ec57 6b11 	vmov	r6, r7, d1
 8005300:	4273      	negs	r3, r6
 8005302:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005480 <__ieee754_atan2+0x188>
 8005306:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800530a:	4333      	orrs	r3, r6
 800530c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005310:	4543      	cmp	r3, r8
 8005312:	ec51 0b10 	vmov	r0, r1, d0
 8005316:	4635      	mov	r5, r6
 8005318:	d809      	bhi.n	800532e <__ieee754_atan2+0x36>
 800531a:	4244      	negs	r4, r0
 800531c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005320:	4304      	orrs	r4, r0
 8005322:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005326:	4544      	cmp	r4, r8
 8005328:	468e      	mov	lr, r1
 800532a:	4681      	mov	r9, r0
 800532c:	d907      	bls.n	800533e <__ieee754_atan2+0x46>
 800532e:	4632      	mov	r2, r6
 8005330:	463b      	mov	r3, r7
 8005332:	f7fa ffab 	bl	800028c <__adddf3>
 8005336:	ec41 0b10 	vmov	d0, r0, r1
 800533a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005342:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005346:	4334      	orrs	r4, r6
 8005348:	d103      	bne.n	8005352 <__ieee754_atan2+0x5a>
 800534a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800534e:	f000 bde7 	b.w	8005f20 <atan>
 8005352:	17bc      	asrs	r4, r7, #30
 8005354:	f004 0402 	and.w	r4, r4, #2
 8005358:	ea53 0909 	orrs.w	r9, r3, r9
 800535c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005360:	d107      	bne.n	8005372 <__ieee754_atan2+0x7a>
 8005362:	2c02      	cmp	r4, #2
 8005364:	d05f      	beq.n	8005426 <__ieee754_atan2+0x12e>
 8005366:	2c03      	cmp	r4, #3
 8005368:	d1e5      	bne.n	8005336 <__ieee754_atan2+0x3e>
 800536a:	a143      	add	r1, pc, #268	@ (adr r1, 8005478 <__ieee754_atan2+0x180>)
 800536c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005370:	e7e1      	b.n	8005336 <__ieee754_atan2+0x3e>
 8005372:	4315      	orrs	r5, r2
 8005374:	d106      	bne.n	8005384 <__ieee754_atan2+0x8c>
 8005376:	f1be 0f00 	cmp.w	lr, #0
 800537a:	db5f      	blt.n	800543c <__ieee754_atan2+0x144>
 800537c:	a136      	add	r1, pc, #216	@ (adr r1, 8005458 <__ieee754_atan2+0x160>)
 800537e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005382:	e7d8      	b.n	8005336 <__ieee754_atan2+0x3e>
 8005384:	4542      	cmp	r2, r8
 8005386:	d10f      	bne.n	80053a8 <__ieee754_atan2+0xb0>
 8005388:	4293      	cmp	r3, r2
 800538a:	f104 34ff 	add.w	r4, r4, #4294967295
 800538e:	d107      	bne.n	80053a0 <__ieee754_atan2+0xa8>
 8005390:	2c02      	cmp	r4, #2
 8005392:	d84c      	bhi.n	800542e <__ieee754_atan2+0x136>
 8005394:	4b36      	ldr	r3, [pc, #216]	@ (8005470 <__ieee754_atan2+0x178>)
 8005396:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800539a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800539e:	e7ca      	b.n	8005336 <__ieee754_atan2+0x3e>
 80053a0:	2c02      	cmp	r4, #2
 80053a2:	d848      	bhi.n	8005436 <__ieee754_atan2+0x13e>
 80053a4:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <__ieee754_atan2+0x17c>)
 80053a6:	e7f6      	b.n	8005396 <__ieee754_atan2+0x9e>
 80053a8:	4543      	cmp	r3, r8
 80053aa:	d0e4      	beq.n	8005376 <__ieee754_atan2+0x7e>
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80053b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80053b6:	da1e      	bge.n	80053f6 <__ieee754_atan2+0xfe>
 80053b8:	2f00      	cmp	r7, #0
 80053ba:	da01      	bge.n	80053c0 <__ieee754_atan2+0xc8>
 80053bc:	323c      	adds	r2, #60	@ 0x3c
 80053be:	db1e      	blt.n	80053fe <__ieee754_atan2+0x106>
 80053c0:	4632      	mov	r2, r6
 80053c2:	463b      	mov	r3, r7
 80053c4:	f7fb fa42 	bl	800084c <__aeabi_ddiv>
 80053c8:	ec41 0b10 	vmov	d0, r0, r1
 80053cc:	f000 ff40 	bl	8006250 <fabs>
 80053d0:	f000 fda6 	bl	8005f20 <atan>
 80053d4:	ec51 0b10 	vmov	r0, r1, d0
 80053d8:	2c01      	cmp	r4, #1
 80053da:	d013      	beq.n	8005404 <__ieee754_atan2+0x10c>
 80053dc:	2c02      	cmp	r4, #2
 80053de:	d015      	beq.n	800540c <__ieee754_atan2+0x114>
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	d0a8      	beq.n	8005336 <__ieee754_atan2+0x3e>
 80053e4:	a318      	add	r3, pc, #96	@ (adr r3, 8005448 <__ieee754_atan2+0x150>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f7fa ff4d 	bl	8000288 <__aeabi_dsub>
 80053ee:	a318      	add	r3, pc, #96	@ (adr r3, 8005450 <__ieee754_atan2+0x158>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	e014      	b.n	8005420 <__ieee754_atan2+0x128>
 80053f6:	a118      	add	r1, pc, #96	@ (adr r1, 8005458 <__ieee754_atan2+0x160>)
 80053f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053fc:	e7ec      	b.n	80053d8 <__ieee754_atan2+0xe0>
 80053fe:	2000      	movs	r0, #0
 8005400:	2100      	movs	r1, #0
 8005402:	e7e9      	b.n	80053d8 <__ieee754_atan2+0xe0>
 8005404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005408:	4619      	mov	r1, r3
 800540a:	e794      	b.n	8005336 <__ieee754_atan2+0x3e>
 800540c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005448 <__ieee754_atan2+0x150>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fa ff39 	bl	8000288 <__aeabi_dsub>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	a10d      	add	r1, pc, #52	@ (adr r1, 8005450 <__ieee754_atan2+0x158>)
 800541c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005420:	f7fa ff32 	bl	8000288 <__aeabi_dsub>
 8005424:	e787      	b.n	8005336 <__ieee754_atan2+0x3e>
 8005426:	a10a      	add	r1, pc, #40	@ (adr r1, 8005450 <__ieee754_atan2+0x158>)
 8005428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800542c:	e783      	b.n	8005336 <__ieee754_atan2+0x3e>
 800542e:	a10c      	add	r1, pc, #48	@ (adr r1, 8005460 <__ieee754_atan2+0x168>)
 8005430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005434:	e77f      	b.n	8005336 <__ieee754_atan2+0x3e>
 8005436:	2000      	movs	r0, #0
 8005438:	2100      	movs	r1, #0
 800543a:	e77c      	b.n	8005336 <__ieee754_atan2+0x3e>
 800543c:	a10a      	add	r1, pc, #40	@ (adr r1, 8005468 <__ieee754_atan2+0x170>)
 800543e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005442:	e778      	b.n	8005336 <__ieee754_atan2+0x3e>
 8005444:	f3af 8000 	nop.w
 8005448:	33145c07 	.word	0x33145c07
 800544c:	3ca1a626 	.word	0x3ca1a626
 8005450:	54442d18 	.word	0x54442d18
 8005454:	400921fb 	.word	0x400921fb
 8005458:	54442d18 	.word	0x54442d18
 800545c:	3ff921fb 	.word	0x3ff921fb
 8005460:	54442d18 	.word	0x54442d18
 8005464:	3fe921fb 	.word	0x3fe921fb
 8005468:	54442d18 	.word	0x54442d18
 800546c:	bff921fb 	.word	0xbff921fb
 8005470:	0800ac28 	.word	0x0800ac28
 8005474:	0800ac10 	.word	0x0800ac10
 8005478:	54442d18 	.word	0x54442d18
 800547c:	c00921fb 	.word	0xc00921fb
 8005480:	7ff00000 	.word	0x7ff00000
 8005484:	00000000 	.word	0x00000000

08005488 <__ieee754_pow>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	b091      	sub	sp, #68	@ 0x44
 800548e:	ed8d 1b00 	vstr	d1, [sp]
 8005492:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005496:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800549a:	ea5a 0001 	orrs.w	r0, sl, r1
 800549e:	ec57 6b10 	vmov	r6, r7, d0
 80054a2:	d113      	bne.n	80054cc <__ieee754_pow+0x44>
 80054a4:	19b3      	adds	r3, r6, r6
 80054a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80054aa:	4152      	adcs	r2, r2
 80054ac:	4298      	cmp	r0, r3
 80054ae:	4b9a      	ldr	r3, [pc, #616]	@ (8005718 <__ieee754_pow+0x290>)
 80054b0:	4193      	sbcs	r3, r2
 80054b2:	f080 84ee 	bcs.w	8005e92 <__ieee754_pow+0xa0a>
 80054b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	f7fa fee5 	bl	800028c <__adddf3>
 80054c2:	ec41 0b10 	vmov	d0, r0, r1
 80054c6:	b011      	add	sp, #68	@ 0x44
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4a93      	ldr	r2, [pc, #588]	@ (800571c <__ieee754_pow+0x294>)
 80054ce:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80054d2:	4295      	cmp	r5, r2
 80054d4:	46b8      	mov	r8, r7
 80054d6:	4633      	mov	r3, r6
 80054d8:	d80a      	bhi.n	80054f0 <__ieee754_pow+0x68>
 80054da:	d104      	bne.n	80054e6 <__ieee754_pow+0x5e>
 80054dc:	2e00      	cmp	r6, #0
 80054de:	d1ea      	bne.n	80054b6 <__ieee754_pow+0x2e>
 80054e0:	45aa      	cmp	sl, r5
 80054e2:	d8e8      	bhi.n	80054b6 <__ieee754_pow+0x2e>
 80054e4:	e001      	b.n	80054ea <__ieee754_pow+0x62>
 80054e6:	4592      	cmp	sl, r2
 80054e8:	d802      	bhi.n	80054f0 <__ieee754_pow+0x68>
 80054ea:	4592      	cmp	sl, r2
 80054ec:	d10f      	bne.n	800550e <__ieee754_pow+0x86>
 80054ee:	b171      	cbz	r1, 800550e <__ieee754_pow+0x86>
 80054f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80054f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80054f8:	ea58 0803 	orrs.w	r8, r8, r3
 80054fc:	d1db      	bne.n	80054b6 <__ieee754_pow+0x2e>
 80054fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005502:	18db      	adds	r3, r3, r3
 8005504:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005508:	4152      	adcs	r2, r2
 800550a:	4598      	cmp	r8, r3
 800550c:	e7cf      	b.n	80054ae <__ieee754_pow+0x26>
 800550e:	f1b8 0f00 	cmp.w	r8, #0
 8005512:	46ab      	mov	fp, r5
 8005514:	da43      	bge.n	800559e <__ieee754_pow+0x116>
 8005516:	4a82      	ldr	r2, [pc, #520]	@ (8005720 <__ieee754_pow+0x298>)
 8005518:	4592      	cmp	sl, r2
 800551a:	d856      	bhi.n	80055ca <__ieee754_pow+0x142>
 800551c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005520:	4592      	cmp	sl, r2
 8005522:	f240 84c5 	bls.w	8005eb0 <__ieee754_pow+0xa28>
 8005526:	ea4f 522a 	mov.w	r2, sl, asr #20
 800552a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800552e:	2a14      	cmp	r2, #20
 8005530:	dd18      	ble.n	8005564 <__ieee754_pow+0xdc>
 8005532:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005536:	fa21 f402 	lsr.w	r4, r1, r2
 800553a:	fa04 f202 	lsl.w	r2, r4, r2
 800553e:	428a      	cmp	r2, r1
 8005540:	f040 84b6 	bne.w	8005eb0 <__ieee754_pow+0xa28>
 8005544:	f004 0401 	and.w	r4, r4, #1
 8005548:	f1c4 0402 	rsb	r4, r4, #2
 800554c:	2900      	cmp	r1, #0
 800554e:	d159      	bne.n	8005604 <__ieee754_pow+0x17c>
 8005550:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005554:	d148      	bne.n	80055e8 <__ieee754_pow+0x160>
 8005556:	4632      	mov	r2, r6
 8005558:	463b      	mov	r3, r7
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	e7ae      	b.n	80054c2 <__ieee754_pow+0x3a>
 8005564:	2900      	cmp	r1, #0
 8005566:	d14c      	bne.n	8005602 <__ieee754_pow+0x17a>
 8005568:	f1c2 0214 	rsb	r2, r2, #20
 800556c:	fa4a f402 	asr.w	r4, sl, r2
 8005570:	fa04 f202 	lsl.w	r2, r4, r2
 8005574:	4552      	cmp	r2, sl
 8005576:	f040 8498 	bne.w	8005eaa <__ieee754_pow+0xa22>
 800557a:	f004 0401 	and.w	r4, r4, #1
 800557e:	f1c4 0402 	rsb	r4, r4, #2
 8005582:	4a68      	ldr	r2, [pc, #416]	@ (8005724 <__ieee754_pow+0x29c>)
 8005584:	4592      	cmp	sl, r2
 8005586:	d1e3      	bne.n	8005550 <__ieee754_pow+0xc8>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	f280 8489 	bge.w	8005ea2 <__ieee754_pow+0xa1a>
 8005590:	4964      	ldr	r1, [pc, #400]	@ (8005724 <__ieee754_pow+0x29c>)
 8005592:	4632      	mov	r2, r6
 8005594:	463b      	mov	r3, r7
 8005596:	2000      	movs	r0, #0
 8005598:	f7fb f958 	bl	800084c <__aeabi_ddiv>
 800559c:	e791      	b.n	80054c2 <__ieee754_pow+0x3a>
 800559e:	2400      	movs	r4, #0
 80055a0:	bb81      	cbnz	r1, 8005604 <__ieee754_pow+0x17c>
 80055a2:	4a5e      	ldr	r2, [pc, #376]	@ (800571c <__ieee754_pow+0x294>)
 80055a4:	4592      	cmp	sl, r2
 80055a6:	d1ec      	bne.n	8005582 <__ieee754_pow+0xfa>
 80055a8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80055ac:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80055b0:	431a      	orrs	r2, r3
 80055b2:	f000 846e 	beq.w	8005e92 <__ieee754_pow+0xa0a>
 80055b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005728 <__ieee754_pow+0x2a0>)
 80055b8:	429d      	cmp	r5, r3
 80055ba:	d908      	bls.n	80055ce <__ieee754_pow+0x146>
 80055bc:	f1b9 0f00 	cmp.w	r9, #0
 80055c0:	f280 846b 	bge.w	8005e9a <__ieee754_pow+0xa12>
 80055c4:	2000      	movs	r0, #0
 80055c6:	2100      	movs	r1, #0
 80055c8:	e77b      	b.n	80054c2 <__ieee754_pow+0x3a>
 80055ca:	2402      	movs	r4, #2
 80055cc:	e7e8      	b.n	80055a0 <__ieee754_pow+0x118>
 80055ce:	f1b9 0f00 	cmp.w	r9, #0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f04f 0100 	mov.w	r1, #0
 80055da:	f6bf af72 	bge.w	80054c2 <__ieee754_pow+0x3a>
 80055de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80055e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80055e6:	e76c      	b.n	80054c2 <__ieee754_pow+0x3a>
 80055e8:	4a50      	ldr	r2, [pc, #320]	@ (800572c <__ieee754_pow+0x2a4>)
 80055ea:	4591      	cmp	r9, r2
 80055ec:	d10a      	bne.n	8005604 <__ieee754_pow+0x17c>
 80055ee:	f1b8 0f00 	cmp.w	r8, #0
 80055f2:	db07      	blt.n	8005604 <__ieee754_pow+0x17c>
 80055f4:	ec47 6b10 	vmov	d0, r6, r7
 80055f8:	b011      	add	sp, #68	@ 0x44
 80055fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fe:	f7ff bda5 	b.w	800514c <__ieee754_sqrt>
 8005602:	2400      	movs	r4, #0
 8005604:	ec47 6b10 	vmov	d0, r6, r7
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	f000 fe21 	bl	8006250 <fabs>
 800560e:	9b02      	ldr	r3, [sp, #8]
 8005610:	ec51 0b10 	vmov	r0, r1, d0
 8005614:	bb43      	cbnz	r3, 8005668 <__ieee754_pow+0x1e0>
 8005616:	4b43      	ldr	r3, [pc, #268]	@ (8005724 <__ieee754_pow+0x29c>)
 8005618:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800561c:	429a      	cmp	r2, r3
 800561e:	d000      	beq.n	8005622 <__ieee754_pow+0x19a>
 8005620:	bb15      	cbnz	r5, 8005668 <__ieee754_pow+0x1e0>
 8005622:	f1b9 0f00 	cmp.w	r9, #0
 8005626:	da05      	bge.n	8005634 <__ieee754_pow+0x1ac>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	2000      	movs	r0, #0
 800562e:	493d      	ldr	r1, [pc, #244]	@ (8005724 <__ieee754_pow+0x29c>)
 8005630:	f7fb f90c 	bl	800084c <__aeabi_ddiv>
 8005634:	f1b8 0f00 	cmp.w	r8, #0
 8005638:	f6bf af43 	bge.w	80054c2 <__ieee754_pow+0x3a>
 800563c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005640:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005644:	4325      	orrs	r5, r4
 8005646:	d108      	bne.n	800565a <__ieee754_pow+0x1d2>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	f7fa fe1a 	bl	8000288 <__aeabi_dsub>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	e79e      	b.n	8005598 <__ieee754_pow+0x110>
 800565a:	2c01      	cmp	r4, #1
 800565c:	f47f af31 	bne.w	80054c2 <__ieee754_pow+0x3a>
 8005660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005664:	4619      	mov	r1, r3
 8005666:	e72c      	b.n	80054c2 <__ieee754_pow+0x3a>
 8005668:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800566c:	3b01      	subs	r3, #1
 800566e:	ea53 0204 	orrs.w	r2, r3, r4
 8005672:	d102      	bne.n	800567a <__ieee754_pow+0x1f2>
 8005674:	4632      	mov	r2, r6
 8005676:	463b      	mov	r3, r7
 8005678:	e7e8      	b.n	800564c <__ieee754_pow+0x1c4>
 800567a:	3c01      	subs	r4, #1
 800567c:	431c      	orrs	r4, r3
 800567e:	d016      	beq.n	80056ae <__ieee754_pow+0x226>
 8005680:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005708 <__ieee754_pow+0x280>
 8005684:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800568c:	f240 8110 	bls.w	80058b0 <__ieee754_pow+0x428>
 8005690:	4b27      	ldr	r3, [pc, #156]	@ (8005730 <__ieee754_pow+0x2a8>)
 8005692:	459a      	cmp	sl, r3
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <__ieee754_pow+0x2a0>)
 8005696:	d916      	bls.n	80056c6 <__ieee754_pow+0x23e>
 8005698:	429d      	cmp	r5, r3
 800569a:	d80b      	bhi.n	80056b4 <__ieee754_pow+0x22c>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	da0b      	bge.n	80056ba <__ieee754_pow+0x232>
 80056a2:	2000      	movs	r0, #0
 80056a4:	b011      	add	sp, #68	@ 0x44
 80056a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f000 be89 	b.w	80063c0 <__math_oflow>
 80056ae:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8005710 <__ieee754_pow+0x288>
 80056b2:	e7e7      	b.n	8005684 <__ieee754_pow+0x1fc>
 80056b4:	f1b9 0f00 	cmp.w	r9, #0
 80056b8:	dcf3      	bgt.n	80056a2 <__ieee754_pow+0x21a>
 80056ba:	2000      	movs	r0, #0
 80056bc:	b011      	add	sp, #68	@ 0x44
 80056be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c2:	f000 be75 	b.w	80063b0 <__math_uflow>
 80056c6:	429d      	cmp	r5, r3
 80056c8:	d20c      	bcs.n	80056e4 <__ieee754_pow+0x25c>
 80056ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	f7fb fa03 	bl	8000adc <__aeabi_dcmplt>
 80056d6:	3800      	subs	r0, #0
 80056d8:	bf18      	it	ne
 80056da:	2001      	movne	r0, #1
 80056dc:	f1b9 0f00 	cmp.w	r9, #0
 80056e0:	daec      	bge.n	80056bc <__ieee754_pow+0x234>
 80056e2:	e7df      	b.n	80056a4 <__ieee754_pow+0x21c>
 80056e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <__ieee754_pow+0x29c>)
 80056e6:	429d      	cmp	r5, r3
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	d922      	bls.n	8005734 <__ieee754_pow+0x2ac>
 80056ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f2:	2300      	movs	r3, #0
 80056f4:	f7fb f9f2 	bl	8000adc <__aeabi_dcmplt>
 80056f8:	3800      	subs	r0, #0
 80056fa:	bf18      	it	ne
 80056fc:	2001      	movne	r0, #1
 80056fe:	f1b9 0f00 	cmp.w	r9, #0
 8005702:	dccf      	bgt.n	80056a4 <__ieee754_pow+0x21c>
 8005704:	e7da      	b.n	80056bc <__ieee754_pow+0x234>
 8005706:	bf00      	nop
 8005708:	00000000 	.word	0x00000000
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	00000000 	.word	0x00000000
 8005714:	bff00000 	.word	0xbff00000
 8005718:	fff00000 	.word	0xfff00000
 800571c:	7ff00000 	.word	0x7ff00000
 8005720:	433fffff 	.word	0x433fffff
 8005724:	3ff00000 	.word	0x3ff00000
 8005728:	3fefffff 	.word	0x3fefffff
 800572c:	3fe00000 	.word	0x3fe00000
 8005730:	43f00000 	.word	0x43f00000
 8005734:	4b5a      	ldr	r3, [pc, #360]	@ (80058a0 <__ieee754_pow+0x418>)
 8005736:	f7fa fda7 	bl	8000288 <__aeabi_dsub>
 800573a:	a351      	add	r3, pc, #324	@ (adr r3, 8005880 <__ieee754_pow+0x3f8>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	f7fa ff58 	bl	80005f8 <__aeabi_dmul>
 8005748:	a34f      	add	r3, pc, #316	@ (adr r3, 8005888 <__ieee754_pow+0x400>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fa ff4f 	bl	80005f8 <__aeabi_dmul>
 800575a:	4b52      	ldr	r3, [pc, #328]	@ (80058a4 <__ieee754_pow+0x41c>)
 800575c:	4682      	mov	sl, r0
 800575e:	468b      	mov	fp, r1
 8005760:	2200      	movs	r2, #0
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fa ff47 	bl	80005f8 <__aeabi_dmul>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	a148      	add	r1, pc, #288	@ (adr r1, 8005890 <__ieee754_pow+0x408>)
 8005770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005774:	f7fa fd88 	bl	8000288 <__aeabi_dsub>
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	f7fa ff3c 	bl	80005f8 <__aeabi_dmul>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	2000      	movs	r0, #0
 8005786:	4948      	ldr	r1, [pc, #288]	@ (80058a8 <__ieee754_pow+0x420>)
 8005788:	f7fa fd7e 	bl	8000288 <__aeabi_dsub>
 800578c:	4622      	mov	r2, r4
 800578e:	4680      	mov	r8, r0
 8005790:	4689      	mov	r9, r1
 8005792:	462b      	mov	r3, r5
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fa ff2e 	bl	80005f8 <__aeabi_dmul>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fa ff28 	bl	80005f8 <__aeabi_dmul>
 80057a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8005898 <__ieee754_pow+0x410>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff23 	bl	80005f8 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4650      	mov	r0, sl
 80057b8:	4659      	mov	r1, fp
 80057ba:	f7fa fd65 	bl	8000288 <__aeabi_dsub>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4680      	mov	r8, r0
 80057c4:	4689      	mov	r9, r1
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fa fd5f 	bl	800028c <__adddf3>
 80057ce:	2400      	movs	r4, #0
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	4620      	mov	r0, r4
 80057d6:	460d      	mov	r5, r1
 80057d8:	f7fa fd56 	bl	8000288 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fa fd50 	bl	8000288 <__aeabi_dsub>
 80057e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057f0:	2300      	movs	r3, #0
 80057f2:	9304      	str	r3, [sp, #16]
 80057f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80057f8:	4606      	mov	r6, r0
 80057fa:	460f      	mov	r7, r1
 80057fc:	465b      	mov	r3, fp
 80057fe:	4652      	mov	r2, sl
 8005800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005804:	f7fa fd40 	bl	8000288 <__aeabi_dsub>
 8005808:	4622      	mov	r2, r4
 800580a:	462b      	mov	r3, r5
 800580c:	f7fa fef4 	bl	80005f8 <__aeabi_dmul>
 8005810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005814:	4680      	mov	r8, r0
 8005816:	4689      	mov	r9, r1
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	f7fa fd30 	bl	800028c <__adddf3>
 800582c:	465b      	mov	r3, fp
 800582e:	4606      	mov	r6, r0
 8005830:	460f      	mov	r7, r1
 8005832:	4652      	mov	r2, sl
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fede 	bl	80005f8 <__aeabi_dmul>
 800583c:	460b      	mov	r3, r1
 800583e:	4602      	mov	r2, r0
 8005840:	4680      	mov	r8, r0
 8005842:	4689      	mov	r9, r1
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	f7fa fd20 	bl	800028c <__adddf3>
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <__ieee754_pow+0x424>)
 800584e:	4299      	cmp	r1, r3
 8005850:	4604      	mov	r4, r0
 8005852:	460d      	mov	r5, r1
 8005854:	468b      	mov	fp, r1
 8005856:	f340 820b 	ble.w	8005c70 <__ieee754_pow+0x7e8>
 800585a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800585e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005862:	4303      	orrs	r3, r0
 8005864:	f000 81ea 	beq.w	8005c3c <__ieee754_pow+0x7b4>
 8005868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	2300      	movs	r3, #0
 8005870:	f7fb f934 	bl	8000adc <__aeabi_dcmplt>
 8005874:	3800      	subs	r0, #0
 8005876:	bf18      	it	ne
 8005878:	2001      	movne	r0, #1
 800587a:	e713      	b.n	80056a4 <__ieee754_pow+0x21c>
 800587c:	f3af 8000 	nop.w
 8005880:	60000000 	.word	0x60000000
 8005884:	3ff71547 	.word	0x3ff71547
 8005888:	f85ddf44 	.word	0xf85ddf44
 800588c:	3e54ae0b 	.word	0x3e54ae0b
 8005890:	55555555 	.word	0x55555555
 8005894:	3fd55555 	.word	0x3fd55555
 8005898:	652b82fe 	.word	0x652b82fe
 800589c:	3ff71547 	.word	0x3ff71547
 80058a0:	3ff00000 	.word	0x3ff00000
 80058a4:	3fd00000 	.word	0x3fd00000
 80058a8:	3fe00000 	.word	0x3fe00000
 80058ac:	408fffff 	.word	0x408fffff
 80058b0:	4bd5      	ldr	r3, [pc, #852]	@ (8005c08 <__ieee754_pow+0x780>)
 80058b2:	ea08 0303 	and.w	r3, r8, r3
 80058b6:	2200      	movs	r2, #0
 80058b8:	b92b      	cbnz	r3, 80058c6 <__ieee754_pow+0x43e>
 80058ba:	4bd4      	ldr	r3, [pc, #848]	@ (8005c0c <__ieee754_pow+0x784>)
 80058bc:	f7fa fe9c 	bl	80005f8 <__aeabi_dmul>
 80058c0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80058c4:	468b      	mov	fp, r1
 80058c6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80058ca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80058ce:	4413      	add	r3, r2
 80058d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d2:	4bcf      	ldr	r3, [pc, #828]	@ (8005c10 <__ieee754_pow+0x788>)
 80058d4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80058d8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80058dc:	459b      	cmp	fp, r3
 80058de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80058e2:	dd08      	ble.n	80058f6 <__ieee754_pow+0x46e>
 80058e4:	4bcb      	ldr	r3, [pc, #812]	@ (8005c14 <__ieee754_pow+0x78c>)
 80058e6:	459b      	cmp	fp, r3
 80058e8:	f340 81a5 	ble.w	8005c36 <__ieee754_pow+0x7ae>
 80058ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ee:	3301      	adds	r3, #1
 80058f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80058f6:	f04f 0a00 	mov.w	sl, #0
 80058fa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80058fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005900:	4bc5      	ldr	r3, [pc, #788]	@ (8005c18 <__ieee754_pow+0x790>)
 8005902:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005906:	ed93 7b00 	vldr	d7, [r3]
 800590a:	4629      	mov	r1, r5
 800590c:	ec53 2b17 	vmov	r2, r3, d7
 8005910:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005914:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005918:	f7fa fcb6 	bl	8000288 <__aeabi_dsub>
 800591c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005920:	4606      	mov	r6, r0
 8005922:	460f      	mov	r7, r1
 8005924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005928:	f7fa fcb0 	bl	800028c <__adddf3>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	2000      	movs	r0, #0
 8005932:	49ba      	ldr	r1, [pc, #744]	@ (8005c1c <__ieee754_pow+0x794>)
 8005934:	f7fa ff8a 	bl	800084c <__aeabi_ddiv>
 8005938:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fe58 	bl	80005f8 <__aeabi_dmul>
 8005948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800594c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005950:	106d      	asrs	r5, r5, #1
 8005952:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005956:	f04f 0b00 	mov.w	fp, #0
 800595a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800595e:	4661      	mov	r1, ip
 8005960:	2200      	movs	r2, #0
 8005962:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005966:	4658      	mov	r0, fp
 8005968:	46e1      	mov	r9, ip
 800596a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800596e:	4614      	mov	r4, r2
 8005970:	461d      	mov	r5, r3
 8005972:	f7fa fe41 	bl	80005f8 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fc83 	bl	8000288 <__aeabi_dsub>
 8005982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fc7b 	bl	8000288 <__aeabi_dsub>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800599a:	f7fa fc75 	bl	8000288 <__aeabi_dsub>
 800599e:	465a      	mov	r2, fp
 80059a0:	464b      	mov	r3, r9
 80059a2:	f7fa fe29 	bl	80005f8 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fa fc6b 	bl	8000288 <__aeabi_dsub>
 80059b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059b6:	f7fa fe1f 	bl	80005f8 <__aeabi_dmul>
 80059ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	f7fa fe17 	bl	80005f8 <__aeabi_dmul>
 80059ca:	a37d      	add	r3, pc, #500	@ (adr r3, 8005bc0 <__ieee754_pow+0x738>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	4604      	mov	r4, r0
 80059d2:	460d      	mov	r5, r1
 80059d4:	f7fa fe10 	bl	80005f8 <__aeabi_dmul>
 80059d8:	a37b      	add	r3, pc, #492	@ (adr r3, 8005bc8 <__ieee754_pow+0x740>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fc55 	bl	800028c <__adddf3>
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	f7fa fe07 	bl	80005f8 <__aeabi_dmul>
 80059ea:	a379      	add	r3, pc, #484	@ (adr r3, 8005bd0 <__ieee754_pow+0x748>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fc4c 	bl	800028c <__adddf3>
 80059f4:	4622      	mov	r2, r4
 80059f6:	462b      	mov	r3, r5
 80059f8:	f7fa fdfe 	bl	80005f8 <__aeabi_dmul>
 80059fc:	a376      	add	r3, pc, #472	@ (adr r3, 8005bd8 <__ieee754_pow+0x750>)
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f7fa fc43 	bl	800028c <__adddf3>
 8005a06:	4622      	mov	r2, r4
 8005a08:	462b      	mov	r3, r5
 8005a0a:	f7fa fdf5 	bl	80005f8 <__aeabi_dmul>
 8005a0e:	a374      	add	r3, pc, #464	@ (adr r3, 8005be0 <__ieee754_pow+0x758>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fc3a 	bl	800028c <__adddf3>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	a371      	add	r3, pc, #452	@ (adr r3, 8005be8 <__ieee754_pow+0x760>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f7fa fc31 	bl	800028c <__adddf3>
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	462b      	mov	r3, r5
 8005a32:	4620      	mov	r0, r4
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fdd9 	bl	80005f8 <__aeabi_dmul>
 8005a46:	465a      	mov	r2, fp
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a52:	f7fa fc1b 	bl	800028c <__adddf3>
 8005a56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a5a:	f7fa fdcd 	bl	80005f8 <__aeabi_dmul>
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	f7fa fc13 	bl	800028c <__adddf3>
 8005a66:	465a      	mov	r2, fp
 8005a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	4658      	mov	r0, fp
 8005a70:	4649      	mov	r1, r9
 8005a72:	f7fa fdc1 	bl	80005f8 <__aeabi_dmul>
 8005a76:	4b6a      	ldr	r3, [pc, #424]	@ (8005c20 <__ieee754_pow+0x798>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	f7fa fc05 	bl	800028c <__adddf3>
 8005a82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a86:	f7fa fc01 	bl	800028c <__adddf3>
 8005a8a:	46d8      	mov	r8, fp
 8005a8c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005a90:	460d      	mov	r5, r1
 8005a92:	465a      	mov	r2, fp
 8005a94:	460b      	mov	r3, r1
 8005a96:	4640      	mov	r0, r8
 8005a98:	4649      	mov	r1, r9
 8005a9a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005a9e:	f7fa fdab 	bl	80005f8 <__aeabi_dmul>
 8005aa2:	465c      	mov	r4, fp
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8005c20 <__ieee754_pow+0x798>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa fbea 	bl	8000288 <__aeabi_dsub>
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	f7fa fbe6 	bl	8000288 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ac4:	f7fa fbe0 	bl	8000288 <__aeabi_dsub>
 8005ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_dmul>
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460f      	mov	r7, r1
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005adc:	f7fa fd8c 	bl	80005f8 <__aeabi_dmul>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fbd0 	bl	800028c <__adddf3>
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4640      	mov	r0, r8
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fa fbc8 	bl	800028c <__adddf3>
 8005afc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005b00:	a33b      	add	r3, pc, #236	@ (adr r3, 8005bf0 <__ieee754_pow+0x768>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	4658      	mov	r0, fp
 8005b08:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	f7fa fd73 	bl	80005f8 <__aeabi_dmul>
 8005b12:	465c      	mov	r4, fp
 8005b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fbb2 	bl	8000288 <__aeabi_dsub>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa fbac 	bl	8000288 <__aeabi_dsub>
 8005b30:	a331      	add	r3, pc, #196	@ (adr r3, 8005bf8 <__ieee754_pow+0x770>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fd5f 	bl	80005f8 <__aeabi_dmul>
 8005b3a:	a331      	add	r3, pc, #196	@ (adr r3, 8005c00 <__ieee754_pow+0x778>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7fa fd56 	bl	80005f8 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4630      	mov	r0, r6
 8005b52:	4639      	mov	r1, r7
 8005b54:	f7fa fb9a 	bl	800028c <__adddf3>
 8005b58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b5a:	4b32      	ldr	r3, [pc, #200]	@ (8005c24 <__ieee754_pow+0x79c>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fb93 	bl	800028c <__adddf3>
 8005b66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b6c:	f7fa fcda 	bl	8000524 <__aeabi_i2d>
 8005b70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b72:	4b2d      	ldr	r3, [pc, #180]	@ (8005c28 <__ieee754_pow+0x7a0>)
 8005b74:	4413      	add	r3, r2
 8005b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b80:	460f      	mov	r7, r1
 8005b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b86:	f7fa fb81 	bl	800028c <__adddf3>
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	f7fa fb7d 	bl	800028c <__adddf3>
 8005b92:	4632      	mov	r2, r6
 8005b94:	463b      	mov	r3, r7
 8005b96:	f7fa fb79 	bl	800028c <__adddf3>
 8005b9a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	f7fa fb6f 	bl	8000288 <__aeabi_dsub>
 8005baa:	4642      	mov	r2, r8
 8005bac:	464b      	mov	r3, r9
 8005bae:	f7fa fb6b 	bl	8000288 <__aeabi_dsub>
 8005bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb6:	f7fa fb67 	bl	8000288 <__aeabi_dsub>
 8005bba:	465c      	mov	r4, fp
 8005bbc:	e036      	b.n	8005c2c <__ieee754_pow+0x7a4>
 8005bbe:	bf00      	nop
 8005bc0:	4a454eef 	.word	0x4a454eef
 8005bc4:	3fca7e28 	.word	0x3fca7e28
 8005bc8:	93c9db65 	.word	0x93c9db65
 8005bcc:	3fcd864a 	.word	0x3fcd864a
 8005bd0:	a91d4101 	.word	0xa91d4101
 8005bd4:	3fd17460 	.word	0x3fd17460
 8005bd8:	518f264d 	.word	0x518f264d
 8005bdc:	3fd55555 	.word	0x3fd55555
 8005be0:	db6fabff 	.word	0xdb6fabff
 8005be4:	3fdb6db6 	.word	0x3fdb6db6
 8005be8:	33333303 	.word	0x33333303
 8005bec:	3fe33333 	.word	0x3fe33333
 8005bf0:	e0000000 	.word	0xe0000000
 8005bf4:	3feec709 	.word	0x3feec709
 8005bf8:	dc3a03fd 	.word	0xdc3a03fd
 8005bfc:	3feec709 	.word	0x3feec709
 8005c00:	145b01f5 	.word	0x145b01f5
 8005c04:	be3e2fe0 	.word	0xbe3e2fe0
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	43400000 	.word	0x43400000
 8005c10:	0003988e 	.word	0x0003988e
 8005c14:	000bb679 	.word	0x000bb679
 8005c18:	0800ac60 	.word	0x0800ac60
 8005c1c:	3ff00000 	.word	0x3ff00000
 8005c20:	40080000 	.word	0x40080000
 8005c24:	0800ac40 	.word	0x0800ac40
 8005c28:	0800ac50 	.word	0x0800ac50
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c34:	e5d6      	b.n	80057e4 <__ieee754_pow+0x35c>
 8005c36:	f04f 0a01 	mov.w	sl, #1
 8005c3a:	e65e      	b.n	80058fa <__ieee754_pow+0x472>
 8005c3c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8005f14 <__ieee754_pow+0xa8c>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	4630      	mov	r0, r6
 8005c44:	4639      	mov	r1, r7
 8005c46:	f7fa fb21 	bl	800028c <__adddf3>
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c50:	464b      	mov	r3, r9
 8005c52:	4620      	mov	r0, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7fa fb17 	bl	8000288 <__aeabi_dsub>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c62:	f7fa ff59 	bl	8000b18 <__aeabi_dcmpgt>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f47f adfe 	bne.w	8005868 <__ieee754_pow+0x3e0>
 8005c6c:	4ba2      	ldr	r3, [pc, #648]	@ (8005ef8 <__ieee754_pow+0xa70>)
 8005c6e:	e022      	b.n	8005cb6 <__ieee754_pow+0x82e>
 8005c70:	4ca2      	ldr	r4, [pc, #648]	@ (8005efc <__ieee754_pow+0xa74>)
 8005c72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005c76:	42a3      	cmp	r3, r4
 8005c78:	d919      	bls.n	8005cae <__ieee754_pow+0x826>
 8005c7a:	4ba1      	ldr	r3, [pc, #644]	@ (8005f00 <__ieee754_pow+0xa78>)
 8005c7c:	440b      	add	r3, r1
 8005c7e:	4303      	orrs	r3, r0
 8005c80:	d009      	beq.n	8005c96 <__ieee754_pow+0x80e>
 8005c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f7fa ff27 	bl	8000adc <__aeabi_dcmplt>
 8005c8e:	3800      	subs	r0, #0
 8005c90:	bf18      	it	ne
 8005c92:	2001      	movne	r0, #1
 8005c94:	e512      	b.n	80056bc <__ieee754_pow+0x234>
 8005c96:	4642      	mov	r2, r8
 8005c98:	464b      	mov	r3, r9
 8005c9a:	f7fa faf5 	bl	8000288 <__aeabi_dsub>
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	f7fa ff2f 	bl	8000b04 <__aeabi_dcmpge>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d1eb      	bne.n	8005c82 <__ieee754_pow+0x7fa>
 8005caa:	4b96      	ldr	r3, [pc, #600]	@ (8005f04 <__ieee754_pow+0xa7c>)
 8005cac:	e003      	b.n	8005cb6 <__ieee754_pow+0x82e>
 8005cae:	4a96      	ldr	r2, [pc, #600]	@ (8005f08 <__ieee754_pow+0xa80>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	f240 80e7 	bls.w	8005e84 <__ieee754_pow+0x9fc>
 8005cb6:	151b      	asrs	r3, r3, #20
 8005cb8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8005cbc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8005cc0:	fa4a fa03 	asr.w	sl, sl, r3
 8005cc4:	44da      	add	sl, fp
 8005cc6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005cca:	4890      	ldr	r0, [pc, #576]	@ (8005f0c <__ieee754_pow+0xa84>)
 8005ccc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005cd0:	4108      	asrs	r0, r1
 8005cd2:	ea00 030a 	and.w	r3, r0, sl
 8005cd6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005cda:	f1c1 0114 	rsb	r1, r1, #20
 8005cde:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005ce2:	fa4a fa01 	asr.w	sl, sl, r1
 8005ce6:	f1bb 0f00 	cmp.w	fp, #0
 8005cea:	4640      	mov	r0, r8
 8005cec:	4649      	mov	r1, r9
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	bfb8      	it	lt
 8005cf4:	f1ca 0a00 	rsblt	sl, sl, #0
 8005cf8:	f7fa fac6 	bl	8000288 <__aeabi_dsub>
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4689      	mov	r9, r1
 8005d00:	4632      	mov	r2, r6
 8005d02:	463b      	mov	r3, r7
 8005d04:	4640      	mov	r0, r8
 8005d06:	4649      	mov	r1, r9
 8005d08:	f7fa fac0 	bl	800028c <__adddf3>
 8005d0c:	2400      	movs	r4, #0
 8005d0e:	a36a      	add	r3, pc, #424	@ (adr r3, 8005eb8 <__ieee754_pow+0xa30>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	4620      	mov	r0, r4
 8005d16:	460d      	mov	r5, r1
 8005d18:	f7fa fc6e 	bl	80005f8 <__aeabi_dmul>
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d22:	464b      	mov	r3, r9
 8005d24:	4620      	mov	r0, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa faae 	bl	8000288 <__aeabi_dsub>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	f7fa faa8 	bl	8000288 <__aeabi_dsub>
 8005d38:	a361      	add	r3, pc, #388	@ (adr r3, 8005ec0 <__ieee754_pow+0xa38>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fc5b 	bl	80005f8 <__aeabi_dmul>
 8005d42:	a361      	add	r3, pc, #388	@ (adr r3, 8005ec8 <__ieee754_pow+0xa40>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	4680      	mov	r8, r0
 8005d4a:	4689      	mov	r9, r1
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7fa fa96 	bl	800028c <__adddf3>
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6c:	f7fa fa8e 	bl	800028c <__adddf3>
 8005d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d74:	4680      	mov	r8, r0
 8005d76:	4689      	mov	r9, r1
 8005d78:	f7fa fa86 	bl	8000288 <__aeabi_dsub>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa fa80 	bl	8000288 <__aeabi_dsub>
 8005d88:	4642      	mov	r2, r8
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	464b      	mov	r3, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa fc30 	bl	80005f8 <__aeabi_dmul>
 8005d98:	a34d      	add	r3, pc, #308	@ (adr r3, 8005ed0 <__ieee754_pow+0xa48>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	f7fa fc29 	bl	80005f8 <__aeabi_dmul>
 8005da6:	a34c      	add	r3, pc, #304	@ (adr r3, 8005ed8 <__ieee754_pow+0xa50>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa fa6c 	bl	8000288 <__aeabi_dsub>
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	f7fa fc20 	bl	80005f8 <__aeabi_dmul>
 8005db8:	a349      	add	r3, pc, #292	@ (adr r3, 8005ee0 <__ieee754_pow+0xa58>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fa65 	bl	800028c <__adddf3>
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	a347      	add	r3, pc, #284	@ (adr r3, 8005ee8 <__ieee754_pow+0xa60>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fa5a 	bl	8000288 <__aeabi_dsub>
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	f7fa fc0e 	bl	80005f8 <__aeabi_dmul>
 8005ddc:	a344      	add	r3, pc, #272	@ (adr r3, 8005ef0 <__ieee754_pow+0xa68>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fa53 	bl	800028c <__adddf3>
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f7fa fc05 	bl	80005f8 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa fa47 	bl	8000288 <__aeabi_dsub>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f7fa fbf7 	bl	80005f8 <__aeabi_dmul>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e14:	4620      	mov	r0, r4
 8005e16:	4629      	mov	r1, r5
 8005e18:	f7fa fa36 	bl	8000288 <__aeabi_dsub>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e24:	f7fa fd12 	bl	800084c <__aeabi_ddiv>
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	460d      	mov	r5, r1
 8005e2e:	463b      	mov	r3, r7
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fbe0 	bl	80005f8 <__aeabi_dmul>
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	f7fa fa26 	bl	800028c <__adddf3>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fa1e 	bl	8000288 <__aeabi_dsub>
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	f7fa fa1a 	bl	8000288 <__aeabi_dsub>
 8005e54:	460b      	mov	r3, r1
 8005e56:	4602      	mov	r2, r0
 8005e58:	492d      	ldr	r1, [pc, #180]	@ (8005f10 <__ieee754_pow+0xa88>)
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f7fa fa14 	bl	8000288 <__aeabi_dsub>
 8005e60:	ec41 0b10 	vmov	d0, r0, r1
 8005e64:	ee10 3a90 	vmov	r3, s1
 8005e68:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e70:	da0b      	bge.n	8005e8a <__ieee754_pow+0xa02>
 8005e72:	4650      	mov	r0, sl
 8005e74:	f000 f9f4 	bl	8006260 <scalbn>
 8005e78:	ec51 0b10 	vmov	r0, r1, d0
 8005e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e80:	f7ff bb6d 	b.w	800555e <__ieee754_pow+0xd6>
 8005e84:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005e88:	e73a      	b.n	8005d00 <__ieee754_pow+0x878>
 8005e8a:	ec51 0b10 	vmov	r0, r1, d0
 8005e8e:	4619      	mov	r1, r3
 8005e90:	e7f4      	b.n	8005e7c <__ieee754_pow+0x9f4>
 8005e92:	491f      	ldr	r1, [pc, #124]	@ (8005f10 <__ieee754_pow+0xa88>)
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7ff bb14 	b.w	80054c2 <__ieee754_pow+0x3a>
 8005e9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e9e:	f7ff bb10 	b.w	80054c2 <__ieee754_pow+0x3a>
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	f7ff bb0c 	b.w	80054c2 <__ieee754_pow+0x3a>
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f7ff bb69 	b.w	8005582 <__ieee754_pow+0xfa>
 8005eb0:	2400      	movs	r4, #0
 8005eb2:	f7ff bb4b 	b.w	800554c <__ieee754_pow+0xc4>
 8005eb6:	bf00      	nop
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	3fe62e43 	.word	0x3fe62e43
 8005ec0:	fefa39ef 	.word	0xfefa39ef
 8005ec4:	3fe62e42 	.word	0x3fe62e42
 8005ec8:	0ca86c39 	.word	0x0ca86c39
 8005ecc:	be205c61 	.word	0xbe205c61
 8005ed0:	72bea4d0 	.word	0x72bea4d0
 8005ed4:	3e663769 	.word	0x3e663769
 8005ed8:	c5d26bf1 	.word	0xc5d26bf1
 8005edc:	3ebbbd41 	.word	0x3ebbbd41
 8005ee0:	af25de2c 	.word	0xaf25de2c
 8005ee4:	3f11566a 	.word	0x3f11566a
 8005ee8:	16bebd93 	.word	0x16bebd93
 8005eec:	3f66c16c 	.word	0x3f66c16c
 8005ef0:	5555553e 	.word	0x5555553e
 8005ef4:	3fc55555 	.word	0x3fc55555
 8005ef8:	40900000 	.word	0x40900000
 8005efc:	4090cbff 	.word	0x4090cbff
 8005f00:	3f6f3400 	.word	0x3f6f3400
 8005f04:	4090cc00 	.word	0x4090cc00
 8005f08:	3fe00000 	.word	0x3fe00000
 8005f0c:	fff00000 	.word	0xfff00000
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	652b82fe 	.word	0x652b82fe
 8005f18:	3c971547 	.word	0x3c971547
 8005f1c:	00000000 	.word	0x00000000

08005f20 <atan>:
 8005f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	ec55 4b10 	vmov	r4, r5, d0
 8005f28:	4bbf      	ldr	r3, [pc, #764]	@ (8006228 <atan+0x308>)
 8005f2a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005f2e:	429e      	cmp	r6, r3
 8005f30:	46ab      	mov	fp, r5
 8005f32:	d918      	bls.n	8005f66 <atan+0x46>
 8005f34:	4bbd      	ldr	r3, [pc, #756]	@ (800622c <atan+0x30c>)
 8005f36:	429e      	cmp	r6, r3
 8005f38:	d801      	bhi.n	8005f3e <atan+0x1e>
 8005f3a:	d109      	bne.n	8005f50 <atan+0x30>
 8005f3c:	b144      	cbz	r4, 8005f50 <atan+0x30>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	f7fa f9a1 	bl	800028c <__adddf3>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	e006      	b.n	8005f5e <atan+0x3e>
 8005f50:	f1bb 0f00 	cmp.w	fp, #0
 8005f54:	f340 812b 	ble.w	80061ae <atan+0x28e>
 8005f58:	a597      	add	r5, pc, #604	@ (adr r5, 80061b8 <atan+0x298>)
 8005f5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005f5e:	ec45 4b10 	vmov	d0, r4, r5
 8005f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	4bb2      	ldr	r3, [pc, #712]	@ (8006230 <atan+0x310>)
 8005f68:	429e      	cmp	r6, r3
 8005f6a:	d813      	bhi.n	8005f94 <atan+0x74>
 8005f6c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005f70:	429e      	cmp	r6, r3
 8005f72:	d80c      	bhi.n	8005f8e <atan+0x6e>
 8005f74:	a392      	add	r3, pc, #584	@ (adr r3, 80061c0 <atan+0x2a0>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f7fa f985 	bl	800028c <__adddf3>
 8005f82:	4bac      	ldr	r3, [pc, #688]	@ (8006234 <atan+0x314>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	f7fa fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d1e7      	bne.n	8005f5e <atan+0x3e>
 8005f8e:	f04f 3aff 	mov.w	sl, #4294967295
 8005f92:	e029      	b.n	8005fe8 <atan+0xc8>
 8005f94:	f000 f95c 	bl	8006250 <fabs>
 8005f98:	4ba7      	ldr	r3, [pc, #668]	@ (8006238 <atan+0x318>)
 8005f9a:	429e      	cmp	r6, r3
 8005f9c:	ec55 4b10 	vmov	r4, r5, d0
 8005fa0:	f200 80bc 	bhi.w	800611c <atan+0x1fc>
 8005fa4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005fa8:	429e      	cmp	r6, r3
 8005faa:	f200 809e 	bhi.w	80060ea <atan+0x1ca>
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa f969 	bl	800028c <__adddf3>
 8005fba:	4b9e      	ldr	r3, [pc, #632]	@ (8006234 <atan+0x314>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f7fa f963 	bl	8000288 <__aeabi_dsub>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	460f      	mov	r7, r1
 8005fc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f95c 	bl	800028c <__adddf3>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa fc36 	bl	800084c <__aeabi_ddiv>
 8005fe0:	f04f 0a00 	mov.w	sl, #0
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	4622      	mov	r2, r4
 8005fea:	462b      	mov	r3, r5
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	f7fa fafc 	bl	80005f8 <__aeabi_dmul>
 8006000:	a371      	add	r3, pc, #452	@ (adr r3, 80061c8 <atan+0x2a8>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	4606      	mov	r6, r0
 8006008:	460f      	mov	r7, r1
 800600a:	f7fa faf5 	bl	80005f8 <__aeabi_dmul>
 800600e:	a370      	add	r3, pc, #448	@ (adr r3, 80061d0 <atan+0x2b0>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f93a 	bl	800028c <__adddf3>
 8006018:	4632      	mov	r2, r6
 800601a:	463b      	mov	r3, r7
 800601c:	f7fa faec 	bl	80005f8 <__aeabi_dmul>
 8006020:	a36d      	add	r3, pc, #436	@ (adr r3, 80061d8 <atan+0x2b8>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f931 	bl	800028c <__adddf3>
 800602a:	4632      	mov	r2, r6
 800602c:	463b      	mov	r3, r7
 800602e:	f7fa fae3 	bl	80005f8 <__aeabi_dmul>
 8006032:	a36b      	add	r3, pc, #428	@ (adr r3, 80061e0 <atan+0x2c0>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa f928 	bl	800028c <__adddf3>
 800603c:	4632      	mov	r2, r6
 800603e:	463b      	mov	r3, r7
 8006040:	f7fa fada 	bl	80005f8 <__aeabi_dmul>
 8006044:	a368      	add	r3, pc, #416	@ (adr r3, 80061e8 <atan+0x2c8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4632      	mov	r2, r6
 8006050:	463b      	mov	r3, r7
 8006052:	f7fa fad1 	bl	80005f8 <__aeabi_dmul>
 8006056:	a366      	add	r3, pc, #408	@ (adr r3, 80061f0 <atan+0x2d0>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa f916 	bl	800028c <__adddf3>
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	f7fa fac8 	bl	80005f8 <__aeabi_dmul>
 8006068:	a363      	add	r3, pc, #396	@ (adr r3, 80061f8 <atan+0x2d8>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	4680      	mov	r8, r0
 8006070:	4689      	mov	r9, r1
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa fabf 	bl	80005f8 <__aeabi_dmul>
 800607a:	a361      	add	r3, pc, #388	@ (adr r3, 8006200 <atan+0x2e0>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa f902 	bl	8000288 <__aeabi_dsub>
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	f7fa fab6 	bl	80005f8 <__aeabi_dmul>
 800608c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006208 <atan+0x2e8>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f8f9 	bl	8000288 <__aeabi_dsub>
 8006096:	4632      	mov	r2, r6
 8006098:	463b      	mov	r3, r7
 800609a:	f7fa faad 	bl	80005f8 <__aeabi_dmul>
 800609e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006210 <atan+0x2f0>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa f8f0 	bl	8000288 <__aeabi_dsub>
 80060a8:	4632      	mov	r2, r6
 80060aa:	463b      	mov	r3, r7
 80060ac:	f7fa faa4 	bl	80005f8 <__aeabi_dmul>
 80060b0:	a359      	add	r3, pc, #356	@ (adr r3, 8006218 <atan+0x2f8>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa f8e7 	bl	8000288 <__aeabi_dsub>
 80060ba:	4632      	mov	r2, r6
 80060bc:	463b      	mov	r3, r7
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4640      	mov	r0, r8
 80060c8:	4649      	mov	r1, r9
 80060ca:	f7fa f8df 	bl	800028c <__adddf3>
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	f7fa fa91 	bl	80005f8 <__aeabi_dmul>
 80060d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	d148      	bne.n	8006172 <atan+0x252>
 80060e0:	4620      	mov	r0, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	f7fa f8d0 	bl	8000288 <__aeabi_dsub>
 80060e8:	e72f      	b.n	8005f4a <atan+0x2a>
 80060ea:	4b52      	ldr	r3, [pc, #328]	@ (8006234 <atan+0x314>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa f8c9 	bl	8000288 <__aeabi_dsub>
 80060f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006234 <atan+0x314>)
 80060f8:	4606      	mov	r6, r0
 80060fa:	460f      	mov	r7, r1
 80060fc:	2200      	movs	r2, #0
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa f8c3 	bl	800028c <__adddf3>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4630      	mov	r0, r6
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa fb9d 	bl	800084c <__aeabi_ddiv>
 8006112:	f04f 0a01 	mov.w	sl, #1
 8006116:	4604      	mov	r4, r0
 8006118:	460d      	mov	r5, r1
 800611a:	e765      	b.n	8005fe8 <atan+0xc8>
 800611c:	4b47      	ldr	r3, [pc, #284]	@ (800623c <atan+0x31c>)
 800611e:	429e      	cmp	r6, r3
 8006120:	d21c      	bcs.n	800615c <atan+0x23c>
 8006122:	4b47      	ldr	r3, [pc, #284]	@ (8006240 <atan+0x320>)
 8006124:	2200      	movs	r2, #0
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa f8ad 	bl	8000288 <__aeabi_dsub>
 800612e:	4b44      	ldr	r3, [pc, #272]	@ (8006240 <atan+0x320>)
 8006130:	4606      	mov	r6, r0
 8006132:	460f      	mov	r7, r1
 8006134:	2200      	movs	r2, #0
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	4b3d      	ldr	r3, [pc, #244]	@ (8006234 <atan+0x314>)
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa f8a3 	bl	800028c <__adddf3>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fb7d 	bl	800084c <__aeabi_ddiv>
 8006152:	f04f 0a02 	mov.w	sl, #2
 8006156:	4604      	mov	r4, r0
 8006158:	460d      	mov	r5, r1
 800615a:	e745      	b.n	8005fe8 <atan+0xc8>
 800615c:	4622      	mov	r2, r4
 800615e:	462b      	mov	r3, r5
 8006160:	4938      	ldr	r1, [pc, #224]	@ (8006244 <atan+0x324>)
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa fb72 	bl	800084c <__aeabi_ddiv>
 8006168:	f04f 0a03 	mov.w	sl, #3
 800616c:	4604      	mov	r4, r0
 800616e:	460d      	mov	r5, r1
 8006170:	e73a      	b.n	8005fe8 <atan+0xc8>
 8006172:	4b35      	ldr	r3, [pc, #212]	@ (8006248 <atan+0x328>)
 8006174:	4e35      	ldr	r6, [pc, #212]	@ (800624c <atan+0x32c>)
 8006176:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f883 	bl	8000288 <__aeabi_dsub>
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006196:	f7fa f877 	bl	8000288 <__aeabi_dsub>
 800619a:	f1bb 0f00 	cmp.w	fp, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
 80061a2:	f6bf aedc 	bge.w	8005f5e <atan+0x3e>
 80061a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061aa:	461d      	mov	r5, r3
 80061ac:	e6d7      	b.n	8005f5e <atan+0x3e>
 80061ae:	a51c      	add	r5, pc, #112	@ (adr r5, 8006220 <atan+0x300>)
 80061b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061b4:	e6d3      	b.n	8005f5e <atan+0x3e>
 80061b6:	bf00      	nop
 80061b8:	54442d18 	.word	0x54442d18
 80061bc:	3ff921fb 	.word	0x3ff921fb
 80061c0:	8800759c 	.word	0x8800759c
 80061c4:	7e37e43c 	.word	0x7e37e43c
 80061c8:	e322da11 	.word	0xe322da11
 80061cc:	3f90ad3a 	.word	0x3f90ad3a
 80061d0:	24760deb 	.word	0x24760deb
 80061d4:	3fa97b4b 	.word	0x3fa97b4b
 80061d8:	a0d03d51 	.word	0xa0d03d51
 80061dc:	3fb10d66 	.word	0x3fb10d66
 80061e0:	c54c206e 	.word	0xc54c206e
 80061e4:	3fb745cd 	.word	0x3fb745cd
 80061e8:	920083ff 	.word	0x920083ff
 80061ec:	3fc24924 	.word	0x3fc24924
 80061f0:	5555550d 	.word	0x5555550d
 80061f4:	3fd55555 	.word	0x3fd55555
 80061f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80061fc:	bfa2b444 	.word	0xbfa2b444
 8006200:	52defd9a 	.word	0x52defd9a
 8006204:	3fadde2d 	.word	0x3fadde2d
 8006208:	af749a6d 	.word	0xaf749a6d
 800620c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006210:	fe231671 	.word	0xfe231671
 8006214:	3fbc71c6 	.word	0x3fbc71c6
 8006218:	9998ebc4 	.word	0x9998ebc4
 800621c:	3fc99999 	.word	0x3fc99999
 8006220:	54442d18 	.word	0x54442d18
 8006224:	bff921fb 	.word	0xbff921fb
 8006228:	440fffff 	.word	0x440fffff
 800622c:	7ff00000 	.word	0x7ff00000
 8006230:	3fdbffff 	.word	0x3fdbffff
 8006234:	3ff00000 	.word	0x3ff00000
 8006238:	3ff2ffff 	.word	0x3ff2ffff
 800623c:	40038000 	.word	0x40038000
 8006240:	3ff80000 	.word	0x3ff80000
 8006244:	bff00000 	.word	0xbff00000
 8006248:	0800ac70 	.word	0x0800ac70
 800624c:	0800ac90 	.word	0x0800ac90

08006250 <fabs>:
 8006250:	ec51 0b10 	vmov	r0, r1, d0
 8006254:	4602      	mov	r2, r0
 8006256:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800625a:	ec43 2b10 	vmov	d0, r2, r3
 800625e:	4770      	bx	lr

08006260 <scalbn>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	ec55 4b10 	vmov	r4, r5, d0
 8006266:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800626a:	4606      	mov	r6, r0
 800626c:	462b      	mov	r3, r5
 800626e:	b991      	cbnz	r1, 8006296 <scalbn+0x36>
 8006270:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006274:	4323      	orrs	r3, r4
 8006276:	d03b      	beq.n	80062f0 <scalbn+0x90>
 8006278:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <scalbn+0xe8>)
 800627a:	4620      	mov	r0, r4
 800627c:	4629      	mov	r1, r5
 800627e:	2200      	movs	r2, #0
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	4b31      	ldr	r3, [pc, #196]	@ (800634c <scalbn+0xec>)
 8006286:	429e      	cmp	r6, r3
 8006288:	4604      	mov	r4, r0
 800628a:	460d      	mov	r5, r1
 800628c:	da0f      	bge.n	80062ae <scalbn+0x4e>
 800628e:	a326      	add	r3, pc, #152	@ (adr r3, 8006328 <scalbn+0xc8>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	e01e      	b.n	80062d4 <scalbn+0x74>
 8006296:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800629a:	4291      	cmp	r1, r2
 800629c:	d10b      	bne.n	80062b6 <scalbn+0x56>
 800629e:	4622      	mov	r2, r4
 80062a0:	4620      	mov	r0, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	f7f9 fff2 	bl	800028c <__adddf3>
 80062a8:	4604      	mov	r4, r0
 80062aa:	460d      	mov	r5, r1
 80062ac:	e020      	b.n	80062f0 <scalbn+0x90>
 80062ae:	460b      	mov	r3, r1
 80062b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80062b4:	3936      	subs	r1, #54	@ 0x36
 80062b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80062ba:	4296      	cmp	r6, r2
 80062bc:	dd0d      	ble.n	80062da <scalbn+0x7a>
 80062be:	2d00      	cmp	r5, #0
 80062c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8006330 <scalbn+0xd0>)
 80062c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062c6:	da02      	bge.n	80062ce <scalbn+0x6e>
 80062c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8006338 <scalbn+0xd8>)
 80062ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ce:	a318      	add	r3, pc, #96	@ (adr r3, 8006330 <scalbn+0xd0>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa f990 	bl	80005f8 <__aeabi_dmul>
 80062d8:	e7e6      	b.n	80062a8 <scalbn+0x48>
 80062da:	1872      	adds	r2, r6, r1
 80062dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80062e0:	428a      	cmp	r2, r1
 80062e2:	dcec      	bgt.n	80062be <scalbn+0x5e>
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	dd06      	ble.n	80062f6 <scalbn+0x96>
 80062e8:	f36f 531e 	bfc	r3, #20, #11
 80062ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062f0:	ec45 4b10 	vmov	d0, r4, r5
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80062fa:	da08      	bge.n	800630e <scalbn+0xae>
 80062fc:	2d00      	cmp	r5, #0
 80062fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8006328 <scalbn+0xc8>)
 8006300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006304:	dac3      	bge.n	800628e <scalbn+0x2e>
 8006306:	a10e      	add	r1, pc, #56	@ (adr r1, 8006340 <scalbn+0xe0>)
 8006308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800630c:	e7bf      	b.n	800628e <scalbn+0x2e>
 800630e:	3236      	adds	r2, #54	@ 0x36
 8006310:	f36f 531e 	bfc	r3, #20, #11
 8006314:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006318:	4620      	mov	r0, r4
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <scalbn+0xf0>)
 800631c:	4629      	mov	r1, r5
 800631e:	2200      	movs	r2, #0
 8006320:	e7d8      	b.n	80062d4 <scalbn+0x74>
 8006322:	bf00      	nop
 8006324:	f3af 8000 	nop.w
 8006328:	c2f8f359 	.word	0xc2f8f359
 800632c:	01a56e1f 	.word	0x01a56e1f
 8006330:	8800759c 	.word	0x8800759c
 8006334:	7e37e43c 	.word	0x7e37e43c
 8006338:	8800759c 	.word	0x8800759c
 800633c:	fe37e43c 	.word	0xfe37e43c
 8006340:	c2f8f359 	.word	0xc2f8f359
 8006344:	81a56e1f 	.word	0x81a56e1f
 8006348:	43500000 	.word	0x43500000
 800634c:	ffff3cb0 	.word	0xffff3cb0
 8006350:	3c900000 	.word	0x3c900000

08006354 <with_errno>:
 8006354:	b510      	push	{r4, lr}
 8006356:	ed2d 8b02 	vpush	{d8}
 800635a:	eeb0 8a40 	vmov.f32	s16, s0
 800635e:	eef0 8a60 	vmov.f32	s17, s1
 8006362:	4604      	mov	r4, r0
 8006364:	f001 f916 	bl	8007594 <__errno>
 8006368:	eeb0 0a48 	vmov.f32	s0, s16
 800636c:	eef0 0a68 	vmov.f32	s1, s17
 8006370:	ecbd 8b02 	vpop	{d8}
 8006374:	6004      	str	r4, [r0, #0]
 8006376:	bd10      	pop	{r4, pc}

08006378 <xflow>:
 8006378:	4603      	mov	r3, r0
 800637a:	b507      	push	{r0, r1, r2, lr}
 800637c:	ec51 0b10 	vmov	r0, r1, d0
 8006380:	b183      	cbz	r3, 80063a4 <xflow+0x2c>
 8006382:	4602      	mov	r2, r0
 8006384:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006388:	e9cd 2300 	strd	r2, r3, [sp]
 800638c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006390:	f7fa f932 	bl	80005f8 <__aeabi_dmul>
 8006394:	ec41 0b10 	vmov	d0, r0, r1
 8006398:	2022      	movs	r0, #34	@ 0x22
 800639a:	b003      	add	sp, #12
 800639c:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a0:	f7ff bfd8 	b.w	8006354 <with_errno>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e7ee      	b.n	8006388 <xflow+0x10>
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <__math_uflow>:
 80063b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80063b8 <__math_uflow+0x8>
 80063b4:	f7ff bfe0 	b.w	8006378 <xflow>
 80063b8:	00000000 	.word	0x00000000
 80063bc:	10000000 	.word	0x10000000

080063c0 <__math_oflow>:
 80063c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80063c8 <__math_oflow+0x8>
 80063c4:	f7ff bfd8 	b.w	8006378 <xflow>
 80063c8:	00000000 	.word	0x00000000
 80063cc:	70000000 	.word	0x70000000

080063d0 <__cvt>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	ec57 6b10 	vmov	r6, r7, d0
 80063d8:	2f00      	cmp	r7, #0
 80063da:	460c      	mov	r4, r1
 80063dc:	4619      	mov	r1, r3
 80063de:	463b      	mov	r3, r7
 80063e0:	bfbb      	ittet	lt
 80063e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063e6:	461f      	movlt	r7, r3
 80063e8:	2300      	movge	r3, #0
 80063ea:	232d      	movlt	r3, #45	@ 0x2d
 80063ec:	700b      	strb	r3, [r1, #0]
 80063ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063f4:	4691      	mov	r9, r2
 80063f6:	f023 0820 	bic.w	r8, r3, #32
 80063fa:	bfbc      	itt	lt
 80063fc:	4632      	movlt	r2, r6
 80063fe:	4616      	movlt	r6, r2
 8006400:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006404:	d005      	beq.n	8006412 <__cvt+0x42>
 8006406:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800640a:	d100      	bne.n	800640e <__cvt+0x3e>
 800640c:	3401      	adds	r4, #1
 800640e:	2102      	movs	r1, #2
 8006410:	e000      	b.n	8006414 <__cvt+0x44>
 8006412:	2103      	movs	r1, #3
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	ab02      	add	r3, sp, #8
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	ec47 6b10 	vmov	d0, r6, r7
 8006420:	4653      	mov	r3, sl
 8006422:	4622      	mov	r2, r4
 8006424:	f001 f974 	bl	8007710 <_dtoa_r>
 8006428:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800642c:	4605      	mov	r5, r0
 800642e:	d119      	bne.n	8006464 <__cvt+0x94>
 8006430:	f019 0f01 	tst.w	r9, #1
 8006434:	d00e      	beq.n	8006454 <__cvt+0x84>
 8006436:	eb00 0904 	add.w	r9, r0, r4
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006446:	b108      	cbz	r0, 800644c <__cvt+0x7c>
 8006448:	f8cd 900c 	str.w	r9, [sp, #12]
 800644c:	2230      	movs	r2, #48	@ 0x30
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	454b      	cmp	r3, r9
 8006452:	d31e      	bcc.n	8006492 <__cvt+0xc2>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006458:	1b5b      	subs	r3, r3, r5
 800645a:	4628      	mov	r0, r5
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	b004      	add	sp, #16
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006468:	eb00 0904 	add.w	r9, r0, r4
 800646c:	d1e5      	bne.n	800643a <__cvt+0x6a>
 800646e:	7803      	ldrb	r3, [r0, #0]
 8006470:	2b30      	cmp	r3, #48	@ 0x30
 8006472:	d10a      	bne.n	800648a <__cvt+0xba>
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	f7fa fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006480:	b918      	cbnz	r0, 800648a <__cvt+0xba>
 8006482:	f1c4 0401 	rsb	r4, r4, #1
 8006486:	f8ca 4000 	str.w	r4, [sl]
 800648a:	f8da 3000 	ldr.w	r3, [sl]
 800648e:	4499      	add	r9, r3
 8006490:	e7d3      	b.n	800643a <__cvt+0x6a>
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	9103      	str	r1, [sp, #12]
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e7d9      	b.n	800644e <__cvt+0x7e>

0800649a <__exponent>:
 800649a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649c:	2900      	cmp	r1, #0
 800649e:	bfba      	itte	lt
 80064a0:	4249      	neglt	r1, r1
 80064a2:	232d      	movlt	r3, #45	@ 0x2d
 80064a4:	232b      	movge	r3, #43	@ 0x2b
 80064a6:	2909      	cmp	r1, #9
 80064a8:	7002      	strb	r2, [r0, #0]
 80064aa:	7043      	strb	r3, [r0, #1]
 80064ac:	dd29      	ble.n	8006502 <__exponent+0x68>
 80064ae:	f10d 0307 	add.w	r3, sp, #7
 80064b2:	461d      	mov	r5, r3
 80064b4:	270a      	movs	r7, #10
 80064b6:	461a      	mov	r2, r3
 80064b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80064bc:	fb07 1416 	mls	r4, r7, r6, r1
 80064c0:	3430      	adds	r4, #48	@ 0x30
 80064c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064c6:	460c      	mov	r4, r1
 80064c8:	2c63      	cmp	r4, #99	@ 0x63
 80064ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ce:	4631      	mov	r1, r6
 80064d0:	dcf1      	bgt.n	80064b6 <__exponent+0x1c>
 80064d2:	3130      	adds	r1, #48	@ 0x30
 80064d4:	1e94      	subs	r4, r2, #2
 80064d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064da:	1c41      	adds	r1, r0, #1
 80064dc:	4623      	mov	r3, r4
 80064de:	42ab      	cmp	r3, r5
 80064e0:	d30a      	bcc.n	80064f8 <__exponent+0x5e>
 80064e2:	f10d 0309 	add.w	r3, sp, #9
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	42ac      	cmp	r4, r5
 80064ea:	bf88      	it	hi
 80064ec:	2300      	movhi	r3, #0
 80064ee:	3302      	adds	r3, #2
 80064f0:	4403      	add	r3, r0
 80064f2:	1a18      	subs	r0, r3, r0
 80064f4:	b003      	add	sp, #12
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006500:	e7ed      	b.n	80064de <__exponent+0x44>
 8006502:	2330      	movs	r3, #48	@ 0x30
 8006504:	3130      	adds	r1, #48	@ 0x30
 8006506:	7083      	strb	r3, [r0, #2]
 8006508:	70c1      	strb	r1, [r0, #3]
 800650a:	1d03      	adds	r3, r0, #4
 800650c:	e7f1      	b.n	80064f2 <__exponent+0x58>
	...

08006510 <_printf_float>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	b08d      	sub	sp, #52	@ 0x34
 8006516:	460c      	mov	r4, r1
 8006518:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800651c:	4616      	mov	r6, r2
 800651e:	461f      	mov	r7, r3
 8006520:	4605      	mov	r5, r0
 8006522:	f000 ffed 	bl	8007500 <_localeconv_r>
 8006526:	6803      	ldr	r3, [r0, #0]
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	4618      	mov	r0, r3
 800652c:	f7f9 fea0 	bl	8000270 <strlen>
 8006530:	2300      	movs	r3, #0
 8006532:	930a      	str	r3, [sp, #40]	@ 0x28
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	9005      	str	r0, [sp, #20]
 800653a:	3307      	adds	r3, #7
 800653c:	f023 0307 	bic.w	r3, r3, #7
 8006540:	f103 0208 	add.w	r2, r3, #8
 8006544:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006548:	f8d4 b000 	ldr.w	fp, [r4]
 800654c:	f8c8 2000 	str.w	r2, [r8]
 8006550:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006554:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	f8cd 8018 	str.w	r8, [sp, #24]
 800655e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006566:	4b9c      	ldr	r3, [pc, #624]	@ (80067d8 <_printf_float+0x2c8>)
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	f7fa fade 	bl	8000b2c <__aeabi_dcmpun>
 8006570:	bb70      	cbnz	r0, 80065d0 <_printf_float+0xc0>
 8006572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006576:	4b98      	ldr	r3, [pc, #608]	@ (80067d8 <_printf_float+0x2c8>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	f7fa fab8 	bl	8000af0 <__aeabi_dcmple>
 8006580:	bb30      	cbnz	r0, 80065d0 <_printf_float+0xc0>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa faa7 	bl	8000adc <__aeabi_dcmplt>
 800658e:	b110      	cbz	r0, 8006596 <_printf_float+0x86>
 8006590:	232d      	movs	r3, #45	@ 0x2d
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006596:	4a91      	ldr	r2, [pc, #580]	@ (80067dc <_printf_float+0x2cc>)
 8006598:	4b91      	ldr	r3, [pc, #580]	@ (80067e0 <_printf_float+0x2d0>)
 800659a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800659e:	bf8c      	ite	hi
 80065a0:	4690      	movhi	r8, r2
 80065a2:	4698      	movls	r8, r3
 80065a4:	2303      	movs	r3, #3
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f02b 0304 	bic.w	r3, fp, #4
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	9700      	str	r7, [sp, #0]
 80065b4:	4633      	mov	r3, r6
 80065b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f9d2 	bl	8006964 <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f040 808d 	bne.w	80066e0 <_printf_float+0x1d0>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	b00d      	add	sp, #52	@ 0x34
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa faa8 	bl	8000b2c <__aeabi_dcmpun>
 80065dc:	b140      	cbz	r0, 80065f0 <_printf_float+0xe0>
 80065de:	464b      	mov	r3, r9
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfbc      	itt	lt
 80065e4:	232d      	movlt	r3, #45	@ 0x2d
 80065e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065ea:	4a7e      	ldr	r2, [pc, #504]	@ (80067e4 <_printf_float+0x2d4>)
 80065ec:	4b7e      	ldr	r3, [pc, #504]	@ (80067e8 <_printf_float+0x2d8>)
 80065ee:	e7d4      	b.n	800659a <_printf_float+0x8a>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	d13b      	bne.n	8006674 <_printf_float+0x164>
 80065fc:	2306      	movs	r3, #6
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006604:	2300      	movs	r3, #0
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	ab0a      	add	r3, sp, #40	@ 0x28
 800660c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006610:	ab09      	add	r3, sp, #36	@ 0x24
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	ec49 8b10 	vmov	d0, r8, r9
 800661a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800661e:	4628      	mov	r0, r5
 8006620:	f7ff fed6 	bl	80063d0 <__cvt>
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006628:	2b47      	cmp	r3, #71	@ 0x47
 800662a:	4680      	mov	r8, r0
 800662c:	d129      	bne.n	8006682 <_printf_float+0x172>
 800662e:	1cc8      	adds	r0, r1, #3
 8006630:	db02      	blt.n	8006638 <_printf_float+0x128>
 8006632:	6863      	ldr	r3, [r4, #4]
 8006634:	4299      	cmp	r1, r3
 8006636:	dd41      	ble.n	80066bc <_printf_float+0x1ac>
 8006638:	f1aa 0a02 	sub.w	sl, sl, #2
 800663c:	fa5f fa8a 	uxtb.w	sl, sl
 8006640:	3901      	subs	r1, #1
 8006642:	4652      	mov	r2, sl
 8006644:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006648:	9109      	str	r1, [sp, #36]	@ 0x24
 800664a:	f7ff ff26 	bl	800649a <__exponent>
 800664e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006650:	1813      	adds	r3, r2, r0
 8006652:	2a01      	cmp	r2, #1
 8006654:	4681      	mov	r9, r0
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	dc02      	bgt.n	8006660 <_printf_float+0x150>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d2      	lsls	r2, r2, #31
 800665e:	d501      	bpl.n	8006664 <_printf_float+0x154>
 8006660:	3301      	adds	r3, #1
 8006662:	6123      	str	r3, [r4, #16]
 8006664:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0a2      	beq.n	80065b2 <_printf_float+0xa2>
 800666c:	232d      	movs	r3, #45	@ 0x2d
 800666e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006672:	e79e      	b.n	80065b2 <_printf_float+0xa2>
 8006674:	9a06      	ldr	r2, [sp, #24]
 8006676:	2a47      	cmp	r2, #71	@ 0x47
 8006678:	d1c2      	bne.n	8006600 <_printf_float+0xf0>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1c0      	bne.n	8006600 <_printf_float+0xf0>
 800667e:	2301      	movs	r3, #1
 8006680:	e7bd      	b.n	80065fe <_printf_float+0xee>
 8006682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006686:	d9db      	bls.n	8006640 <_printf_float+0x130>
 8006688:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800668c:	d118      	bne.n	80066c0 <_printf_float+0x1b0>
 800668e:	2900      	cmp	r1, #0
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	dd0b      	ble.n	80066ac <_printf_float+0x19c>
 8006694:	6121      	str	r1, [r4, #16]
 8006696:	b913      	cbnz	r3, 800669e <_printf_float+0x18e>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	07d0      	lsls	r0, r2, #31
 800669c:	d502      	bpl.n	80066a4 <_printf_float+0x194>
 800669e:	3301      	adds	r3, #1
 80066a0:	440b      	add	r3, r1
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066a6:	f04f 0900 	mov.w	r9, #0
 80066aa:	e7db      	b.n	8006664 <_printf_float+0x154>
 80066ac:	b913      	cbnz	r3, 80066b4 <_printf_float+0x1a4>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	07d2      	lsls	r2, r2, #31
 80066b2:	d501      	bpl.n	80066b8 <_printf_float+0x1a8>
 80066b4:	3302      	adds	r3, #2
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x192>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e7f2      	b.n	80066a2 <_printf_float+0x192>
 80066bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c2:	4299      	cmp	r1, r3
 80066c4:	db05      	blt.n	80066d2 <_printf_float+0x1c2>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	6121      	str	r1, [r4, #16]
 80066ca:	07d8      	lsls	r0, r3, #31
 80066cc:	d5ea      	bpl.n	80066a4 <_printf_float+0x194>
 80066ce:	1c4b      	adds	r3, r1, #1
 80066d0:	e7e7      	b.n	80066a2 <_printf_float+0x192>
 80066d2:	2900      	cmp	r1, #0
 80066d4:	bfd4      	ite	le
 80066d6:	f1c1 0202 	rsble	r2, r1, #2
 80066da:	2201      	movgt	r2, #1
 80066dc:	4413      	add	r3, r2
 80066de:	e7e0      	b.n	80066a2 <_printf_float+0x192>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	055a      	lsls	r2, r3, #21
 80066e4:	d407      	bmi.n	80066f6 <_printf_float+0x1e6>
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	4642      	mov	r2, r8
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	d12b      	bne.n	800674c <_printf_float+0x23c>
 80066f4:	e767      	b.n	80065c6 <_printf_float+0xb6>
 80066f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066fa:	f240 80dd 	bls.w	80068b8 <_printf_float+0x3a8>
 80066fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	f7fa f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800670a:	2800      	cmp	r0, #0
 800670c:	d033      	beq.n	8006776 <_printf_float+0x266>
 800670e:	4a37      	ldr	r2, [pc, #220]	@ (80067ec <_printf_float+0x2dc>)
 8006710:	2301      	movs	r3, #1
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f af54 	beq.w	80065c6 <_printf_float+0xb6>
 800671e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006722:	4543      	cmp	r3, r8
 8006724:	db02      	blt.n	800672c <_printf_float+0x21c>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	07d8      	lsls	r0, r3, #31
 800672a:	d50f      	bpl.n	800674c <_printf_float+0x23c>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af45 	beq.w	80065c6 <_printf_float+0xb6>
 800673c:	f04f 0900 	mov.w	r9, #0
 8006740:	f108 38ff 	add.w	r8, r8, #4294967295
 8006744:	f104 0a1a 	add.w	sl, r4, #26
 8006748:	45c8      	cmp	r8, r9
 800674a:	dc09      	bgt.n	8006760 <_printf_float+0x250>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	079b      	lsls	r3, r3, #30
 8006750:	f100 8103 	bmi.w	800695a <_printf_float+0x44a>
 8006754:	68e0      	ldr	r0, [r4, #12]
 8006756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006758:	4298      	cmp	r0, r3
 800675a:	bfb8      	it	lt
 800675c:	4618      	movlt	r0, r3
 800675e:	e734      	b.n	80065ca <_printf_float+0xba>
 8006760:	2301      	movs	r3, #1
 8006762:	4652      	mov	r2, sl
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f af2b 	beq.w	80065c6 <_printf_float+0xb6>
 8006770:	f109 0901 	add.w	r9, r9, #1
 8006774:	e7e8      	b.n	8006748 <_printf_float+0x238>
 8006776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc39      	bgt.n	80067f0 <_printf_float+0x2e0>
 800677c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ec <_printf_float+0x2dc>)
 800677e:	2301      	movs	r3, #1
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af1d 	beq.w	80065c6 <_printf_float+0xb6>
 800678c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006790:	ea59 0303 	orrs.w	r3, r9, r3
 8006794:	d102      	bne.n	800679c <_printf_float+0x28c>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	07d9      	lsls	r1, r3, #31
 800679a:	d5d7      	bpl.n	800674c <_printf_float+0x23c>
 800679c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af0d 	beq.w	80065c6 <_printf_float+0xb6>
 80067ac:	f04f 0a00 	mov.w	sl, #0
 80067b0:	f104 0b1a 	add.w	fp, r4, #26
 80067b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b6:	425b      	negs	r3, r3
 80067b8:	4553      	cmp	r3, sl
 80067ba:	dc01      	bgt.n	80067c0 <_printf_float+0x2b0>
 80067bc:	464b      	mov	r3, r9
 80067be:	e793      	b.n	80066e8 <_printf_float+0x1d8>
 80067c0:	2301      	movs	r3, #1
 80067c2:	465a      	mov	r2, fp
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f aefb 	beq.w	80065c6 <_printf_float+0xb6>
 80067d0:	f10a 0a01 	add.w	sl, sl, #1
 80067d4:	e7ee      	b.n	80067b4 <_printf_float+0x2a4>
 80067d6:	bf00      	nop
 80067d8:	7fefffff 	.word	0x7fefffff
 80067dc:	0800acb4 	.word	0x0800acb4
 80067e0:	0800acb0 	.word	0x0800acb0
 80067e4:	0800acbc 	.word	0x0800acbc
 80067e8:	0800acb8 	.word	0x0800acb8
 80067ec:	0800acc0 	.word	0x0800acc0
 80067f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067f6:	4553      	cmp	r3, sl
 80067f8:	bfa8      	it	ge
 80067fa:	4653      	movge	r3, sl
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	4699      	mov	r9, r3
 8006800:	dc36      	bgt.n	8006870 <_printf_float+0x360>
 8006802:	f04f 0b00 	mov.w	fp, #0
 8006806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800680a:	f104 021a 	add.w	r2, r4, #26
 800680e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	eba3 0309 	sub.w	r3, r3, r9
 8006816:	455b      	cmp	r3, fp
 8006818:	dc31      	bgt.n	800687e <_printf_float+0x36e>
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	459a      	cmp	sl, r3
 800681e:	dc3a      	bgt.n	8006896 <_printf_float+0x386>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07da      	lsls	r2, r3, #31
 8006824:	d437      	bmi.n	8006896 <_printf_float+0x386>
 8006826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006828:	ebaa 0903 	sub.w	r9, sl, r3
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	ebaa 0303 	sub.w	r3, sl, r3
 8006832:	4599      	cmp	r9, r3
 8006834:	bfa8      	it	ge
 8006836:	4699      	movge	r9, r3
 8006838:	f1b9 0f00 	cmp.w	r9, #0
 800683c:	dc33      	bgt.n	80068a6 <_printf_float+0x396>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006846:	f104 0b1a 	add.w	fp, r4, #26
 800684a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684c:	ebaa 0303 	sub.w	r3, sl, r3
 8006850:	eba3 0309 	sub.w	r3, r3, r9
 8006854:	4543      	cmp	r3, r8
 8006856:	f77f af79 	ble.w	800674c <_printf_float+0x23c>
 800685a:	2301      	movs	r3, #1
 800685c:	465a      	mov	r2, fp
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f aeae 	beq.w	80065c6 <_printf_float+0xb6>
 800686a:	f108 0801 	add.w	r8, r8, #1
 800686e:	e7ec      	b.n	800684a <_printf_float+0x33a>
 8006870:	4642      	mov	r2, r8
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	d1c2      	bne.n	8006802 <_printf_float+0x2f2>
 800687c:	e6a3      	b.n	80065c6 <_printf_float+0xb6>
 800687e:	2301      	movs	r3, #1
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	9206      	str	r2, [sp, #24]
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae9c 	beq.w	80065c6 <_printf_float+0xb6>
 800688e:	9a06      	ldr	r2, [sp, #24]
 8006890:	f10b 0b01 	add.w	fp, fp, #1
 8006894:	e7bb      	b.n	800680e <_printf_float+0x2fe>
 8006896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d1c0      	bne.n	8006826 <_printf_float+0x316>
 80068a4:	e68f      	b.n	80065c6 <_printf_float+0xb6>
 80068a6:	9a06      	ldr	r2, [sp, #24]
 80068a8:	464b      	mov	r3, r9
 80068aa:	4442      	add	r2, r8
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	d1c3      	bne.n	800683e <_printf_float+0x32e>
 80068b6:	e686      	b.n	80065c6 <_printf_float+0xb6>
 80068b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068bc:	f1ba 0f01 	cmp.w	sl, #1
 80068c0:	dc01      	bgt.n	80068c6 <_printf_float+0x3b6>
 80068c2:	07db      	lsls	r3, r3, #31
 80068c4:	d536      	bpl.n	8006934 <_printf_float+0x424>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4642      	mov	r2, r8
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f ae78 	beq.w	80065c6 <_printf_float+0xb6>
 80068d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae70 	beq.w	80065c6 <_printf_float+0xb6>
 80068e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068ea:	2200      	movs	r2, #0
 80068ec:	2300      	movs	r3, #0
 80068ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068f2:	f7fa f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f6:	b9c0      	cbnz	r0, 800692a <_printf_float+0x41a>
 80068f8:	4653      	mov	r3, sl
 80068fa:	f108 0201 	add.w	r2, r8, #1
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d10c      	bne.n	8006922 <_printf_float+0x412>
 8006908:	e65d      	b.n	80065c6 <_printf_float+0xb6>
 800690a:	2301      	movs	r3, #1
 800690c:	465a      	mov	r2, fp
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae56 	beq.w	80065c6 <_printf_float+0xb6>
 800691a:	f108 0801 	add.w	r8, r8, #1
 800691e:	45d0      	cmp	r8, sl
 8006920:	dbf3      	blt.n	800690a <_printf_float+0x3fa>
 8006922:	464b      	mov	r3, r9
 8006924:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006928:	e6df      	b.n	80066ea <_printf_float+0x1da>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	f104 0b1a 	add.w	fp, r4, #26
 8006932:	e7f4      	b.n	800691e <_printf_float+0x40e>
 8006934:	2301      	movs	r3, #1
 8006936:	4642      	mov	r2, r8
 8006938:	e7e1      	b.n	80068fe <_printf_float+0x3ee>
 800693a:	2301      	movs	r3, #1
 800693c:	464a      	mov	r2, r9
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae3e 	beq.w	80065c6 <_printf_float+0xb6>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006952:	1a5b      	subs	r3, r3, r1
 8006954:	4543      	cmp	r3, r8
 8006956:	dcf0      	bgt.n	800693a <_printf_float+0x42a>
 8006958:	e6fc      	b.n	8006754 <_printf_float+0x244>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	f104 0919 	add.w	r9, r4, #25
 8006962:	e7f4      	b.n	800694e <_printf_float+0x43e>

08006964 <_printf_common>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	4616      	mov	r6, r2
 800696a:	4698      	mov	r8, r3
 800696c:	688a      	ldr	r2, [r1, #8]
 800696e:	690b      	ldr	r3, [r1, #16]
 8006970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006974:	4293      	cmp	r3, r2
 8006976:	bfb8      	it	lt
 8006978:	4613      	movlt	r3, r2
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006980:	4607      	mov	r7, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b10a      	cbz	r2, 800698a <_printf_common+0x26>
 8006986:	3301      	adds	r3, #1
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	0699      	lsls	r1, r3, #26
 800698e:	bf42      	ittt	mi
 8006990:	6833      	ldrmi	r3, [r6, #0]
 8006992:	3302      	addmi	r3, #2
 8006994:	6033      	strmi	r3, [r6, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	f015 0506 	ands.w	r5, r5, #6
 800699c:	d106      	bne.n	80069ac <_printf_common+0x48>
 800699e:	f104 0a19 	add.w	sl, r4, #25
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	6832      	ldr	r2, [r6, #0]
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	dc26      	bgt.n	80069fa <_printf_common+0x96>
 80069ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	3b00      	subs	r3, #0
 80069b4:	bf18      	it	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	0692      	lsls	r2, r2, #26
 80069ba:	d42b      	bmi.n	8006a14 <_printf_common+0xb0>
 80069bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069c0:	4641      	mov	r1, r8
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c8      	blx	r9
 80069c6:	3001      	adds	r0, #1
 80069c8:	d01e      	beq.n	8006a08 <_printf_common+0xa4>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6922      	ldr	r2, [r4, #16]
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	bf02      	ittt	eq
 80069d6:	68e5      	ldreq	r5, [r4, #12]
 80069d8:	6833      	ldreq	r3, [r6, #0]
 80069da:	1aed      	subeq	r5, r5, r3
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	bf0c      	ite	eq
 80069e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e4:	2500      	movne	r5, #0
 80069e6:	4293      	cmp	r3, r2
 80069e8:	bfc4      	itt	gt
 80069ea:	1a9b      	subgt	r3, r3, r2
 80069ec:	18ed      	addgt	r5, r5, r3
 80069ee:	2600      	movs	r6, #0
 80069f0:	341a      	adds	r4, #26
 80069f2:	42b5      	cmp	r5, r6
 80069f4:	d11a      	bne.n	8006a2c <_printf_common+0xc8>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e008      	b.n	8006a0c <_printf_common+0xa8>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4652      	mov	r2, sl
 80069fe:	4641      	mov	r1, r8
 8006a00:	4638      	mov	r0, r7
 8006a02:	47c8      	blx	r9
 8006a04:	3001      	adds	r0, #1
 8006a06:	d103      	bne.n	8006a10 <_printf_common+0xac>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7c6      	b.n	80069a2 <_printf_common+0x3e>
 8006a14:	18e1      	adds	r1, r4, r3
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	2030      	movs	r0, #48	@ 0x30
 8006a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a1e:	4422      	add	r2, r4
 8006a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a28:	3302      	adds	r3, #2
 8006a2a:	e7c7      	b.n	80069bc <_printf_common+0x58>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4641      	mov	r1, r8
 8006a32:	4638      	mov	r0, r7
 8006a34:	47c8      	blx	r9
 8006a36:	3001      	adds	r0, #1
 8006a38:	d0e6      	beq.n	8006a08 <_printf_common+0xa4>
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7d9      	b.n	80069f2 <_printf_common+0x8e>
	...

08006a40 <_printf_i>:
 8006a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	7e0f      	ldrb	r7, [r1, #24]
 8006a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a48:	2f78      	cmp	r7, #120	@ 0x78
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	469a      	mov	sl, r3
 8006a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a56:	d807      	bhi.n	8006a68 <_printf_i+0x28>
 8006a58:	2f62      	cmp	r7, #98	@ 0x62
 8006a5a:	d80a      	bhi.n	8006a72 <_printf_i+0x32>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	f000 80d1 	beq.w	8006c04 <_printf_i+0x1c4>
 8006a62:	2f58      	cmp	r7, #88	@ 0x58
 8006a64:	f000 80b8 	beq.w	8006bd8 <_printf_i+0x198>
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a70:	e03a      	b.n	8006ae8 <_printf_i+0xa8>
 8006a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a76:	2b15      	cmp	r3, #21
 8006a78:	d8f6      	bhi.n	8006a68 <_printf_i+0x28>
 8006a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a80 <_printf_i+0x40>)
 8006a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006a69 	.word	0x08006a69
 8006a8c:	08006a69 	.word	0x08006a69
 8006a90:	08006a69 	.word	0x08006a69
 8006a94:	08006a69 	.word	0x08006a69
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006a69 	.word	0x08006a69
 8006aa0:	08006a69 	.word	0x08006a69
 8006aa4:	08006a69 	.word	0x08006a69
 8006aa8:	08006a69 	.word	0x08006a69
 8006aac:	08006beb 	.word	0x08006beb
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006ba5 	.word	0x08006ba5
 8006ab8:	08006a69 	.word	0x08006a69
 8006abc:	08006a69 	.word	0x08006a69
 8006ac0:	08006c0d 	.word	0x08006c0d
 8006ac4:	08006a69 	.word	0x08006a69
 8006ac8:	08006b17 	.word	0x08006b17
 8006acc:	08006a69 	.word	0x08006a69
 8006ad0:	08006a69 	.word	0x08006a69
 8006ad4:	08006bad 	.word	0x08006bad
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e09c      	b.n	8006c26 <_printf_i+0x1e6>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	6031      	str	r1, [r6, #0]
 8006af4:	0606      	lsls	r6, r0, #24
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0xbc>
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	e003      	b.n	8006b04 <_printf_i+0xc4>
 8006afc:	0645      	lsls	r5, r0, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0xb8>
 8006b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	da03      	bge.n	8006b10 <_printf_i+0xd0>
 8006b08:	232d      	movs	r3, #45	@ 0x2d
 8006b0a:	426d      	negs	r5, r5
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b10:	4858      	ldr	r0, [pc, #352]	@ (8006c74 <_printf_i+0x234>)
 8006b12:	230a      	movs	r3, #10
 8006b14:	e011      	b.n	8006b3a <_printf_i+0xfa>
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	0608      	lsls	r0, r1, #24
 8006b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0xe8>
 8006b22:	0649      	lsls	r1, r1, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b2a:	4852      	ldr	r0, [pc, #328]	@ (8006c74 <_printf_i+0x234>)
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	bf14      	ite	ne
 8006b30:	230a      	movne	r3, #10
 8006b32:	2308      	moveq	r3, #8
 8006b34:	2100      	movs	r1, #0
 8006b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b3a:	6866      	ldr	r6, [r4, #4]
 8006b3c:	60a6      	str	r6, [r4, #8]
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	db05      	blt.n	8006b4e <_printf_i+0x10e>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	432e      	orrs	r6, r5
 8006b46:	f021 0104 	bic.w	r1, r1, #4
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	d04b      	beq.n	8006be6 <_printf_i+0x1a6>
 8006b4e:	4616      	mov	r6, r2
 8006b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b54:	fb03 5711 	mls	r7, r3, r1, r5
 8006b58:	5dc7      	ldrb	r7, [r0, r7]
 8006b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b5e:	462f      	mov	r7, r5
 8006b60:	42bb      	cmp	r3, r7
 8006b62:	460d      	mov	r5, r1
 8006b64:	d9f4      	bls.n	8006b50 <_printf_i+0x110>
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d10b      	bne.n	8006b82 <_printf_i+0x142>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	07df      	lsls	r7, r3, #31
 8006b6e:	d508      	bpl.n	8006b82 <_printf_i+0x142>
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	6861      	ldr	r1, [r4, #4]
 8006b74:	4299      	cmp	r1, r3
 8006b76:	bfde      	ittt	le
 8006b78:	2330      	movle	r3, #48	@ 0x30
 8006b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b82:	1b92      	subs	r2, r2, r6
 8006b84:	6122      	str	r2, [r4, #16]
 8006b86:	f8cd a000 	str.w	sl, [sp]
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	aa03      	add	r2, sp, #12
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4640      	mov	r0, r8
 8006b92:	f7ff fee7 	bl	8006964 <_printf_common>
 8006b96:	3001      	adds	r0, #1
 8006b98:	d14a      	bne.n	8006c30 <_printf_i+0x1f0>
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	b004      	add	sp, #16
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	f043 0320 	orr.w	r3, r3, #32
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	4832      	ldr	r0, [pc, #200]	@ (8006c78 <_printf_i+0x238>)
 8006bae:	2778      	movs	r7, #120	@ 0x78
 8006bb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	6831      	ldr	r1, [r6, #0]
 8006bb8:	061f      	lsls	r7, r3, #24
 8006bba:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bbe:	d402      	bmi.n	8006bc6 <_printf_i+0x186>
 8006bc0:	065f      	lsls	r7, r3, #25
 8006bc2:	bf48      	it	mi
 8006bc4:	b2ad      	uxthmi	r5, r5
 8006bc6:	6031      	str	r1, [r6, #0]
 8006bc8:	07d9      	lsls	r1, r3, #31
 8006bca:	bf44      	itt	mi
 8006bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd0:	6023      	strmi	r3, [r4, #0]
 8006bd2:	b11d      	cbz	r5, 8006bdc <_printf_i+0x19c>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	e7ad      	b.n	8006b34 <_printf_i+0xf4>
 8006bd8:	4826      	ldr	r0, [pc, #152]	@ (8006c74 <_printf_i+0x234>)
 8006bda:	e7e9      	b.n	8006bb0 <_printf_i+0x170>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	f023 0320 	bic.w	r3, r3, #32
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	e7f6      	b.n	8006bd4 <_printf_i+0x194>
 8006be6:	4616      	mov	r6, r2
 8006be8:	e7bd      	b.n	8006b66 <_printf_i+0x126>
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	6825      	ldr	r5, [r4, #0]
 8006bee:	6961      	ldr	r1, [r4, #20]
 8006bf0:	1d18      	adds	r0, r3, #4
 8006bf2:	6030      	str	r0, [r6, #0]
 8006bf4:	062e      	lsls	r6, r5, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	d501      	bpl.n	8006bfe <_printf_i+0x1be>
 8006bfa:	6019      	str	r1, [r3, #0]
 8006bfc:	e002      	b.n	8006c04 <_printf_i+0x1c4>
 8006bfe:	0668      	lsls	r0, r5, #25
 8006c00:	d5fb      	bpl.n	8006bfa <_printf_i+0x1ba>
 8006c02:	8019      	strh	r1, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	4616      	mov	r6, r2
 8006c0a:	e7bc      	b.n	8006b86 <_printf_i+0x146>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	6032      	str	r2, [r6, #0]
 8006c12:	681e      	ldr	r6, [r3, #0]
 8006c14:	6862      	ldr	r2, [r4, #4]
 8006c16:	2100      	movs	r1, #0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7f9 fad9 	bl	80001d0 <memchr>
 8006c1e:	b108      	cbz	r0, 8006c24 <_printf_i+0x1e4>
 8006c20:	1b80      	subs	r0, r0, r6
 8006c22:	6060      	str	r0, [r4, #4]
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2e:	e7aa      	b.n	8006b86 <_printf_i+0x146>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	4632      	mov	r2, r6
 8006c34:	4649      	mov	r1, r9
 8006c36:	4640      	mov	r0, r8
 8006c38:	47d0      	blx	sl
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d0ad      	beq.n	8006b9a <_printf_i+0x15a>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	079b      	lsls	r3, r3, #30
 8006c42:	d413      	bmi.n	8006c6c <_printf_i+0x22c>
 8006c44:	68e0      	ldr	r0, [r4, #12]
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	4298      	cmp	r0, r3
 8006c4a:	bfb8      	it	lt
 8006c4c:	4618      	movlt	r0, r3
 8006c4e:	e7a6      	b.n	8006b9e <_printf_i+0x15e>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4632      	mov	r2, r6
 8006c54:	4649      	mov	r1, r9
 8006c56:	4640      	mov	r0, r8
 8006c58:	47d0      	blx	sl
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d09d      	beq.n	8006b9a <_printf_i+0x15a>
 8006c5e:	3501      	adds	r5, #1
 8006c60:	68e3      	ldr	r3, [r4, #12]
 8006c62:	9903      	ldr	r1, [sp, #12]
 8006c64:	1a5b      	subs	r3, r3, r1
 8006c66:	42ab      	cmp	r3, r5
 8006c68:	dcf2      	bgt.n	8006c50 <_printf_i+0x210>
 8006c6a:	e7eb      	b.n	8006c44 <_printf_i+0x204>
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	f104 0619 	add.w	r6, r4, #25
 8006c72:	e7f5      	b.n	8006c60 <_printf_i+0x220>
 8006c74:	0800acc2 	.word	0x0800acc2
 8006c78:	0800acd3 	.word	0x0800acd3

08006c7c <_scanf_float>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	b087      	sub	sp, #28
 8006c82:	4691      	mov	r9, r2
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	688b      	ldr	r3, [r1, #8]
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c8e:	bf81      	itttt	hi
 8006c90:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c94:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c98:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c9c:	608b      	strhi	r3, [r1, #8]
 8006c9e:	680b      	ldr	r3, [r1, #0]
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	f04f 0500 	mov.w	r5, #0
 8006ca6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006caa:	f842 3b1c 	str.w	r3, [r2], #28
 8006cae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	bf98      	it	ls
 8006cb8:	f04f 0b00 	movls.w	fp, #0
 8006cbc:	9201      	str	r2, [sp, #4]
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	46aa      	mov	sl, r5
 8006cc2:	462f      	mov	r7, r5
 8006cc4:	9502      	str	r5, [sp, #8]
 8006cc6:	68a2      	ldr	r2, [r4, #8]
 8006cc8:	b15a      	cbz	r2, 8006ce2 <_scanf_float+0x66>
 8006cca:	f8d9 3000 	ldr.w	r3, [r9]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cd2:	d863      	bhi.n	8006d9c <_scanf_float+0x120>
 8006cd4:	2b40      	cmp	r3, #64	@ 0x40
 8006cd6:	d83b      	bhi.n	8006d50 <_scanf_float+0xd4>
 8006cd8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006cdc:	b2c8      	uxtb	r0, r1
 8006cde:	280e      	cmp	r0, #14
 8006ce0:	d939      	bls.n	8006d56 <_scanf_float+0xda>
 8006ce2:	b11f      	cbz	r7, 8006cec <_scanf_float+0x70>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf0:	f1ba 0f01 	cmp.w	sl, #1
 8006cf4:	f200 8114 	bhi.w	8006f20 <_scanf_float+0x2a4>
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	429e      	cmp	r6, r3
 8006cfc:	f200 8105 	bhi.w	8006f0a <_scanf_float+0x28e>
 8006d00:	2001      	movs	r0, #1
 8006d02:	b007      	add	sp, #28
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d0c:	2a0d      	cmp	r2, #13
 8006d0e:	d8e8      	bhi.n	8006ce2 <_scanf_float+0x66>
 8006d10:	a101      	add	r1, pc, #4	@ (adr r1, 8006d18 <_scanf_float+0x9c>)
 8006d12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006e61 	.word	0x08006e61
 8006d1c:	08006ce3 	.word	0x08006ce3
 8006d20:	08006ce3 	.word	0x08006ce3
 8006d24:	08006ce3 	.word	0x08006ce3
 8006d28:	08006ebd 	.word	0x08006ebd
 8006d2c:	08006e97 	.word	0x08006e97
 8006d30:	08006ce3 	.word	0x08006ce3
 8006d34:	08006ce3 	.word	0x08006ce3
 8006d38:	08006e6f 	.word	0x08006e6f
 8006d3c:	08006ce3 	.word	0x08006ce3
 8006d40:	08006ce3 	.word	0x08006ce3
 8006d44:	08006ce3 	.word	0x08006ce3
 8006d48:	08006ce3 	.word	0x08006ce3
 8006d4c:	08006e2b 	.word	0x08006e2b
 8006d50:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d54:	e7da      	b.n	8006d0c <_scanf_float+0x90>
 8006d56:	290e      	cmp	r1, #14
 8006d58:	d8c3      	bhi.n	8006ce2 <_scanf_float+0x66>
 8006d5a:	a001      	add	r0, pc, #4	@ (adr r0, 8006d60 <_scanf_float+0xe4>)
 8006d5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d60:	08006e1b 	.word	0x08006e1b
 8006d64:	08006ce3 	.word	0x08006ce3
 8006d68:	08006e1b 	.word	0x08006e1b
 8006d6c:	08006eab 	.word	0x08006eab
 8006d70:	08006ce3 	.word	0x08006ce3
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006e01 	.word	0x08006e01
 8006d7c:	08006e01 	.word	0x08006e01
 8006d80:	08006e01 	.word	0x08006e01
 8006d84:	08006e01 	.word	0x08006e01
 8006d88:	08006e01 	.word	0x08006e01
 8006d8c:	08006e01 	.word	0x08006e01
 8006d90:	08006e01 	.word	0x08006e01
 8006d94:	08006e01 	.word	0x08006e01
 8006d98:	08006e01 	.word	0x08006e01
 8006d9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d9e:	d809      	bhi.n	8006db4 <_scanf_float+0x138>
 8006da0:	2b60      	cmp	r3, #96	@ 0x60
 8006da2:	d8b1      	bhi.n	8006d08 <_scanf_float+0x8c>
 8006da4:	2b54      	cmp	r3, #84	@ 0x54
 8006da6:	d07b      	beq.n	8006ea0 <_scanf_float+0x224>
 8006da8:	2b59      	cmp	r3, #89	@ 0x59
 8006daa:	d19a      	bne.n	8006ce2 <_scanf_float+0x66>
 8006dac:	2d07      	cmp	r5, #7
 8006dae:	d198      	bne.n	8006ce2 <_scanf_float+0x66>
 8006db0:	2508      	movs	r5, #8
 8006db2:	e02f      	b.n	8006e14 <_scanf_float+0x198>
 8006db4:	2b74      	cmp	r3, #116	@ 0x74
 8006db6:	d073      	beq.n	8006ea0 <_scanf_float+0x224>
 8006db8:	2b79      	cmp	r3, #121	@ 0x79
 8006dba:	e7f6      	b.n	8006daa <_scanf_float+0x12e>
 8006dbc:	6821      	ldr	r1, [r4, #0]
 8006dbe:	05c8      	lsls	r0, r1, #23
 8006dc0:	d51e      	bpl.n	8006e00 <_scanf_float+0x184>
 8006dc2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006dc6:	6021      	str	r1, [r4, #0]
 8006dc8:	3701      	adds	r7, #1
 8006dca:	f1bb 0f00 	cmp.w	fp, #0
 8006dce:	d003      	beq.n	8006dd8 <_scanf_float+0x15c>
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dd6:	60a2      	str	r2, [r4, #8]
 8006dd8:	68a3      	ldr	r3, [r4, #8]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	3301      	adds	r3, #1
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f8c9 3004 	str.w	r3, [r9, #4]
 8006df0:	f340 8082 	ble.w	8006ef8 <_scanf_float+0x27c>
 8006df4:	f8d9 3000 	ldr.w	r3, [r9]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f8c9 3000 	str.w	r3, [r9]
 8006dfe:	e762      	b.n	8006cc6 <_scanf_float+0x4a>
 8006e00:	eb1a 0105 	adds.w	r1, sl, r5
 8006e04:	f47f af6d 	bne.w	8006ce2 <_scanf_float+0x66>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	460d      	mov	r5, r1
 8006e12:	468a      	mov	sl, r1
 8006e14:	f806 3b01 	strb.w	r3, [r6], #1
 8006e18:	e7de      	b.n	8006dd8 <_scanf_float+0x15c>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	0610      	lsls	r0, r2, #24
 8006e1e:	f57f af60 	bpl.w	8006ce2 <_scanf_float+0x66>
 8006e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	e7f4      	b.n	8006e14 <_scanf_float+0x198>
 8006e2a:	f1ba 0f00 	cmp.w	sl, #0
 8006e2e:	d10c      	bne.n	8006e4a <_scanf_float+0x1ce>
 8006e30:	b977      	cbnz	r7, 8006e50 <_scanf_float+0x1d4>
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e3c:	d108      	bne.n	8006e50 <_scanf_float+0x1d4>
 8006e3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f04f 0a01 	mov.w	sl, #1
 8006e48:	e7e4      	b.n	8006e14 <_scanf_float+0x198>
 8006e4a:	f1ba 0f02 	cmp.w	sl, #2
 8006e4e:	d050      	beq.n	8006ef2 <_scanf_float+0x276>
 8006e50:	2d01      	cmp	r5, #1
 8006e52:	d002      	beq.n	8006e5a <_scanf_float+0x1de>
 8006e54:	2d04      	cmp	r5, #4
 8006e56:	f47f af44 	bne.w	8006ce2 <_scanf_float+0x66>
 8006e5a:	3501      	adds	r5, #1
 8006e5c:	b2ed      	uxtb	r5, r5
 8006e5e:	e7d9      	b.n	8006e14 <_scanf_float+0x198>
 8006e60:	f1ba 0f01 	cmp.w	sl, #1
 8006e64:	f47f af3d 	bne.w	8006ce2 <_scanf_float+0x66>
 8006e68:	f04f 0a02 	mov.w	sl, #2
 8006e6c:	e7d2      	b.n	8006e14 <_scanf_float+0x198>
 8006e6e:	b975      	cbnz	r5, 8006e8e <_scanf_float+0x212>
 8006e70:	2f00      	cmp	r7, #0
 8006e72:	f47f af37 	bne.w	8006ce4 <_scanf_float+0x68>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e80:	f040 8103 	bne.w	800708a <_scanf_float+0x40e>
 8006e84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e88:	6022      	str	r2, [r4, #0]
 8006e8a:	2501      	movs	r5, #1
 8006e8c:	e7c2      	b.n	8006e14 <_scanf_float+0x198>
 8006e8e:	2d03      	cmp	r5, #3
 8006e90:	d0e3      	beq.n	8006e5a <_scanf_float+0x1de>
 8006e92:	2d05      	cmp	r5, #5
 8006e94:	e7df      	b.n	8006e56 <_scanf_float+0x1da>
 8006e96:	2d02      	cmp	r5, #2
 8006e98:	f47f af23 	bne.w	8006ce2 <_scanf_float+0x66>
 8006e9c:	2503      	movs	r5, #3
 8006e9e:	e7b9      	b.n	8006e14 <_scanf_float+0x198>
 8006ea0:	2d06      	cmp	r5, #6
 8006ea2:	f47f af1e 	bne.w	8006ce2 <_scanf_float+0x66>
 8006ea6:	2507      	movs	r5, #7
 8006ea8:	e7b4      	b.n	8006e14 <_scanf_float+0x198>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	0591      	lsls	r1, r2, #22
 8006eae:	f57f af18 	bpl.w	8006ce2 <_scanf_float+0x66>
 8006eb2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006eb6:	6022      	str	r2, [r4, #0]
 8006eb8:	9702      	str	r7, [sp, #8]
 8006eba:	e7ab      	b.n	8006e14 <_scanf_float+0x198>
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ec2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ec6:	d005      	beq.n	8006ed4 <_scanf_float+0x258>
 8006ec8:	0550      	lsls	r0, r2, #21
 8006eca:	f57f af0a 	bpl.w	8006ce2 <_scanf_float+0x66>
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	f000 80db 	beq.w	800708a <_scanf_float+0x40e>
 8006ed4:	0591      	lsls	r1, r2, #22
 8006ed6:	bf58      	it	pl
 8006ed8:	9902      	ldrpl	r1, [sp, #8]
 8006eda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ede:	bf58      	it	pl
 8006ee0:	1a79      	subpl	r1, r7, r1
 8006ee2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ee6:	bf58      	it	pl
 8006ee8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	2700      	movs	r7, #0
 8006ef0:	e790      	b.n	8006e14 <_scanf_float+0x198>
 8006ef2:	f04f 0a03 	mov.w	sl, #3
 8006ef6:	e78d      	b.n	8006e14 <_scanf_float+0x198>
 8006ef8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006efc:	4649      	mov	r1, r9
 8006efe:	4640      	mov	r0, r8
 8006f00:	4798      	blx	r3
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f aedf 	beq.w	8006cc6 <_scanf_float+0x4a>
 8006f08:	e6eb      	b.n	8006ce2 <_scanf_float+0x66>
 8006f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f12:	464a      	mov	r2, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	4798      	blx	r3
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6123      	str	r3, [r4, #16]
 8006f1e:	e6eb      	b.n	8006cf8 <_scanf_float+0x7c>
 8006f20:	1e6b      	subs	r3, r5, #1
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d824      	bhi.n	8006f70 <_scanf_float+0x2f4>
 8006f26:	2d02      	cmp	r5, #2
 8006f28:	d836      	bhi.n	8006f98 <_scanf_float+0x31c>
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	f67f aee7 	bls.w	8006d00 <_scanf_float+0x84>
 8006f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f3a:	464a      	mov	r2, r9
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	4798      	blx	r3
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	e7f0      	b.n	8006f2a <_scanf_float+0x2ae>
 8006f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f4c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f50:	464a      	mov	r2, r9
 8006f52:	4640      	mov	r0, r8
 8006f54:	4798      	blx	r3
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f60:	fa5f fa8a 	uxtb.w	sl, sl
 8006f64:	f1ba 0f02 	cmp.w	sl, #2
 8006f68:	d1ee      	bne.n	8006f48 <_scanf_float+0x2cc>
 8006f6a:	3d03      	subs	r5, #3
 8006f6c:	b2ed      	uxtb	r5, r5
 8006f6e:	1b76      	subs	r6, r6, r5
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	05da      	lsls	r2, r3, #23
 8006f74:	d530      	bpl.n	8006fd8 <_scanf_float+0x35c>
 8006f76:	055b      	lsls	r3, r3, #21
 8006f78:	d511      	bpl.n	8006f9e <_scanf_float+0x322>
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	429e      	cmp	r6, r3
 8006f7e:	f67f aebf 	bls.w	8006d00 <_scanf_float+0x84>
 8006f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f8a:	464a      	mov	r2, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4798      	blx	r3
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	e7f0      	b.n	8006f7a <_scanf_float+0x2fe>
 8006f98:	46aa      	mov	sl, r5
 8006f9a:	46b3      	mov	fp, r6
 8006f9c:	e7de      	b.n	8006f5c <_scanf_float+0x2e0>
 8006f9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	2965      	cmp	r1, #101	@ 0x65
 8006fa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006faa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	d00c      	beq.n	8006fcc <_scanf_float+0x350>
 8006fb2:	2945      	cmp	r1, #69	@ 0x45
 8006fb4:	d00a      	beq.n	8006fcc <_scanf_float+0x350>
 8006fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fba:	464a      	mov	r2, r9
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4798      	blx	r3
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	1eb5      	subs	r5, r6, #2
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fd0:	464a      	mov	r2, r9
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4798      	blx	r3
 8006fd6:	462e      	mov	r6, r5
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	f012 0210 	ands.w	r2, r2, #16
 8006fde:	d001      	beq.n	8006fe4 <_scanf_float+0x368>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e68e      	b.n	8006d02 <_scanf_float+0x86>
 8006fe4:	7032      	strb	r2, [r6, #0]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff0:	d125      	bne.n	800703e <_scanf_float+0x3c2>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	429f      	cmp	r7, r3
 8006ff6:	d00a      	beq.n	800700e <_scanf_float+0x392>
 8006ff8:	1bda      	subs	r2, r3, r7
 8006ffa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ffe:	429e      	cmp	r6, r3
 8007000:	bf28      	it	cs
 8007002:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007006:	4922      	ldr	r1, [pc, #136]	@ (8007090 <_scanf_float+0x414>)
 8007008:	4630      	mov	r0, r6
 800700a:	f000 f977 	bl	80072fc <siprintf>
 800700e:	9901      	ldr	r1, [sp, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	4640      	mov	r0, r8
 8007014:	f002 fcf8 	bl	8009a08 <_strtod_r>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	6821      	ldr	r1, [r4, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f011 0f02 	tst.w	r1, #2
 8007022:	ec57 6b10 	vmov	r6, r7, d0
 8007026:	f103 0204 	add.w	r2, r3, #4
 800702a:	d015      	beq.n	8007058 <_scanf_float+0x3dc>
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	600a      	str	r2, [r1, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	e9c3 6700 	strd	r6, r7, [r3]
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60e3      	str	r3, [r4, #12]
 800703c:	e7d0      	b.n	8006fe0 <_scanf_float+0x364>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0e4      	beq.n	800700e <_scanf_float+0x392>
 8007044:	9905      	ldr	r1, [sp, #20]
 8007046:	230a      	movs	r3, #10
 8007048:	3101      	adds	r1, #1
 800704a:	4640      	mov	r0, r8
 800704c:	f002 fd5c 	bl	8009b08 <_strtol_r>
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	9e05      	ldr	r6, [sp, #20]
 8007054:	1ac2      	subs	r2, r0, r3
 8007056:	e7d0      	b.n	8006ffa <_scanf_float+0x37e>
 8007058:	f011 0f04 	tst.w	r1, #4
 800705c:	9903      	ldr	r1, [sp, #12]
 800705e:	600a      	str	r2, [r1, #0]
 8007060:	d1e6      	bne.n	8007030 <_scanf_float+0x3b4>
 8007062:	681d      	ldr	r5, [r3, #0]
 8007064:	4632      	mov	r2, r6
 8007066:	463b      	mov	r3, r7
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8007070:	b128      	cbz	r0, 800707e <_scanf_float+0x402>
 8007072:	4808      	ldr	r0, [pc, #32]	@ (8007094 <_scanf_float+0x418>)
 8007074:	f000 fabc 	bl	80075f0 <nanf>
 8007078:	ed85 0a00 	vstr	s0, [r5]
 800707c:	e7db      	b.n	8007036 <_scanf_float+0x3ba>
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fdb1 	bl	8000be8 <__aeabi_d2f>
 8007086:	6028      	str	r0, [r5, #0]
 8007088:	e7d5      	b.n	8007036 <_scanf_float+0x3ba>
 800708a:	2700      	movs	r7, #0
 800708c:	e62e      	b.n	8006cec <_scanf_float+0x70>
 800708e:	bf00      	nop
 8007090:	0800ace4 	.word	0x0800ace4
 8007094:	0800ae25 	.word	0x0800ae25

08007098 <std>:
 8007098:	2300      	movs	r3, #0
 800709a:	b510      	push	{r4, lr}
 800709c:	4604      	mov	r4, r0
 800709e:	e9c0 3300 	strd	r3, r3, [r0]
 80070a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070a6:	6083      	str	r3, [r0, #8]
 80070a8:	8181      	strh	r1, [r0, #12]
 80070aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80070ac:	81c2      	strh	r2, [r0, #14]
 80070ae:	6183      	str	r3, [r0, #24]
 80070b0:	4619      	mov	r1, r3
 80070b2:	2208      	movs	r2, #8
 80070b4:	305c      	adds	r0, #92	@ 0x5c
 80070b6:	f000 fa1b 	bl	80074f0 <memset>
 80070ba:	4b0d      	ldr	r3, [pc, #52]	@ (80070f0 <std+0x58>)
 80070bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <std+0x5c>)
 80070c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <std+0x60>)
 80070c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070c6:	4b0d      	ldr	r3, [pc, #52]	@ (80070fc <std+0x64>)
 80070c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <std+0x68>)
 80070cc:	6224      	str	r4, [r4, #32]
 80070ce:	429c      	cmp	r4, r3
 80070d0:	d006      	beq.n	80070e0 <std+0x48>
 80070d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070d6:	4294      	cmp	r4, r2
 80070d8:	d002      	beq.n	80070e0 <std+0x48>
 80070da:	33d0      	adds	r3, #208	@ 0xd0
 80070dc:	429c      	cmp	r4, r3
 80070de:	d105      	bne.n	80070ec <std+0x54>
 80070e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f000 ba7e 	b.w	80075e8 <__retarget_lock_init_recursive>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	08007341 	.word	0x08007341
 80070f4:	08007363 	.word	0x08007363
 80070f8:	0800739b 	.word	0x0800739b
 80070fc:	080073bf 	.word	0x080073bf
 8007100:	2000077c 	.word	0x2000077c

08007104 <stdio_exit_handler>:
 8007104:	4a02      	ldr	r2, [pc, #8]	@ (8007110 <stdio_exit_handler+0xc>)
 8007106:	4903      	ldr	r1, [pc, #12]	@ (8007114 <stdio_exit_handler+0x10>)
 8007108:	4803      	ldr	r0, [pc, #12]	@ (8007118 <stdio_exit_handler+0x14>)
 800710a:	f000 b869 	b.w	80071e0 <_fwalk_sglue>
 800710e:	bf00      	nop
 8007110:	20000014 	.word	0x20000014
 8007114:	0800a149 	.word	0x0800a149
 8007118:	20000024 	.word	0x20000024

0800711c <cleanup_stdio>:
 800711c:	6841      	ldr	r1, [r0, #4]
 800711e:	4b0c      	ldr	r3, [pc, #48]	@ (8007150 <cleanup_stdio+0x34>)
 8007120:	4299      	cmp	r1, r3
 8007122:	b510      	push	{r4, lr}
 8007124:	4604      	mov	r4, r0
 8007126:	d001      	beq.n	800712c <cleanup_stdio+0x10>
 8007128:	f003 f80e 	bl	800a148 <_fflush_r>
 800712c:	68a1      	ldr	r1, [r4, #8]
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <cleanup_stdio+0x38>)
 8007130:	4299      	cmp	r1, r3
 8007132:	d002      	beq.n	800713a <cleanup_stdio+0x1e>
 8007134:	4620      	mov	r0, r4
 8007136:	f003 f807 	bl	800a148 <_fflush_r>
 800713a:	68e1      	ldr	r1, [r4, #12]
 800713c:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <cleanup_stdio+0x3c>)
 800713e:	4299      	cmp	r1, r3
 8007140:	d004      	beq.n	800714c <cleanup_stdio+0x30>
 8007142:	4620      	mov	r0, r4
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007148:	f002 bffe 	b.w	800a148 <_fflush_r>
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	2000077c 	.word	0x2000077c
 8007154:	200007e4 	.word	0x200007e4
 8007158:	2000084c 	.word	0x2000084c

0800715c <global_stdio_init.part.0>:
 800715c:	b510      	push	{r4, lr}
 800715e:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <global_stdio_init.part.0+0x30>)
 8007160:	4c0b      	ldr	r4, [pc, #44]	@ (8007190 <global_stdio_init.part.0+0x34>)
 8007162:	4a0c      	ldr	r2, [pc, #48]	@ (8007194 <global_stdio_init.part.0+0x38>)
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	4620      	mov	r0, r4
 8007168:	2200      	movs	r2, #0
 800716a:	2104      	movs	r1, #4
 800716c:	f7ff ff94 	bl	8007098 <std>
 8007170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007174:	2201      	movs	r2, #1
 8007176:	2109      	movs	r1, #9
 8007178:	f7ff ff8e 	bl	8007098 <std>
 800717c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007180:	2202      	movs	r2, #2
 8007182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007186:	2112      	movs	r1, #18
 8007188:	f7ff bf86 	b.w	8007098 <std>
 800718c:	200008b4 	.word	0x200008b4
 8007190:	2000077c 	.word	0x2000077c
 8007194:	08007105 	.word	0x08007105

08007198 <__sfp_lock_acquire>:
 8007198:	4801      	ldr	r0, [pc, #4]	@ (80071a0 <__sfp_lock_acquire+0x8>)
 800719a:	f000 ba26 	b.w	80075ea <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	200008bd 	.word	0x200008bd

080071a4 <__sfp_lock_release>:
 80071a4:	4801      	ldr	r0, [pc, #4]	@ (80071ac <__sfp_lock_release+0x8>)
 80071a6:	f000 ba21 	b.w	80075ec <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	200008bd 	.word	0x200008bd

080071b0 <__sinit>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4604      	mov	r4, r0
 80071b4:	f7ff fff0 	bl	8007198 <__sfp_lock_acquire>
 80071b8:	6a23      	ldr	r3, [r4, #32]
 80071ba:	b11b      	cbz	r3, 80071c4 <__sinit+0x14>
 80071bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c0:	f7ff bff0 	b.w	80071a4 <__sfp_lock_release>
 80071c4:	4b04      	ldr	r3, [pc, #16]	@ (80071d8 <__sinit+0x28>)
 80071c6:	6223      	str	r3, [r4, #32]
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__sinit+0x2c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f5      	bne.n	80071bc <__sinit+0xc>
 80071d0:	f7ff ffc4 	bl	800715c <global_stdio_init.part.0>
 80071d4:	e7f2      	b.n	80071bc <__sinit+0xc>
 80071d6:	bf00      	nop
 80071d8:	0800711d 	.word	0x0800711d
 80071dc:	200008b4 	.word	0x200008b4

080071e0 <_fwalk_sglue>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	4607      	mov	r7, r0
 80071e6:	4688      	mov	r8, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	2600      	movs	r6, #0
 80071ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071f0:	f1b9 0901 	subs.w	r9, r9, #1
 80071f4:	d505      	bpl.n	8007202 <_fwalk_sglue+0x22>
 80071f6:	6824      	ldr	r4, [r4, #0]
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	d1f7      	bne.n	80071ec <_fwalk_sglue+0xc>
 80071fc:	4630      	mov	r0, r6
 80071fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d907      	bls.n	8007218 <_fwalk_sglue+0x38>
 8007208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800720c:	3301      	adds	r3, #1
 800720e:	d003      	beq.n	8007218 <_fwalk_sglue+0x38>
 8007210:	4629      	mov	r1, r5
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	4306      	orrs	r6, r0
 8007218:	3568      	adds	r5, #104	@ 0x68
 800721a:	e7e9      	b.n	80071f0 <_fwalk_sglue+0x10>

0800721c <iprintf>:
 800721c:	b40f      	push	{r0, r1, r2, r3}
 800721e:	b507      	push	{r0, r1, r2, lr}
 8007220:	4906      	ldr	r1, [pc, #24]	@ (800723c <iprintf+0x20>)
 8007222:	ab04      	add	r3, sp, #16
 8007224:	6808      	ldr	r0, [r1, #0]
 8007226:	f853 2b04 	ldr.w	r2, [r3], #4
 800722a:	6881      	ldr	r1, [r0, #8]
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	f002 fdef 	bl	8009e10 <_vfiprintf_r>
 8007232:	b003      	add	sp, #12
 8007234:	f85d eb04 	ldr.w	lr, [sp], #4
 8007238:	b004      	add	sp, #16
 800723a:	4770      	bx	lr
 800723c:	20000020 	.word	0x20000020

08007240 <_puts_r>:
 8007240:	6a03      	ldr	r3, [r0, #32]
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	6884      	ldr	r4, [r0, #8]
 8007246:	4605      	mov	r5, r0
 8007248:	460e      	mov	r6, r1
 800724a:	b90b      	cbnz	r3, 8007250 <_puts_r+0x10>
 800724c:	f7ff ffb0 	bl	80071b0 <__sinit>
 8007250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d405      	bmi.n	8007262 <_puts_r+0x22>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	0598      	lsls	r0, r3, #22
 800725a:	d402      	bmi.n	8007262 <_puts_r+0x22>
 800725c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800725e:	f000 f9c4 	bl	80075ea <__retarget_lock_acquire_recursive>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	0719      	lsls	r1, r3, #28
 8007266:	d502      	bpl.n	800726e <_puts_r+0x2e>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d135      	bne.n	80072da <_puts_r+0x9a>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f8e7 	bl	8007444 <__swsetup_r>
 8007276:	b380      	cbz	r0, 80072da <_puts_r+0x9a>
 8007278:	f04f 35ff 	mov.w	r5, #4294967295
 800727c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800727e:	07da      	lsls	r2, r3, #31
 8007280:	d405      	bmi.n	800728e <_puts_r+0x4e>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	059b      	lsls	r3, r3, #22
 8007286:	d402      	bmi.n	800728e <_puts_r+0x4e>
 8007288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728a:	f000 f9af 	bl	80075ec <__retarget_lock_release_recursive>
 800728e:	4628      	mov	r0, r5
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	2b00      	cmp	r3, #0
 8007294:	da04      	bge.n	80072a0 <_puts_r+0x60>
 8007296:	69a2      	ldr	r2, [r4, #24]
 8007298:	429a      	cmp	r2, r3
 800729a:	dc17      	bgt.n	80072cc <_puts_r+0x8c>
 800729c:	290a      	cmp	r1, #10
 800729e:	d015      	beq.n	80072cc <_puts_r+0x8c>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	7019      	strb	r1, [r3, #0]
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072ae:	3b01      	subs	r3, #1
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d1ed      	bne.n	8007292 <_puts_r+0x52>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da11      	bge.n	80072de <_puts_r+0x9e>
 80072ba:	4622      	mov	r2, r4
 80072bc:	210a      	movs	r1, #10
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f881 	bl	80073c6 <__swbuf_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0d7      	beq.n	8007278 <_puts_r+0x38>
 80072c8:	250a      	movs	r5, #10
 80072ca:	e7d7      	b.n	800727c <_puts_r+0x3c>
 80072cc:	4622      	mov	r2, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f879 	bl	80073c6 <__swbuf_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d1e7      	bne.n	80072a8 <_puts_r+0x68>
 80072d8:	e7ce      	b.n	8007278 <_puts_r+0x38>
 80072da:	3e01      	subs	r6, #1
 80072dc:	e7e4      	b.n	80072a8 <_puts_r+0x68>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	220a      	movs	r2, #10
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e7ee      	b.n	80072c8 <_puts_r+0x88>
	...

080072ec <puts>:
 80072ec:	4b02      	ldr	r3, [pc, #8]	@ (80072f8 <puts+0xc>)
 80072ee:	4601      	mov	r1, r0
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f7ff bfa5 	b.w	8007240 <_puts_r>
 80072f6:	bf00      	nop
 80072f8:	20000020 	.word	0x20000020

080072fc <siprintf>:
 80072fc:	b40e      	push	{r1, r2, r3}
 80072fe:	b510      	push	{r4, lr}
 8007300:	b09d      	sub	sp, #116	@ 0x74
 8007302:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007304:	9002      	str	r0, [sp, #8]
 8007306:	9006      	str	r0, [sp, #24]
 8007308:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800730c:	480a      	ldr	r0, [pc, #40]	@ (8007338 <siprintf+0x3c>)
 800730e:	9107      	str	r1, [sp, #28]
 8007310:	9104      	str	r1, [sp, #16]
 8007312:	490a      	ldr	r1, [pc, #40]	@ (800733c <siprintf+0x40>)
 8007314:	f853 2b04 	ldr.w	r2, [r3], #4
 8007318:	9105      	str	r1, [sp, #20]
 800731a:	2400      	movs	r4, #0
 800731c:	a902      	add	r1, sp, #8
 800731e:	6800      	ldr	r0, [r0, #0]
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007324:	f002 fc4e 	bl	8009bc4 <_svfiprintf_r>
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	701c      	strb	r4, [r3, #0]
 800732c:	b01d      	add	sp, #116	@ 0x74
 800732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007332:	b003      	add	sp, #12
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000020 	.word	0x20000020
 800733c:	ffff0208 	.word	0xffff0208

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 f900 	bl	800754c <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	05db      	lsls	r3, r3, #23
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	2302      	movs	r3, #2
 800737a:	2200      	movs	r2, #0
 800737c:	f000 f8d4 	bl	8007528 <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	4628      	mov	r0, r5
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b8eb 	b.w	8007570 <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f8c1 	bl	8007528 <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b8a1 	b.w	8007508 <_close_r>

080073c6 <__swbuf_r>:
 80073c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c8:	460e      	mov	r6, r1
 80073ca:	4614      	mov	r4, r2
 80073cc:	4605      	mov	r5, r0
 80073ce:	b118      	cbz	r0, 80073d8 <__swbuf_r+0x12>
 80073d0:	6a03      	ldr	r3, [r0, #32]
 80073d2:	b90b      	cbnz	r3, 80073d8 <__swbuf_r+0x12>
 80073d4:	f7ff feec 	bl	80071b0 <__sinit>
 80073d8:	69a3      	ldr	r3, [r4, #24]
 80073da:	60a3      	str	r3, [r4, #8]
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	071a      	lsls	r2, r3, #28
 80073e0:	d501      	bpl.n	80073e6 <__swbuf_r+0x20>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	b943      	cbnz	r3, 80073f8 <__swbuf_r+0x32>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 f82b 	bl	8007444 <__swsetup_r>
 80073ee:	b118      	cbz	r0, 80073f8 <__swbuf_r+0x32>
 80073f0:	f04f 37ff 	mov.w	r7, #4294967295
 80073f4:	4638      	mov	r0, r7
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	1a98      	subs	r0, r3, r2
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	b2f6      	uxtb	r6, r6
 8007402:	4283      	cmp	r3, r0
 8007404:	4637      	mov	r7, r6
 8007406:	dc05      	bgt.n	8007414 <__swbuf_r+0x4e>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f002 fe9c 	bl	800a148 <_fflush_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	d1ed      	bne.n	80073f0 <__swbuf_r+0x2a>
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	3b01      	subs	r3, #1
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	701e      	strb	r6, [r3, #0]
 8007422:	6962      	ldr	r2, [r4, #20]
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	429a      	cmp	r2, r3
 8007428:	d004      	beq.n	8007434 <__swbuf_r+0x6e>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d5e1      	bpl.n	80073f4 <__swbuf_r+0x2e>
 8007430:	2e0a      	cmp	r6, #10
 8007432:	d1df      	bne.n	80073f4 <__swbuf_r+0x2e>
 8007434:	4621      	mov	r1, r4
 8007436:	4628      	mov	r0, r5
 8007438:	f002 fe86 	bl	800a148 <_fflush_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	d0d9      	beq.n	80073f4 <__swbuf_r+0x2e>
 8007440:	e7d6      	b.n	80073f0 <__swbuf_r+0x2a>
	...

08007444 <__swsetup_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4b29      	ldr	r3, [pc, #164]	@ (80074ec <__swsetup_r+0xa8>)
 8007448:	4605      	mov	r5, r0
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	460c      	mov	r4, r1
 800744e:	b118      	cbz	r0, 8007458 <__swsetup_r+0x14>
 8007450:	6a03      	ldr	r3, [r0, #32]
 8007452:	b90b      	cbnz	r3, 8007458 <__swsetup_r+0x14>
 8007454:	f7ff feac 	bl	80071b0 <__sinit>
 8007458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	d422      	bmi.n	80074a6 <__swsetup_r+0x62>
 8007460:	06da      	lsls	r2, r3, #27
 8007462:	d407      	bmi.n	8007474 <__swsetup_r+0x30>
 8007464:	2209      	movs	r2, #9
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	e033      	b.n	80074dc <__swsetup_r+0x98>
 8007474:	0758      	lsls	r0, r3, #29
 8007476:	d512      	bpl.n	800749e <__swsetup_r+0x5a>
 8007478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800747a:	b141      	cbz	r1, 800748e <__swsetup_r+0x4a>
 800747c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007480:	4299      	cmp	r1, r3
 8007482:	d002      	beq.n	800748a <__swsetup_r+0x46>
 8007484:	4628      	mov	r0, r5
 8007486:	f000 ff13 	bl	80082b0 <_free_r>
 800748a:	2300      	movs	r3, #0
 800748c:	6363      	str	r3, [r4, #52]	@ 0x34
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	2300      	movs	r3, #0
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f043 0308 	orr.w	r3, r3, #8
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	b94b      	cbnz	r3, 80074be <__swsetup_r+0x7a>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b4:	d003      	beq.n	80074be <__swsetup_r+0x7a>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f002 fe93 	bl	800a1e4 <__smakebuf_r>
 80074be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c2:	f013 0201 	ands.w	r2, r3, #1
 80074c6:	d00a      	beq.n	80074de <__swsetup_r+0x9a>
 80074c8:	2200      	movs	r2, #0
 80074ca:	60a2      	str	r2, [r4, #8]
 80074cc:	6962      	ldr	r2, [r4, #20]
 80074ce:	4252      	negs	r2, r2
 80074d0:	61a2      	str	r2, [r4, #24]
 80074d2:	6922      	ldr	r2, [r4, #16]
 80074d4:	b942      	cbnz	r2, 80074e8 <__swsetup_r+0xa4>
 80074d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074da:	d1c5      	bne.n	8007468 <__swsetup_r+0x24>
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
 80074de:	0799      	lsls	r1, r3, #30
 80074e0:	bf58      	it	pl
 80074e2:	6962      	ldrpl	r2, [r4, #20]
 80074e4:	60a2      	str	r2, [r4, #8]
 80074e6:	e7f4      	b.n	80074d2 <__swsetup_r+0x8e>
 80074e8:	2000      	movs	r0, #0
 80074ea:	e7f7      	b.n	80074dc <__swsetup_r+0x98>
 80074ec:	20000020 	.word	0x20000020

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <_localeconv_r>:
 8007500:	4800      	ldr	r0, [pc, #0]	@ (8007504 <_localeconv_r+0x4>)
 8007502:	4770      	bx	lr
 8007504:	20000160 	.word	0x20000160

08007508 <_close_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	@ (8007524 <_close_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fb ff9f 	bl	8003456 <_close>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_close_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_close_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	200008b8 	.word	0x200008b8

08007528 <_lseek_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	@ (8007548 <_lseek_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fb ffb4 	bl	80034a4 <_lseek>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_lseek_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_lseek_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	200008b8 	.word	0x200008b8

0800754c <_read_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	@ (800756c <_read_r+0x20>)
 8007550:	4604      	mov	r4, r0
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	2200      	movs	r2, #0
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fb ff42 	bl	80033e4 <_read>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_read_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_read_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	200008b8 	.word	0x200008b8

08007570 <_write_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	@ (8007590 <_write_r+0x20>)
 8007574:	4604      	mov	r4, r0
 8007576:	4608      	mov	r0, r1
 8007578:	4611      	mov	r1, r2
 800757a:	2200      	movs	r2, #0
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	f7fb ff4d 	bl	800341e <_write>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_write_r+0x1e>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_write_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	200008b8 	.word	0x200008b8

08007594 <__errno>:
 8007594:	4b01      	ldr	r3, [pc, #4]	@ (800759c <__errno+0x8>)
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000020 	.word	0x20000020

080075a0 <__libc_init_array>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4d0d      	ldr	r5, [pc, #52]	@ (80075d8 <__libc_init_array+0x38>)
 80075a4:	4c0d      	ldr	r4, [pc, #52]	@ (80075dc <__libc_init_array+0x3c>)
 80075a6:	1b64      	subs	r4, r4, r5
 80075a8:	10a4      	asrs	r4, r4, #2
 80075aa:	2600      	movs	r6, #0
 80075ac:	42a6      	cmp	r6, r4
 80075ae:	d109      	bne.n	80075c4 <__libc_init_array+0x24>
 80075b0:	4d0b      	ldr	r5, [pc, #44]	@ (80075e0 <__libc_init_array+0x40>)
 80075b2:	4c0c      	ldr	r4, [pc, #48]	@ (80075e4 <__libc_init_array+0x44>)
 80075b4:	f003 fae6 	bl	800ab84 <_init>
 80075b8:	1b64      	subs	r4, r4, r5
 80075ba:	10a4      	asrs	r4, r4, #2
 80075bc:	2600      	movs	r6, #0
 80075be:	42a6      	cmp	r6, r4
 80075c0:	d105      	bne.n	80075ce <__libc_init_array+0x2e>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c8:	4798      	blx	r3
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7ee      	b.n	80075ac <__libc_init_array+0xc>
 80075ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d2:	4798      	blx	r3
 80075d4:	3601      	adds	r6, #1
 80075d6:	e7f2      	b.n	80075be <__libc_init_array+0x1e>
 80075d8:	0800b0e4 	.word	0x0800b0e4
 80075dc:	0800b0e4 	.word	0x0800b0e4
 80075e0:	0800b0e4 	.word	0x0800b0e4
 80075e4:	0800b0e8 	.word	0x0800b0e8

080075e8 <__retarget_lock_init_recursive>:
 80075e8:	4770      	bx	lr

080075ea <__retarget_lock_acquire_recursive>:
 80075ea:	4770      	bx	lr

080075ec <__retarget_lock_release_recursive>:
 80075ec:	4770      	bx	lr
	...

080075f0 <nanf>:
 80075f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075f8 <nanf+0x8>
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	7fc00000 	.word	0x7fc00000

080075fc <quorem>:
 80075fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	6903      	ldr	r3, [r0, #16]
 8007602:	690c      	ldr	r4, [r1, #16]
 8007604:	42a3      	cmp	r3, r4
 8007606:	4607      	mov	r7, r0
 8007608:	db7e      	blt.n	8007708 <quorem+0x10c>
 800760a:	3c01      	subs	r4, #1
 800760c:	f101 0814 	add.w	r8, r1, #20
 8007610:	00a3      	lsls	r3, r4, #2
 8007612:	f100 0514 	add.w	r5, r0, #20
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007626:	3301      	adds	r3, #1
 8007628:	429a      	cmp	r2, r3
 800762a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800762e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007632:	d32e      	bcc.n	8007692 <quorem+0x96>
 8007634:	f04f 0a00 	mov.w	sl, #0
 8007638:	46c4      	mov	ip, r8
 800763a:	46ae      	mov	lr, r5
 800763c:	46d3      	mov	fp, sl
 800763e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007642:	b298      	uxth	r0, r3
 8007644:	fb06 a000 	mla	r0, r6, r0, sl
 8007648:	0c02      	lsrs	r2, r0, #16
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	fb06 2303 	mla	r3, r6, r3, r2
 8007650:	f8de 2000 	ldr.w	r2, [lr]
 8007654:	b280      	uxth	r0, r0
 8007656:	b292      	uxth	r2, r2
 8007658:	1a12      	subs	r2, r2, r0
 800765a:	445a      	add	r2, fp
 800765c:	f8de 0000 	ldr.w	r0, [lr]
 8007660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007664:	b29b      	uxth	r3, r3
 8007666:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800766a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800766e:	b292      	uxth	r2, r2
 8007670:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007674:	45e1      	cmp	r9, ip
 8007676:	f84e 2b04 	str.w	r2, [lr], #4
 800767a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800767e:	d2de      	bcs.n	800763e <quorem+0x42>
 8007680:	9b00      	ldr	r3, [sp, #0]
 8007682:	58eb      	ldr	r3, [r5, r3]
 8007684:	b92b      	cbnz	r3, 8007692 <quorem+0x96>
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	3b04      	subs	r3, #4
 800768a:	429d      	cmp	r5, r3
 800768c:	461a      	mov	r2, r3
 800768e:	d32f      	bcc.n	80076f0 <quorem+0xf4>
 8007690:	613c      	str	r4, [r7, #16]
 8007692:	4638      	mov	r0, r7
 8007694:	f001 f9c8 	bl	8008a28 <__mcmp>
 8007698:	2800      	cmp	r0, #0
 800769a:	db25      	blt.n	80076e8 <quorem+0xec>
 800769c:	4629      	mov	r1, r5
 800769e:	2000      	movs	r0, #0
 80076a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076a4:	f8d1 c000 	ldr.w	ip, [r1]
 80076a8:	fa1f fe82 	uxth.w	lr, r2
 80076ac:	fa1f f38c 	uxth.w	r3, ip
 80076b0:	eba3 030e 	sub.w	r3, r3, lr
 80076b4:	4403      	add	r3, r0
 80076b6:	0c12      	lsrs	r2, r2, #16
 80076b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c6:	45c1      	cmp	r9, r8
 80076c8:	f841 3b04 	str.w	r3, [r1], #4
 80076cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076d0:	d2e6      	bcs.n	80076a0 <quorem+0xa4>
 80076d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076da:	b922      	cbnz	r2, 80076e6 <quorem+0xea>
 80076dc:	3b04      	subs	r3, #4
 80076de:	429d      	cmp	r5, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	d30b      	bcc.n	80076fc <quorem+0x100>
 80076e4:	613c      	str	r4, [r7, #16]
 80076e6:	3601      	adds	r6, #1
 80076e8:	4630      	mov	r0, r6
 80076ea:	b003      	add	sp, #12
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d1cb      	bne.n	8007690 <quorem+0x94>
 80076f8:	3c01      	subs	r4, #1
 80076fa:	e7c6      	b.n	800768a <quorem+0x8e>
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	3b04      	subs	r3, #4
 8007700:	2a00      	cmp	r2, #0
 8007702:	d1ef      	bne.n	80076e4 <quorem+0xe8>
 8007704:	3c01      	subs	r4, #1
 8007706:	e7ea      	b.n	80076de <quorem+0xe2>
 8007708:	2000      	movs	r0, #0
 800770a:	e7ee      	b.n	80076ea <quorem+0xee>
 800770c:	0000      	movs	r0, r0
	...

08007710 <_dtoa_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	69c7      	ldr	r7, [r0, #28]
 8007716:	b097      	sub	sp, #92	@ 0x5c
 8007718:	ed8d 0b04 	vstr	d0, [sp, #16]
 800771c:	ec55 4b10 	vmov	r4, r5, d0
 8007720:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007722:	9107      	str	r1, [sp, #28]
 8007724:	4681      	mov	r9, r0
 8007726:	920c      	str	r2, [sp, #48]	@ 0x30
 8007728:	9311      	str	r3, [sp, #68]	@ 0x44
 800772a:	b97f      	cbnz	r7, 800774c <_dtoa_r+0x3c>
 800772c:	2010      	movs	r0, #16
 800772e:	f000 fe09 	bl	8008344 <malloc>
 8007732:	4602      	mov	r2, r0
 8007734:	f8c9 001c 	str.w	r0, [r9, #28]
 8007738:	b920      	cbnz	r0, 8007744 <_dtoa_r+0x34>
 800773a:	4ba9      	ldr	r3, [pc, #676]	@ (80079e0 <_dtoa_r+0x2d0>)
 800773c:	21ef      	movs	r1, #239	@ 0xef
 800773e:	48a9      	ldr	r0, [pc, #676]	@ (80079e4 <_dtoa_r+0x2d4>)
 8007740:	f002 fe02 	bl	800a348 <__assert_func>
 8007744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007748:	6007      	str	r7, [r0, #0]
 800774a:	60c7      	str	r7, [r0, #12]
 800774c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	b159      	cbz	r1, 800776c <_dtoa_r+0x5c>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	604a      	str	r2, [r1, #4]
 8007758:	2301      	movs	r3, #1
 800775a:	4093      	lsls	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
 800775e:	4648      	mov	r0, r9
 8007760:	f000 fee6 	bl	8008530 <_Bfree>
 8007764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	1e2b      	subs	r3, r5, #0
 800776e:	bfb9      	ittee	lt
 8007770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007774:	9305      	strlt	r3, [sp, #20]
 8007776:	2300      	movge	r3, #0
 8007778:	6033      	strge	r3, [r6, #0]
 800777a:	9f05      	ldr	r7, [sp, #20]
 800777c:	4b9a      	ldr	r3, [pc, #616]	@ (80079e8 <_dtoa_r+0x2d8>)
 800777e:	bfbc      	itt	lt
 8007780:	2201      	movlt	r2, #1
 8007782:	6032      	strlt	r2, [r6, #0]
 8007784:	43bb      	bics	r3, r7
 8007786:	d112      	bne.n	80077ae <_dtoa_r+0x9e>
 8007788:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800778a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007794:	4323      	orrs	r3, r4
 8007796:	f000 855a 	beq.w	800824e <_dtoa_r+0xb3e>
 800779a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800779c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80079fc <_dtoa_r+0x2ec>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 855c 	beq.w	800825e <_dtoa_r+0xb4e>
 80077a6:	f10a 0303 	add.w	r3, sl, #3
 80077aa:	f000 bd56 	b.w	800825a <_dtoa_r+0xb4a>
 80077ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077b2:	2200      	movs	r2, #0
 80077b4:	ec51 0b17 	vmov	r0, r1, d7
 80077b8:	2300      	movs	r3, #0
 80077ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077be:	f7f9 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c2:	4680      	mov	r8, r0
 80077c4:	b158      	cbz	r0, 80077de <_dtoa_r+0xce>
 80077c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077c8:	2301      	movs	r3, #1
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077ce:	b113      	cbz	r3, 80077d6 <_dtoa_r+0xc6>
 80077d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077d2:	4b86      	ldr	r3, [pc, #536]	@ (80079ec <_dtoa_r+0x2dc>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007a00 <_dtoa_r+0x2f0>
 80077da:	f000 bd40 	b.w	800825e <_dtoa_r+0xb4e>
 80077de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80077e2:	aa14      	add	r2, sp, #80	@ 0x50
 80077e4:	a915      	add	r1, sp, #84	@ 0x54
 80077e6:	4648      	mov	r0, r9
 80077e8:	f001 fa3e 	bl	8008c68 <__d2b>
 80077ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077f0:	9002      	str	r0, [sp, #8]
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	d078      	beq.n	80078e8 <_dtoa_r+0x1d8>
 80077f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80077fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800780c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007810:	4619      	mov	r1, r3
 8007812:	2200      	movs	r2, #0
 8007814:	4b76      	ldr	r3, [pc, #472]	@ (80079f0 <_dtoa_r+0x2e0>)
 8007816:	f7f8 fd37 	bl	8000288 <__aeabi_dsub>
 800781a:	a36b      	add	r3, pc, #428	@ (adr r3, 80079c8 <_dtoa_r+0x2b8>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	a36a      	add	r3, pc, #424	@ (adr r3, 80079d0 <_dtoa_r+0x2c0>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4604      	mov	r4, r0
 8007830:	4630      	mov	r0, r6
 8007832:	460d      	mov	r5, r1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_i2d>
 8007838:	a367      	add	r3, pc, #412	@ (adr r3, 80079d8 <_dtoa_r+0x2c8>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	f7f9 f981 	bl	8000b58 <__aeabi_d2iz>
 8007856:	2200      	movs	r2, #0
 8007858:	4607      	mov	r7, r0
 800785a:	2300      	movs	r3, #0
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8007864:	b140      	cbz	r0, 8007878 <_dtoa_r+0x168>
 8007866:	4638      	mov	r0, r7
 8007868:	f7f8 fe5c 	bl	8000524 <__aeabi_i2d>
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f7f9 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007874:	b900      	cbnz	r0, 8007878 <_dtoa_r+0x168>
 8007876:	3f01      	subs	r7, #1
 8007878:	2f16      	cmp	r7, #22
 800787a:	d852      	bhi.n	8007922 <_dtoa_r+0x212>
 800787c:	4b5d      	ldr	r3, [pc, #372]	@ (80079f4 <_dtoa_r+0x2e4>)
 800787e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800788a:	f7f9 f927 	bl	8000adc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d049      	beq.n	8007926 <_dtoa_r+0x216>
 8007892:	3f01      	subs	r7, #1
 8007894:	2300      	movs	r3, #0
 8007896:	9310      	str	r3, [sp, #64]	@ 0x40
 8007898:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800789a:	1b9b      	subs	r3, r3, r6
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	bf45      	ittet	mi
 80078a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80078a4:	9300      	strmi	r3, [sp, #0]
 80078a6:	2300      	movpl	r3, #0
 80078a8:	2300      	movmi	r3, #0
 80078aa:	9206      	str	r2, [sp, #24]
 80078ac:	bf54      	ite	pl
 80078ae:	9300      	strpl	r3, [sp, #0]
 80078b0:	9306      	strmi	r3, [sp, #24]
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	db39      	blt.n	800792a <_dtoa_r+0x21a>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80078ba:	443b      	add	r3, r7
 80078bc:	9306      	str	r3, [sp, #24]
 80078be:	2300      	movs	r3, #0
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d863      	bhi.n	8007990 <_dtoa_r+0x280>
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	bfc4      	itt	gt
 80078cc:	3b04      	subgt	r3, #4
 80078ce:	9307      	strgt	r3, [sp, #28]
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	f1a3 0302 	sub.w	r3, r3, #2
 80078d6:	bfcc      	ite	gt
 80078d8:	2400      	movgt	r4, #0
 80078da:	2401      	movle	r4, #1
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d863      	bhi.n	80079a8 <_dtoa_r+0x298>
 80078e0:	e8df f003 	tbb	[pc, r3]
 80078e4:	2b375452 	.word	0x2b375452
 80078e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078ec:	441e      	add	r6, r3
 80078ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	bfc1      	itttt	gt
 80078f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078fa:	409f      	lslgt	r7, r3
 80078fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007900:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007904:	bfd6      	itet	le
 8007906:	f1c3 0320 	rsble	r3, r3, #32
 800790a:	ea47 0003 	orrgt.w	r0, r7, r3
 800790e:	fa04 f003 	lslle.w	r0, r4, r3
 8007912:	f7f8 fdf7 	bl	8000504 <__aeabi_ui2d>
 8007916:	2201      	movs	r2, #1
 8007918:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800791c:	3e01      	subs	r6, #1
 800791e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007920:	e776      	b.n	8007810 <_dtoa_r+0x100>
 8007922:	2301      	movs	r3, #1
 8007924:	e7b7      	b.n	8007896 <_dtoa_r+0x186>
 8007926:	9010      	str	r0, [sp, #64]	@ 0x40
 8007928:	e7b6      	b.n	8007898 <_dtoa_r+0x188>
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	1bdb      	subs	r3, r3, r7
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	427b      	negs	r3, r7
 8007932:	9308      	str	r3, [sp, #32]
 8007934:	2300      	movs	r3, #0
 8007936:	930d      	str	r3, [sp, #52]	@ 0x34
 8007938:	e7c3      	b.n	80078c2 <_dtoa_r+0x1b2>
 800793a:	2301      	movs	r3, #1
 800793c:	9309      	str	r3, [sp, #36]	@ 0x24
 800793e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007940:	eb07 0b03 	add.w	fp, r7, r3
 8007944:	f10b 0301 	add.w	r3, fp, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	9303      	str	r3, [sp, #12]
 800794c:	bfb8      	it	lt
 800794e:	2301      	movlt	r3, #1
 8007950:	e006      	b.n	8007960 <_dtoa_r+0x250>
 8007952:	2301      	movs	r3, #1
 8007954:	9309      	str	r3, [sp, #36]	@ 0x24
 8007956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	dd28      	ble.n	80079ae <_dtoa_r+0x29e>
 800795c:	469b      	mov	fp, r3
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007964:	2100      	movs	r1, #0
 8007966:	2204      	movs	r2, #4
 8007968:	f102 0514 	add.w	r5, r2, #20
 800796c:	429d      	cmp	r5, r3
 800796e:	d926      	bls.n	80079be <_dtoa_r+0x2ae>
 8007970:	6041      	str	r1, [r0, #4]
 8007972:	4648      	mov	r0, r9
 8007974:	f000 fd9c 	bl	80084b0 <_Balloc>
 8007978:	4682      	mov	sl, r0
 800797a:	2800      	cmp	r0, #0
 800797c:	d142      	bne.n	8007a04 <_dtoa_r+0x2f4>
 800797e:	4b1e      	ldr	r3, [pc, #120]	@ (80079f8 <_dtoa_r+0x2e8>)
 8007980:	4602      	mov	r2, r0
 8007982:	f240 11af 	movw	r1, #431	@ 0x1af
 8007986:	e6da      	b.n	800773e <_dtoa_r+0x2e>
 8007988:	2300      	movs	r3, #0
 800798a:	e7e3      	b.n	8007954 <_dtoa_r+0x244>
 800798c:	2300      	movs	r3, #0
 800798e:	e7d5      	b.n	800793c <_dtoa_r+0x22c>
 8007990:	2401      	movs	r4, #1
 8007992:	2300      	movs	r3, #0
 8007994:	9307      	str	r3, [sp, #28]
 8007996:	9409      	str	r4, [sp, #36]	@ 0x24
 8007998:	f04f 3bff 	mov.w	fp, #4294967295
 800799c:	2200      	movs	r2, #0
 800799e:	f8cd b00c 	str.w	fp, [sp, #12]
 80079a2:	2312      	movs	r3, #18
 80079a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80079a6:	e7db      	b.n	8007960 <_dtoa_r+0x250>
 80079a8:	2301      	movs	r3, #1
 80079aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ac:	e7f4      	b.n	8007998 <_dtoa_r+0x288>
 80079ae:	f04f 0b01 	mov.w	fp, #1
 80079b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80079b6:	465b      	mov	r3, fp
 80079b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079bc:	e7d0      	b.n	8007960 <_dtoa_r+0x250>
 80079be:	3101      	adds	r1, #1
 80079c0:	0052      	lsls	r2, r2, #1
 80079c2:	e7d1      	b.n	8007968 <_dtoa_r+0x258>
 80079c4:	f3af 8000 	nop.w
 80079c8:	636f4361 	.word	0x636f4361
 80079cc:	3fd287a7 	.word	0x3fd287a7
 80079d0:	8b60c8b3 	.word	0x8b60c8b3
 80079d4:	3fc68a28 	.word	0x3fc68a28
 80079d8:	509f79fb 	.word	0x509f79fb
 80079dc:	3fd34413 	.word	0x3fd34413
 80079e0:	0800acf6 	.word	0x0800acf6
 80079e4:	0800ad0d 	.word	0x0800ad0d
 80079e8:	7ff00000 	.word	0x7ff00000
 80079ec:	0800acc1 	.word	0x0800acc1
 80079f0:	3ff80000 	.word	0x3ff80000
 80079f4:	0800aec0 	.word	0x0800aec0
 80079f8:	0800ad65 	.word	0x0800ad65
 80079fc:	0800acf2 	.word	0x0800acf2
 8007a00:	0800acc0 	.word	0x0800acc0
 8007a04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a08:	6018      	str	r0, [r3, #0]
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	2b0e      	cmp	r3, #14
 8007a0e:	f200 80a1 	bhi.w	8007b54 <_dtoa_r+0x444>
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	f000 809e 	beq.w	8007b54 <_dtoa_r+0x444>
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	dd33      	ble.n	8007a84 <_dtoa_r+0x374>
 8007a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8007c90 <_dtoa_r+0x580>)
 8007a1e:	f007 020f 	and.w	r2, r7, #15
 8007a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a26:	ed93 7b00 	vldr	d7, [r3]
 8007a2a:	05f8      	lsls	r0, r7, #23
 8007a2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a34:	d516      	bpl.n	8007a64 <_dtoa_r+0x354>
 8007a36:	4b97      	ldr	r3, [pc, #604]	@ (8007c94 <_dtoa_r+0x584>)
 8007a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a40:	f7f8 ff04 	bl	800084c <__aeabi_ddiv>
 8007a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a48:	f004 040f 	and.w	r4, r4, #15
 8007a4c:	2603      	movs	r6, #3
 8007a4e:	4d91      	ldr	r5, [pc, #580]	@ (8007c94 <_dtoa_r+0x584>)
 8007a50:	b954      	cbnz	r4, 8007a68 <_dtoa_r+0x358>
 8007a52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a5a:	f7f8 fef7 	bl	800084c <__aeabi_ddiv>
 8007a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a62:	e028      	b.n	8007ab6 <_dtoa_r+0x3a6>
 8007a64:	2602      	movs	r6, #2
 8007a66:	e7f2      	b.n	8007a4e <_dtoa_r+0x33e>
 8007a68:	07e1      	lsls	r1, r4, #31
 8007a6a:	d508      	bpl.n	8007a7e <_dtoa_r+0x36e>
 8007a6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a74:	f7f8 fdc0 	bl	80005f8 <__aeabi_dmul>
 8007a78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a7c:	3601      	adds	r6, #1
 8007a7e:	1064      	asrs	r4, r4, #1
 8007a80:	3508      	adds	r5, #8
 8007a82:	e7e5      	b.n	8007a50 <_dtoa_r+0x340>
 8007a84:	f000 80af 	beq.w	8007be6 <_dtoa_r+0x4d6>
 8007a88:	427c      	negs	r4, r7
 8007a8a:	4b81      	ldr	r3, [pc, #516]	@ (8007c90 <_dtoa_r+0x580>)
 8007a8c:	4d81      	ldr	r5, [pc, #516]	@ (8007c94 <_dtoa_r+0x584>)
 8007a8e:	f004 020f 	and.w	r2, r4, #15
 8007a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa6:	1124      	asrs	r4, r4, #4
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2602      	movs	r6, #2
 8007aac:	2c00      	cmp	r4, #0
 8007aae:	f040 808f 	bne.w	8007bd0 <_dtoa_r+0x4c0>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1d3      	bne.n	8007a5e <_dtoa_r+0x34e>
 8007ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ab8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8094 	beq.w	8007bea <_dtoa_r+0x4da>
 8007ac2:	4b75      	ldr	r3, [pc, #468]	@ (8007c98 <_dtoa_r+0x588>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f9 f807 	bl	8000adc <__aeabi_dcmplt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f000 808b 	beq.w	8007bea <_dtoa_r+0x4da>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8087 	beq.w	8007bea <_dtoa_r+0x4da>
 8007adc:	f1bb 0f00 	cmp.w	fp, #0
 8007ae0:	dd34      	ble.n	8007b4c <_dtoa_r+0x43c>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8007c9c <_dtoa_r+0x58c>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 fd85 	bl	80005f8 <__aeabi_dmul>
 8007aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007af6:	3601      	adds	r6, #1
 8007af8:	465c      	mov	r4, fp
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7f8 fd12 	bl	8000524 <__aeabi_i2d>
 8007b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b04:	f7f8 fd78 	bl	80005f8 <__aeabi_dmul>
 8007b08:	4b65      	ldr	r3, [pc, #404]	@ (8007ca0 <_dtoa_r+0x590>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 fbbe 	bl	800028c <__adddf3>
 8007b10:	4605      	mov	r5, r0
 8007b12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	d16a      	bne.n	8007bf0 <_dtoa_r+0x4e0>
 8007b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b1e:	4b61      	ldr	r3, [pc, #388]	@ (8007ca4 <_dtoa_r+0x594>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	f7f8 fbb1 	bl	8000288 <__aeabi_dsub>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b2e:	462a      	mov	r2, r5
 8007b30:	4633      	mov	r3, r6
 8007b32:	f7f8 fff1 	bl	8000b18 <__aeabi_dcmpgt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f040 8298 	bne.w	800806c <_dtoa_r+0x95c>
 8007b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b40:	462a      	mov	r2, r5
 8007b42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b46:	f7f8 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8007b4a:	bb38      	cbnz	r0, 8007b9c <_dtoa_r+0x48c>
 8007b4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f2c0 8157 	blt.w	8007e0a <_dtoa_r+0x6fa>
 8007b5c:	2f0e      	cmp	r7, #14
 8007b5e:	f300 8154 	bgt.w	8007e0a <_dtoa_r+0x6fa>
 8007b62:	4b4b      	ldr	r3, [pc, #300]	@ (8007c90 <_dtoa_r+0x580>)
 8007b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b68:	ed93 7b00 	vldr	d7, [r3]
 8007b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	ed8d 7b00 	vstr	d7, [sp]
 8007b74:	f280 80e5 	bge.w	8007d42 <_dtoa_r+0x632>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f300 80e1 	bgt.w	8007d42 <_dtoa_r+0x632>
 8007b80:	d10c      	bne.n	8007b9c <_dtoa_r+0x48c>
 8007b82:	4b48      	ldr	r3, [pc, #288]	@ (8007ca4 <_dtoa_r+0x594>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	ec51 0b17 	vmov	r0, r1, d7
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b92:	f7f8 ffb7 	bl	8000b04 <__aeabi_dcmpge>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f000 8266 	beq.w	8008068 <_dtoa_r+0x958>
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	4625      	mov	r5, r4
 8007ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ba2:	4656      	mov	r6, sl
 8007ba4:	ea6f 0803 	mvn.w	r8, r3
 8007ba8:	2700      	movs	r7, #0
 8007baa:	4621      	mov	r1, r4
 8007bac:	4648      	mov	r0, r9
 8007bae:	f000 fcbf 	bl	8008530 <_Bfree>
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	f000 80bd 	beq.w	8007d32 <_dtoa_r+0x622>
 8007bb8:	b12f      	cbz	r7, 8007bc6 <_dtoa_r+0x4b6>
 8007bba:	42af      	cmp	r7, r5
 8007bbc:	d003      	beq.n	8007bc6 <_dtoa_r+0x4b6>
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 fcb5 	bl	8008530 <_Bfree>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4648      	mov	r0, r9
 8007bca:	f000 fcb1 	bl	8008530 <_Bfree>
 8007bce:	e0b0      	b.n	8007d32 <_dtoa_r+0x622>
 8007bd0:	07e2      	lsls	r2, r4, #31
 8007bd2:	d505      	bpl.n	8007be0 <_dtoa_r+0x4d0>
 8007bd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd8:	f7f8 fd0e 	bl	80005f8 <__aeabi_dmul>
 8007bdc:	3601      	adds	r6, #1
 8007bde:	2301      	movs	r3, #1
 8007be0:	1064      	asrs	r4, r4, #1
 8007be2:	3508      	adds	r5, #8
 8007be4:	e762      	b.n	8007aac <_dtoa_r+0x39c>
 8007be6:	2602      	movs	r6, #2
 8007be8:	e765      	b.n	8007ab6 <_dtoa_r+0x3a6>
 8007bea:	9c03      	ldr	r4, [sp, #12]
 8007bec:	46b8      	mov	r8, r7
 8007bee:	e784      	b.n	8007afa <_dtoa_r+0x3ea>
 8007bf0:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <_dtoa_r+0x580>)
 8007bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bfc:	4454      	add	r4, sl
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d054      	beq.n	8007cac <_dtoa_r+0x59c>
 8007c02:	4929      	ldr	r1, [pc, #164]	@ (8007ca8 <_dtoa_r+0x598>)
 8007c04:	2000      	movs	r0, #0
 8007c06:	f7f8 fe21 	bl	800084c <__aeabi_ddiv>
 8007c0a:	4633      	mov	r3, r6
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	f7f8 fb3b 	bl	8000288 <__aeabi_dsub>
 8007c12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c16:	4656      	mov	r6, sl
 8007c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c1c:	f7f8 ff9c 	bl	8000b58 <__aeabi_d2iz>
 8007c20:	4605      	mov	r5, r0
 8007c22:	f7f8 fc7f 	bl	8000524 <__aeabi_i2d>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2e:	f7f8 fb2b 	bl	8000288 <__aeabi_dsub>
 8007c32:	3530      	adds	r5, #48	@ 0x30
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8007c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c44:	f7f8 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d172      	bne.n	8007d32 <_dtoa_r+0x622>
 8007c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c50:	4911      	ldr	r1, [pc, #68]	@ (8007c98 <_dtoa_r+0x588>)
 8007c52:	2000      	movs	r0, #0
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c5c:	f7f8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f040 80b4 	bne.w	8007dce <_dtoa_r+0x6be>
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	f43f af70 	beq.w	8007b4c <_dtoa_r+0x43c>
 8007c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c70:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <_dtoa_r+0x58c>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <_dtoa_r+0x58c>)
 8007c7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c7e:	2200      	movs	r2, #0
 8007c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c8c:	e7c4      	b.n	8007c18 <_dtoa_r+0x508>
 8007c8e:	bf00      	nop
 8007c90:	0800aec0 	.word	0x0800aec0
 8007c94:	0800ae98 	.word	0x0800ae98
 8007c98:	3ff00000 	.word	0x3ff00000
 8007c9c:	40240000 	.word	0x40240000
 8007ca0:	401c0000 	.word	0x401c0000
 8007ca4:	40140000 	.word	0x40140000
 8007ca8:	3fe00000 	.word	0x3fe00000
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f7f8 fca2 	bl	80005f8 <__aeabi_dmul>
 8007cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007cba:	4656      	mov	r6, sl
 8007cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc0:	f7f8 ff4a 	bl	8000b58 <__aeabi_d2iz>
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	f7f8 fc2d 	bl	8000524 <__aeabi_i2d>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd2:	f7f8 fad9 	bl	8000288 <__aeabi_dsub>
 8007cd6:	3530      	adds	r5, #48	@ 0x30
 8007cd8:	f806 5b01 	strb.w	r5, [r6], #1
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	42a6      	cmp	r6, r4
 8007ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	d124      	bne.n	8007d36 <_dtoa_r+0x626>
 8007cec:	4baf      	ldr	r3, [pc, #700]	@ (8007fac <_dtoa_r+0x89c>)
 8007cee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007cf2:	f7f8 facb 	bl	800028c <__adddf3>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cfe:	f7f8 ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d163      	bne.n	8007dce <_dtoa_r+0x6be>
 8007d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d0a:	49a8      	ldr	r1, [pc, #672]	@ (8007fac <_dtoa_r+0x89c>)
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	f7f8 fabb 	bl	8000288 <__aeabi_dsub>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1a:	f7f8 fedf 	bl	8000adc <__aeabi_dcmplt>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f43f af14 	beq.w	8007b4c <_dtoa_r+0x43c>
 8007d24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d26:	1e73      	subs	r3, r6, #1
 8007d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d2e:	2b30      	cmp	r3, #48	@ 0x30
 8007d30:	d0f8      	beq.n	8007d24 <_dtoa_r+0x614>
 8007d32:	4647      	mov	r7, r8
 8007d34:	e03b      	b.n	8007dae <_dtoa_r+0x69e>
 8007d36:	4b9e      	ldr	r3, [pc, #632]	@ (8007fb0 <_dtoa_r+0x8a0>)
 8007d38:	f7f8 fc5e 	bl	80005f8 <__aeabi_dmul>
 8007d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d40:	e7bc      	b.n	8007cbc <_dtoa_r+0x5ac>
 8007d42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d46:	4656      	mov	r6, sl
 8007d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	f7f8 fd7c 	bl	800084c <__aeabi_ddiv>
 8007d54:	f7f8 ff00 	bl	8000b58 <__aeabi_d2iz>
 8007d58:	4680      	mov	r8, r0
 8007d5a:	f7f8 fbe3 	bl	8000524 <__aeabi_i2d>
 8007d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d62:	f7f8 fc49 	bl	80005f8 <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d72:	f7f8 fa89 	bl	8000288 <__aeabi_dsub>
 8007d76:	f806 4b01 	strb.w	r4, [r6], #1
 8007d7a:	9d03      	ldr	r5, [sp, #12]
 8007d7c:	eba6 040a 	sub.w	r4, r6, sl
 8007d80:	42a5      	cmp	r5, r4
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	d133      	bne.n	8007df0 <_dtoa_r+0x6e0>
 8007d88:	f7f8 fa80 	bl	800028c <__adddf3>
 8007d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	f7f8 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d98:	b9c0      	cbnz	r0, 8007dcc <_dtoa_r+0x6bc>
 8007d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da6:	b110      	cbz	r0, 8007dae <_dtoa_r+0x69e>
 8007da8:	f018 0f01 	tst.w	r8, #1
 8007dac:	d10e      	bne.n	8007dcc <_dtoa_r+0x6bc>
 8007dae:	9902      	ldr	r1, [sp, #8]
 8007db0:	4648      	mov	r0, r9
 8007db2:	f000 fbbd 	bl	8008530 <_Bfree>
 8007db6:	2300      	movs	r3, #0
 8007db8:	7033      	strb	r3, [r6, #0]
 8007dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dbc:	3701      	adds	r7, #1
 8007dbe:	601f      	str	r7, [r3, #0]
 8007dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 824b 	beq.w	800825e <_dtoa_r+0xb4e>
 8007dc8:	601e      	str	r6, [r3, #0]
 8007dca:	e248      	b.n	800825e <_dtoa_r+0xb4e>
 8007dcc:	46b8      	mov	r8, r7
 8007dce:	4633      	mov	r3, r6
 8007dd0:	461e      	mov	r6, r3
 8007dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd6:	2a39      	cmp	r2, #57	@ 0x39
 8007dd8:	d106      	bne.n	8007de8 <_dtoa_r+0x6d8>
 8007dda:	459a      	cmp	sl, r3
 8007ddc:	d1f8      	bne.n	8007dd0 <_dtoa_r+0x6c0>
 8007dde:	2230      	movs	r2, #48	@ 0x30
 8007de0:	f108 0801 	add.w	r8, r8, #1
 8007de4:	f88a 2000 	strb.w	r2, [sl]
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	3201      	adds	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e7a0      	b.n	8007d32 <_dtoa_r+0x622>
 8007df0:	4b6f      	ldr	r3, [pc, #444]	@ (8007fb0 <_dtoa_r+0x8a0>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	f7f8 fc00 	bl	80005f8 <__aeabi_dmul>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	460d      	mov	r5, r1
 8007e00:	f7f8 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d09f      	beq.n	8007d48 <_dtoa_r+0x638>
 8007e08:	e7d1      	b.n	8007dae <_dtoa_r+0x69e>
 8007e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	f000 80ea 	beq.w	8007fe6 <_dtoa_r+0x8d6>
 8007e12:	9a07      	ldr	r2, [sp, #28]
 8007e14:	2a01      	cmp	r2, #1
 8007e16:	f300 80cd 	bgt.w	8007fb4 <_dtoa_r+0x8a4>
 8007e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	f000 80c1 	beq.w	8007fa4 <_dtoa_r+0x894>
 8007e22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e26:	9c08      	ldr	r4, [sp, #32]
 8007e28:	9e00      	ldr	r6, [sp, #0]
 8007e2a:	9a00      	ldr	r2, [sp, #0]
 8007e2c:	441a      	add	r2, r3
 8007e2e:	9200      	str	r2, [sp, #0]
 8007e30:	9a06      	ldr	r2, [sp, #24]
 8007e32:	2101      	movs	r1, #1
 8007e34:	441a      	add	r2, r3
 8007e36:	4648      	mov	r0, r9
 8007e38:	9206      	str	r2, [sp, #24]
 8007e3a:	f000 fc77 	bl	800872c <__i2b>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b166      	cbz	r6, 8007e5c <_dtoa_r+0x74c>
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dd09      	ble.n	8007e5c <_dtoa_r+0x74c>
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	9a00      	ldr	r2, [sp, #0]
 8007e4c:	bfa8      	it	ge
 8007e4e:	4633      	movge	r3, r6
 8007e50:	1ad2      	subs	r2, r2, r3
 8007e52:	9200      	str	r2, [sp, #0]
 8007e54:	9a06      	ldr	r2, [sp, #24]
 8007e56:	1af6      	subs	r6, r6, r3
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	9306      	str	r3, [sp, #24]
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	b30b      	cbz	r3, 8007ea4 <_dtoa_r+0x794>
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 80c6 	beq.w	8007ff4 <_dtoa_r+0x8e4>
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	f000 80c0 	beq.w	8007fee <_dtoa_r+0x8de>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4622      	mov	r2, r4
 8007e72:	4648      	mov	r0, r9
 8007e74:	f000 fd12 	bl	800889c <__pow5mult>
 8007e78:	9a02      	ldr	r2, [sp, #8]
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	4648      	mov	r0, r9
 8007e80:	f000 fc6a 	bl	8008758 <__multiply>
 8007e84:	9902      	ldr	r1, [sp, #8]
 8007e86:	4680      	mov	r8, r0
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fb51 	bl	8008530 <_Bfree>
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	1b1b      	subs	r3, r3, r4
 8007e92:	9308      	str	r3, [sp, #32]
 8007e94:	f000 80b1 	beq.w	8007ffa <_dtoa_r+0x8ea>
 8007e98:	9a08      	ldr	r2, [sp, #32]
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	4648      	mov	r0, r9
 8007e9e:	f000 fcfd 	bl	800889c <__pow5mult>
 8007ea2:	9002      	str	r0, [sp, #8]
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f000 fc40 	bl	800872c <__i2b>
 8007eac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eae:	4604      	mov	r4, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 81d8 	beq.w	8008266 <_dtoa_r+0xb56>
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4601      	mov	r1, r0
 8007eba:	4648      	mov	r0, r9
 8007ebc:	f000 fcee 	bl	800889c <__pow5mult>
 8007ec0:	9b07      	ldr	r3, [sp, #28]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	f300 809f 	bgt.w	8008008 <_dtoa_r+0x8f8>
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8097 	bne.w	8008000 <_dtoa_r+0x8f0>
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f040 8093 	bne.w	8008004 <_dtoa_r+0x8f4>
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ee4:	0d1b      	lsrs	r3, r3, #20
 8007ee6:	051b      	lsls	r3, r3, #20
 8007ee8:	b133      	cbz	r3, 8007ef8 <_dtoa_r+0x7e8>
 8007eea:	9b00      	ldr	r3, [sp, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	9b06      	ldr	r3, [sp, #24]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	9306      	str	r3, [sp, #24]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	9308      	str	r3, [sp, #32]
 8007efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 81b8 	beq.w	8008272 <_dtoa_r+0xb62>
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f08:	6918      	ldr	r0, [r3, #16]
 8007f0a:	f000 fbc3 	bl	8008694 <__hi0bits>
 8007f0e:	f1c0 0020 	rsb	r0, r0, #32
 8007f12:	9b06      	ldr	r3, [sp, #24]
 8007f14:	4418      	add	r0, r3
 8007f16:	f010 001f 	ands.w	r0, r0, #31
 8007f1a:	f000 8082 	beq.w	8008022 <_dtoa_r+0x912>
 8007f1e:	f1c0 0320 	rsb	r3, r0, #32
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	dd73      	ble.n	800800e <_dtoa_r+0x8fe>
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	f1c0 001c 	rsb	r0, r0, #28
 8007f2c:	4403      	add	r3, r0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	4403      	add	r3, r0
 8007f34:	4406      	add	r6, r0
 8007f36:	9306      	str	r3, [sp, #24]
 8007f38:	9b00      	ldr	r3, [sp, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x83a>
 8007f3e:	9902      	ldr	r1, [sp, #8]
 8007f40:	461a      	mov	r2, r3
 8007f42:	4648      	mov	r0, r9
 8007f44:	f000 fd04 	bl	8008950 <__lshift>
 8007f48:	9002      	str	r0, [sp, #8]
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd05      	ble.n	8007f5c <_dtoa_r+0x84c>
 8007f50:	4621      	mov	r1, r4
 8007f52:	461a      	mov	r2, r3
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fcfb 	bl	8008950 <__lshift>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d061      	beq.n	8008026 <_dtoa_r+0x916>
 8007f62:	9802      	ldr	r0, [sp, #8]
 8007f64:	4621      	mov	r1, r4
 8007f66:	f000 fd5f 	bl	8008a28 <__mcmp>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	da5b      	bge.n	8008026 <_dtoa_r+0x916>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9902      	ldr	r1, [sp, #8]
 8007f72:	220a      	movs	r2, #10
 8007f74:	4648      	mov	r0, r9
 8007f76:	f000 fafd 	bl	8008574 <__multadd>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	9002      	str	r0, [sp, #8]
 8007f7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8177 	beq.w	8008276 <_dtoa_r+0xb66>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	4648      	mov	r0, r9
 8007f90:	f000 faf0 	bl	8008574 <__multadd>
 8007f94:	f1bb 0f00 	cmp.w	fp, #0
 8007f98:	4605      	mov	r5, r0
 8007f9a:	dc6f      	bgt.n	800807c <_dtoa_r+0x96c>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dc49      	bgt.n	8008036 <_dtoa_r+0x926>
 8007fa2:	e06b      	b.n	800807c <_dtoa_r+0x96c>
 8007fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007faa:	e73c      	b.n	8007e26 <_dtoa_r+0x716>
 8007fac:	3fe00000 	.word	0x3fe00000
 8007fb0:	40240000 	.word	0x40240000
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	1e5c      	subs	r4, r3, #1
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	42a3      	cmp	r3, r4
 8007fbc:	db09      	blt.n	8007fd2 <_dtoa_r+0x8c2>
 8007fbe:	1b1c      	subs	r4, r3, r4
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f6bf af30 	bge.w	8007e28 <_dtoa_r+0x718>
 8007fc8:	9b00      	ldr	r3, [sp, #0]
 8007fca:	9a03      	ldr	r2, [sp, #12]
 8007fcc:	1a9e      	subs	r6, r3, r2
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e72b      	b.n	8007e2a <_dtoa_r+0x71a>
 8007fd2:	9b08      	ldr	r3, [sp, #32]
 8007fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fd6:	9408      	str	r4, [sp, #32]
 8007fd8:	1ae3      	subs	r3, r4, r3
 8007fda:	441a      	add	r2, r3
 8007fdc:	9e00      	ldr	r6, [sp, #0]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	e721      	b.n	8007e2a <_dtoa_r+0x71a>
 8007fe6:	9c08      	ldr	r4, [sp, #32]
 8007fe8:	9e00      	ldr	r6, [sp, #0]
 8007fea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007fec:	e728      	b.n	8007e40 <_dtoa_r+0x730>
 8007fee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ff2:	e751      	b.n	8007e98 <_dtoa_r+0x788>
 8007ff4:	9a08      	ldr	r2, [sp, #32]
 8007ff6:	9902      	ldr	r1, [sp, #8]
 8007ff8:	e750      	b.n	8007e9c <_dtoa_r+0x78c>
 8007ffa:	f8cd 8008 	str.w	r8, [sp, #8]
 8007ffe:	e751      	b.n	8007ea4 <_dtoa_r+0x794>
 8008000:	2300      	movs	r3, #0
 8008002:	e779      	b.n	8007ef8 <_dtoa_r+0x7e8>
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	e777      	b.n	8007ef8 <_dtoa_r+0x7e8>
 8008008:	2300      	movs	r3, #0
 800800a:	9308      	str	r3, [sp, #32]
 800800c:	e779      	b.n	8007f02 <_dtoa_r+0x7f2>
 800800e:	d093      	beq.n	8007f38 <_dtoa_r+0x828>
 8008010:	9a00      	ldr	r2, [sp, #0]
 8008012:	331c      	adds	r3, #28
 8008014:	441a      	add	r2, r3
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	441a      	add	r2, r3
 800801c:	441e      	add	r6, r3
 800801e:	9206      	str	r2, [sp, #24]
 8008020:	e78a      	b.n	8007f38 <_dtoa_r+0x828>
 8008022:	4603      	mov	r3, r0
 8008024:	e7f4      	b.n	8008010 <_dtoa_r+0x900>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	46b8      	mov	r8, r7
 800802c:	dc20      	bgt.n	8008070 <_dtoa_r+0x960>
 800802e:	469b      	mov	fp, r3
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	2b02      	cmp	r3, #2
 8008034:	dd1e      	ble.n	8008074 <_dtoa_r+0x964>
 8008036:	f1bb 0f00 	cmp.w	fp, #0
 800803a:	f47f adb1 	bne.w	8007ba0 <_dtoa_r+0x490>
 800803e:	4621      	mov	r1, r4
 8008040:	465b      	mov	r3, fp
 8008042:	2205      	movs	r2, #5
 8008044:	4648      	mov	r0, r9
 8008046:	f000 fa95 	bl	8008574 <__multadd>
 800804a:	4601      	mov	r1, r0
 800804c:	4604      	mov	r4, r0
 800804e:	9802      	ldr	r0, [sp, #8]
 8008050:	f000 fcea 	bl	8008a28 <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	f77f ada3 	ble.w	8007ba0 <_dtoa_r+0x490>
 800805a:	4656      	mov	r6, sl
 800805c:	2331      	movs	r3, #49	@ 0x31
 800805e:	f806 3b01 	strb.w	r3, [r6], #1
 8008062:	f108 0801 	add.w	r8, r8, #1
 8008066:	e59f      	b.n	8007ba8 <_dtoa_r+0x498>
 8008068:	9c03      	ldr	r4, [sp, #12]
 800806a:	46b8      	mov	r8, r7
 800806c:	4625      	mov	r5, r4
 800806e:	e7f4      	b.n	800805a <_dtoa_r+0x94a>
 8008070:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8101 	beq.w	800827e <_dtoa_r+0xb6e>
 800807c:	2e00      	cmp	r6, #0
 800807e:	dd05      	ble.n	800808c <_dtoa_r+0x97c>
 8008080:	4629      	mov	r1, r5
 8008082:	4632      	mov	r2, r6
 8008084:	4648      	mov	r0, r9
 8008086:	f000 fc63 	bl	8008950 <__lshift>
 800808a:	4605      	mov	r5, r0
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d05c      	beq.n	800814c <_dtoa_r+0xa3c>
 8008092:	6869      	ldr	r1, [r5, #4]
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fa0b 	bl	80084b0 <_Balloc>
 800809a:	4606      	mov	r6, r0
 800809c:	b928      	cbnz	r0, 80080aa <_dtoa_r+0x99a>
 800809e:	4b82      	ldr	r3, [pc, #520]	@ (80082a8 <_dtoa_r+0xb98>)
 80080a0:	4602      	mov	r2, r0
 80080a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080a6:	f7ff bb4a 	b.w	800773e <_dtoa_r+0x2e>
 80080aa:	692a      	ldr	r2, [r5, #16]
 80080ac:	3202      	adds	r2, #2
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	f105 010c 	add.w	r1, r5, #12
 80080b4:	300c      	adds	r0, #12
 80080b6:	f002 f92f 	bl	800a318 <memcpy>
 80080ba:	2201      	movs	r2, #1
 80080bc:	4631      	mov	r1, r6
 80080be:	4648      	mov	r0, r9
 80080c0:	f000 fc46 	bl	8008950 <__lshift>
 80080c4:	f10a 0301 	add.w	r3, sl, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	eb0a 030b 	add.w	r3, sl, fp
 80080ce:	9308      	str	r3, [sp, #32]
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	462f      	mov	r7, r5
 80080d8:	9306      	str	r3, [sp, #24]
 80080da:	4605      	mov	r5, r0
 80080dc:	9b00      	ldr	r3, [sp, #0]
 80080de:	9802      	ldr	r0, [sp, #8]
 80080e0:	4621      	mov	r1, r4
 80080e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80080e6:	f7ff fa89 	bl	80075fc <quorem>
 80080ea:	4603      	mov	r3, r0
 80080ec:	3330      	adds	r3, #48	@ 0x30
 80080ee:	9003      	str	r0, [sp, #12]
 80080f0:	4639      	mov	r1, r7
 80080f2:	9802      	ldr	r0, [sp, #8]
 80080f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f6:	f000 fc97 	bl	8008a28 <__mcmp>
 80080fa:	462a      	mov	r2, r5
 80080fc:	9004      	str	r0, [sp, #16]
 80080fe:	4621      	mov	r1, r4
 8008100:	4648      	mov	r0, r9
 8008102:	f000 fcad 	bl	8008a60 <__mdiff>
 8008106:	68c2      	ldr	r2, [r0, #12]
 8008108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810a:	4606      	mov	r6, r0
 800810c:	bb02      	cbnz	r2, 8008150 <_dtoa_r+0xa40>
 800810e:	4601      	mov	r1, r0
 8008110:	9802      	ldr	r0, [sp, #8]
 8008112:	f000 fc89 	bl	8008a28 <__mcmp>
 8008116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008118:	4602      	mov	r2, r0
 800811a:	4631      	mov	r1, r6
 800811c:	4648      	mov	r0, r9
 800811e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008120:	9309      	str	r3, [sp, #36]	@ 0x24
 8008122:	f000 fa05 	bl	8008530 <_Bfree>
 8008126:	9b07      	ldr	r3, [sp, #28]
 8008128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800812a:	9e00      	ldr	r6, [sp, #0]
 800812c:	ea42 0103 	orr.w	r1, r2, r3
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	4319      	orrs	r1, r3
 8008134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008136:	d10d      	bne.n	8008154 <_dtoa_r+0xa44>
 8008138:	2b39      	cmp	r3, #57	@ 0x39
 800813a:	d027      	beq.n	800818c <_dtoa_r+0xa7c>
 800813c:	9a04      	ldr	r2, [sp, #16]
 800813e:	2a00      	cmp	r2, #0
 8008140:	dd01      	ble.n	8008146 <_dtoa_r+0xa36>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	3331      	adds	r3, #49	@ 0x31
 8008146:	f88b 3000 	strb.w	r3, [fp]
 800814a:	e52e      	b.n	8007baa <_dtoa_r+0x49a>
 800814c:	4628      	mov	r0, r5
 800814e:	e7b9      	b.n	80080c4 <_dtoa_r+0x9b4>
 8008150:	2201      	movs	r2, #1
 8008152:	e7e2      	b.n	800811a <_dtoa_r+0xa0a>
 8008154:	9904      	ldr	r1, [sp, #16]
 8008156:	2900      	cmp	r1, #0
 8008158:	db04      	blt.n	8008164 <_dtoa_r+0xa54>
 800815a:	9807      	ldr	r0, [sp, #28]
 800815c:	4301      	orrs	r1, r0
 800815e:	9806      	ldr	r0, [sp, #24]
 8008160:	4301      	orrs	r1, r0
 8008162:	d120      	bne.n	80081a6 <_dtoa_r+0xa96>
 8008164:	2a00      	cmp	r2, #0
 8008166:	ddee      	ble.n	8008146 <_dtoa_r+0xa36>
 8008168:	9902      	ldr	r1, [sp, #8]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2201      	movs	r2, #1
 800816e:	4648      	mov	r0, r9
 8008170:	f000 fbee 	bl	8008950 <__lshift>
 8008174:	4621      	mov	r1, r4
 8008176:	9002      	str	r0, [sp, #8]
 8008178:	f000 fc56 	bl	8008a28 <__mcmp>
 800817c:	2800      	cmp	r0, #0
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	dc02      	bgt.n	8008188 <_dtoa_r+0xa78>
 8008182:	d1e0      	bne.n	8008146 <_dtoa_r+0xa36>
 8008184:	07da      	lsls	r2, r3, #31
 8008186:	d5de      	bpl.n	8008146 <_dtoa_r+0xa36>
 8008188:	2b39      	cmp	r3, #57	@ 0x39
 800818a:	d1da      	bne.n	8008142 <_dtoa_r+0xa32>
 800818c:	2339      	movs	r3, #57	@ 0x39
 800818e:	f88b 3000 	strb.w	r3, [fp]
 8008192:	4633      	mov	r3, r6
 8008194:	461e      	mov	r6, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800819c:	2a39      	cmp	r2, #57	@ 0x39
 800819e:	d04e      	beq.n	800823e <_dtoa_r+0xb2e>
 80081a0:	3201      	adds	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e501      	b.n	8007baa <_dtoa_r+0x49a>
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	dd03      	ble.n	80081b2 <_dtoa_r+0xaa2>
 80081aa:	2b39      	cmp	r3, #57	@ 0x39
 80081ac:	d0ee      	beq.n	800818c <_dtoa_r+0xa7c>
 80081ae:	3301      	adds	r3, #1
 80081b0:	e7c9      	b.n	8008146 <_dtoa_r+0xa36>
 80081b2:	9a00      	ldr	r2, [sp, #0]
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081ba:	428a      	cmp	r2, r1
 80081bc:	d028      	beq.n	8008210 <_dtoa_r+0xb00>
 80081be:	9902      	ldr	r1, [sp, #8]
 80081c0:	2300      	movs	r3, #0
 80081c2:	220a      	movs	r2, #10
 80081c4:	4648      	mov	r0, r9
 80081c6:	f000 f9d5 	bl	8008574 <__multadd>
 80081ca:	42af      	cmp	r7, r5
 80081cc:	9002      	str	r0, [sp, #8]
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	f04f 020a 	mov.w	r2, #10
 80081d6:	4639      	mov	r1, r7
 80081d8:	4648      	mov	r0, r9
 80081da:	d107      	bne.n	80081ec <_dtoa_r+0xadc>
 80081dc:	f000 f9ca 	bl	8008574 <__multadd>
 80081e0:	4607      	mov	r7, r0
 80081e2:	4605      	mov	r5, r0
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	e777      	b.n	80080dc <_dtoa_r+0x9cc>
 80081ec:	f000 f9c2 	bl	8008574 <__multadd>
 80081f0:	4629      	mov	r1, r5
 80081f2:	4607      	mov	r7, r0
 80081f4:	2300      	movs	r3, #0
 80081f6:	220a      	movs	r2, #10
 80081f8:	4648      	mov	r0, r9
 80081fa:	f000 f9bb 	bl	8008574 <__multadd>
 80081fe:	4605      	mov	r5, r0
 8008200:	e7f0      	b.n	80081e4 <_dtoa_r+0xad4>
 8008202:	f1bb 0f00 	cmp.w	fp, #0
 8008206:	bfcc      	ite	gt
 8008208:	465e      	movgt	r6, fp
 800820a:	2601      	movle	r6, #1
 800820c:	4456      	add	r6, sl
 800820e:	2700      	movs	r7, #0
 8008210:	9902      	ldr	r1, [sp, #8]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	2201      	movs	r2, #1
 8008216:	4648      	mov	r0, r9
 8008218:	f000 fb9a 	bl	8008950 <__lshift>
 800821c:	4621      	mov	r1, r4
 800821e:	9002      	str	r0, [sp, #8]
 8008220:	f000 fc02 	bl	8008a28 <__mcmp>
 8008224:	2800      	cmp	r0, #0
 8008226:	dcb4      	bgt.n	8008192 <_dtoa_r+0xa82>
 8008228:	d102      	bne.n	8008230 <_dtoa_r+0xb20>
 800822a:	9b00      	ldr	r3, [sp, #0]
 800822c:	07db      	lsls	r3, r3, #31
 800822e:	d4b0      	bmi.n	8008192 <_dtoa_r+0xa82>
 8008230:	4633      	mov	r3, r6
 8008232:	461e      	mov	r6, r3
 8008234:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008238:	2a30      	cmp	r2, #48	@ 0x30
 800823a:	d0fa      	beq.n	8008232 <_dtoa_r+0xb22>
 800823c:	e4b5      	b.n	8007baa <_dtoa_r+0x49a>
 800823e:	459a      	cmp	sl, r3
 8008240:	d1a8      	bne.n	8008194 <_dtoa_r+0xa84>
 8008242:	2331      	movs	r3, #49	@ 0x31
 8008244:	f108 0801 	add.w	r8, r8, #1
 8008248:	f88a 3000 	strb.w	r3, [sl]
 800824c:	e4ad      	b.n	8007baa <_dtoa_r+0x49a>
 800824e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008250:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80082ac <_dtoa_r+0xb9c>
 8008254:	b11b      	cbz	r3, 800825e <_dtoa_r+0xb4e>
 8008256:	f10a 0308 	add.w	r3, sl, #8
 800825a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	4650      	mov	r0, sl
 8008260:	b017      	add	sp, #92	@ 0x5c
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	9b07      	ldr	r3, [sp, #28]
 8008268:	2b01      	cmp	r3, #1
 800826a:	f77f ae2e 	ble.w	8007eca <_dtoa_r+0x7ba>
 800826e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008270:	9308      	str	r3, [sp, #32]
 8008272:	2001      	movs	r0, #1
 8008274:	e64d      	b.n	8007f12 <_dtoa_r+0x802>
 8008276:	f1bb 0f00 	cmp.w	fp, #0
 800827a:	f77f aed9 	ble.w	8008030 <_dtoa_r+0x920>
 800827e:	4656      	mov	r6, sl
 8008280:	9802      	ldr	r0, [sp, #8]
 8008282:	4621      	mov	r1, r4
 8008284:	f7ff f9ba 	bl	80075fc <quorem>
 8008288:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800828c:	f806 3b01 	strb.w	r3, [r6], #1
 8008290:	eba6 020a 	sub.w	r2, r6, sl
 8008294:	4593      	cmp	fp, r2
 8008296:	ddb4      	ble.n	8008202 <_dtoa_r+0xaf2>
 8008298:	9902      	ldr	r1, [sp, #8]
 800829a:	2300      	movs	r3, #0
 800829c:	220a      	movs	r2, #10
 800829e:	4648      	mov	r0, r9
 80082a0:	f000 f968 	bl	8008574 <__multadd>
 80082a4:	9002      	str	r0, [sp, #8]
 80082a6:	e7eb      	b.n	8008280 <_dtoa_r+0xb70>
 80082a8:	0800ad65 	.word	0x0800ad65
 80082ac:	0800ace9 	.word	0x0800ace9

080082b0 <_free_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d041      	beq.n	800833c <_free_r+0x8c>
 80082b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082bc:	1f0c      	subs	r4, r1, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb8      	it	lt
 80082c2:	18e4      	addlt	r4, r4, r3
 80082c4:	f000 f8e8 	bl	8008498 <__malloc_lock>
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <_free_r+0x90>)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x2c>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d8:	f000 b8e4 	b.w	80084a4 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x42>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x1e>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x4c>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x42>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1850      	adds	r0, r2, r1
 8008300:	42a0      	cmp	r0, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x6c>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	4401      	add	r1, r0
 8008308:	1850      	adds	r0, r2, r1
 800830a:	4283      	cmp	r3, r0
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x22>
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	4408      	add	r0, r1
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x22>
 800831c:	d902      	bls.n	8008324 <_free_r+0x74>
 800831e:	230c      	movs	r3, #12
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x22>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf04      	itt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	bf04      	itt	eq
 8008334:	1809      	addeq	r1, r1, r0
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	6054      	str	r4, [r2, #4]
 800833a:	e7ca      	b.n	80082d2 <_free_r+0x22>
 800833c:	bd38      	pop	{r3, r4, r5, pc}
 800833e:	bf00      	nop
 8008340:	200008c4 	.word	0x200008c4

08008344 <malloc>:
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <malloc+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f000 b825 	b.w	8008398 <_malloc_r>
 800834e:	bf00      	nop
 8008350:	20000020 	.word	0x20000020

08008354 <sbrk_aligned>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4e0f      	ldr	r6, [pc, #60]	@ (8008394 <sbrk_aligned+0x40>)
 8008358:	460c      	mov	r4, r1
 800835a:	6831      	ldr	r1, [r6, #0]
 800835c:	4605      	mov	r5, r0
 800835e:	b911      	cbnz	r1, 8008366 <sbrk_aligned+0x12>
 8008360:	f001 ffca 	bl	800a2f8 <_sbrk_r>
 8008364:	6030      	str	r0, [r6, #0]
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	f001 ffc5 	bl	800a2f8 <_sbrk_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d103      	bne.n	800837a <sbrk_aligned+0x26>
 8008372:	f04f 34ff 	mov.w	r4, #4294967295
 8008376:	4620      	mov	r0, r4
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	1cc4      	adds	r4, r0, #3
 800837c:	f024 0403 	bic.w	r4, r4, #3
 8008380:	42a0      	cmp	r0, r4
 8008382:	d0f8      	beq.n	8008376 <sbrk_aligned+0x22>
 8008384:	1a21      	subs	r1, r4, r0
 8008386:	4628      	mov	r0, r5
 8008388:	f001 ffb6 	bl	800a2f8 <_sbrk_r>
 800838c:	3001      	adds	r0, #1
 800838e:	d1f2      	bne.n	8008376 <sbrk_aligned+0x22>
 8008390:	e7ef      	b.n	8008372 <sbrk_aligned+0x1e>
 8008392:	bf00      	nop
 8008394:	200008c0 	.word	0x200008c0

08008398 <_malloc_r>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	1ccd      	adds	r5, r1, #3
 800839e:	f025 0503 	bic.w	r5, r5, #3
 80083a2:	3508      	adds	r5, #8
 80083a4:	2d0c      	cmp	r5, #12
 80083a6:	bf38      	it	cc
 80083a8:	250c      	movcc	r5, #12
 80083aa:	2d00      	cmp	r5, #0
 80083ac:	4606      	mov	r6, r0
 80083ae:	db01      	blt.n	80083b4 <_malloc_r+0x1c>
 80083b0:	42a9      	cmp	r1, r5
 80083b2:	d904      	bls.n	80083be <_malloc_r+0x26>
 80083b4:	230c      	movs	r3, #12
 80083b6:	6033      	str	r3, [r6, #0]
 80083b8:	2000      	movs	r0, #0
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008494 <_malloc_r+0xfc>
 80083c2:	f000 f869 	bl	8008498 <__malloc_lock>
 80083c6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ca:	461c      	mov	r4, r3
 80083cc:	bb44      	cbnz	r4, 8008420 <_malloc_r+0x88>
 80083ce:	4629      	mov	r1, r5
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff ffbf 	bl	8008354 <sbrk_aligned>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	4604      	mov	r4, r0
 80083da:	d158      	bne.n	800848e <_malloc_r+0xf6>
 80083dc:	f8d8 4000 	ldr.w	r4, [r8]
 80083e0:	4627      	mov	r7, r4
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d143      	bne.n	800846e <_malloc_r+0xd6>
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d04b      	beq.n	8008482 <_malloc_r+0xea>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	4639      	mov	r1, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	eb04 0903 	add.w	r9, r4, r3
 80083f4:	f001 ff80 	bl	800a2f8 <_sbrk_r>
 80083f8:	4581      	cmp	r9, r0
 80083fa:	d142      	bne.n	8008482 <_malloc_r+0xea>
 80083fc:	6821      	ldr	r1, [r4, #0]
 80083fe:	1a6d      	subs	r5, r5, r1
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ffa6 	bl	8008354 <sbrk_aligned>
 8008408:	3001      	adds	r0, #1
 800840a:	d03a      	beq.n	8008482 <_malloc_r+0xea>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	442b      	add	r3, r5
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	f8d8 3000 	ldr.w	r3, [r8]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	bb62      	cbnz	r2, 8008474 <_malloc_r+0xdc>
 800841a:	f8c8 7000 	str.w	r7, [r8]
 800841e:	e00f      	b.n	8008440 <_malloc_r+0xa8>
 8008420:	6822      	ldr	r2, [r4, #0]
 8008422:	1b52      	subs	r2, r2, r5
 8008424:	d420      	bmi.n	8008468 <_malloc_r+0xd0>
 8008426:	2a0b      	cmp	r2, #11
 8008428:	d917      	bls.n	800845a <_malloc_r+0xc2>
 800842a:	1961      	adds	r1, r4, r5
 800842c:	42a3      	cmp	r3, r4
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	bf18      	it	ne
 8008432:	6059      	strne	r1, [r3, #4]
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	bf08      	it	eq
 8008438:	f8c8 1000 	streq.w	r1, [r8]
 800843c:	5162      	str	r2, [r4, r5]
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f82f 	bl	80084a4 <__malloc_unlock>
 8008446:	f104 000b 	add.w	r0, r4, #11
 800844a:	1d23      	adds	r3, r4, #4
 800844c:	f020 0007 	bic.w	r0, r0, #7
 8008450:	1ac2      	subs	r2, r0, r3
 8008452:	bf1c      	itt	ne
 8008454:	1a1b      	subne	r3, r3, r0
 8008456:	50a3      	strne	r3, [r4, r2]
 8008458:	e7af      	b.n	80083ba <_malloc_r+0x22>
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	42a3      	cmp	r3, r4
 800845e:	bf0c      	ite	eq
 8008460:	f8c8 2000 	streq.w	r2, [r8]
 8008464:	605a      	strne	r2, [r3, #4]
 8008466:	e7eb      	b.n	8008440 <_malloc_r+0xa8>
 8008468:	4623      	mov	r3, r4
 800846a:	6864      	ldr	r4, [r4, #4]
 800846c:	e7ae      	b.n	80083cc <_malloc_r+0x34>
 800846e:	463c      	mov	r4, r7
 8008470:	687f      	ldr	r7, [r7, #4]
 8008472:	e7b6      	b.n	80083e2 <_malloc_r+0x4a>
 8008474:	461a      	mov	r2, r3
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	42a3      	cmp	r3, r4
 800847a:	d1fb      	bne.n	8008474 <_malloc_r+0xdc>
 800847c:	2300      	movs	r3, #0
 800847e:	6053      	str	r3, [r2, #4]
 8008480:	e7de      	b.n	8008440 <_malloc_r+0xa8>
 8008482:	230c      	movs	r3, #12
 8008484:	6033      	str	r3, [r6, #0]
 8008486:	4630      	mov	r0, r6
 8008488:	f000 f80c 	bl	80084a4 <__malloc_unlock>
 800848c:	e794      	b.n	80083b8 <_malloc_r+0x20>
 800848e:	6005      	str	r5, [r0, #0]
 8008490:	e7d6      	b.n	8008440 <_malloc_r+0xa8>
 8008492:	bf00      	nop
 8008494:	200008c4 	.word	0x200008c4

08008498 <__malloc_lock>:
 8008498:	4801      	ldr	r0, [pc, #4]	@ (80084a0 <__malloc_lock+0x8>)
 800849a:	f7ff b8a6 	b.w	80075ea <__retarget_lock_acquire_recursive>
 800849e:	bf00      	nop
 80084a0:	200008bc 	.word	0x200008bc

080084a4 <__malloc_unlock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	@ (80084ac <__malloc_unlock+0x8>)
 80084a6:	f7ff b8a1 	b.w	80075ec <__retarget_lock_release_recursive>
 80084aa:	bf00      	nop
 80084ac:	200008bc 	.word	0x200008bc

080084b0 <_Balloc>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	69c6      	ldr	r6, [r0, #28]
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	b976      	cbnz	r6, 80084d8 <_Balloc+0x28>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7ff ff42 	bl	8008344 <malloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	61e0      	str	r0, [r4, #28]
 80084c4:	b920      	cbnz	r0, 80084d0 <_Balloc+0x20>
 80084c6:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <_Balloc+0x78>)
 80084c8:	4818      	ldr	r0, [pc, #96]	@ (800852c <_Balloc+0x7c>)
 80084ca:	216b      	movs	r1, #107	@ 0x6b
 80084cc:	f001 ff3c 	bl	800a348 <__assert_func>
 80084d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d4:	6006      	str	r6, [r0, #0]
 80084d6:	60c6      	str	r6, [r0, #12]
 80084d8:	69e6      	ldr	r6, [r4, #28]
 80084da:	68f3      	ldr	r3, [r6, #12]
 80084dc:	b183      	cbz	r3, 8008500 <_Balloc+0x50>
 80084de:	69e3      	ldr	r3, [r4, #28]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084e6:	b9b8      	cbnz	r0, 8008518 <_Balloc+0x68>
 80084e8:	2101      	movs	r1, #1
 80084ea:	fa01 f605 	lsl.w	r6, r1, r5
 80084ee:	1d72      	adds	r2, r6, #5
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	4620      	mov	r0, r4
 80084f4:	f001 ff46 	bl	800a384 <_calloc_r>
 80084f8:	b160      	cbz	r0, 8008514 <_Balloc+0x64>
 80084fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084fe:	e00e      	b.n	800851e <_Balloc+0x6e>
 8008500:	2221      	movs	r2, #33	@ 0x21
 8008502:	2104      	movs	r1, #4
 8008504:	4620      	mov	r0, r4
 8008506:	f001 ff3d 	bl	800a384 <_calloc_r>
 800850a:	69e3      	ldr	r3, [r4, #28]
 800850c:	60f0      	str	r0, [r6, #12]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e4      	bne.n	80084de <_Balloc+0x2e>
 8008514:	2000      	movs	r0, #0
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	6802      	ldr	r2, [r0, #0]
 800851a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800851e:	2300      	movs	r3, #0
 8008520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008524:	e7f7      	b.n	8008516 <_Balloc+0x66>
 8008526:	bf00      	nop
 8008528:	0800acf6 	.word	0x0800acf6
 800852c:	0800ad76 	.word	0x0800ad76

08008530 <_Bfree>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	69c6      	ldr	r6, [r0, #28]
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	b976      	cbnz	r6, 8008558 <_Bfree+0x28>
 800853a:	2010      	movs	r0, #16
 800853c:	f7ff ff02 	bl	8008344 <malloc>
 8008540:	4602      	mov	r2, r0
 8008542:	61e8      	str	r0, [r5, #28]
 8008544:	b920      	cbnz	r0, 8008550 <_Bfree+0x20>
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <_Bfree+0x3c>)
 8008548:	4809      	ldr	r0, [pc, #36]	@ (8008570 <_Bfree+0x40>)
 800854a:	218f      	movs	r1, #143	@ 0x8f
 800854c:	f001 fefc 	bl	800a348 <__assert_func>
 8008550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008554:	6006      	str	r6, [r0, #0]
 8008556:	60c6      	str	r6, [r0, #12]
 8008558:	b13c      	cbz	r4, 800856a <_Bfree+0x3a>
 800855a:	69eb      	ldr	r3, [r5, #28]
 800855c:	6862      	ldr	r2, [r4, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008564:	6021      	str	r1, [r4, #0]
 8008566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	0800acf6 	.word	0x0800acf6
 8008570:	0800ad76 	.word	0x0800ad76

08008574 <__multadd>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	690d      	ldr	r5, [r1, #16]
 800857a:	4607      	mov	r7, r0
 800857c:	460c      	mov	r4, r1
 800857e:	461e      	mov	r6, r3
 8008580:	f101 0c14 	add.w	ip, r1, #20
 8008584:	2000      	movs	r0, #0
 8008586:	f8dc 3000 	ldr.w	r3, [ip]
 800858a:	b299      	uxth	r1, r3
 800858c:	fb02 6101 	mla	r1, r2, r1, r6
 8008590:	0c1e      	lsrs	r6, r3, #16
 8008592:	0c0b      	lsrs	r3, r1, #16
 8008594:	fb02 3306 	mla	r3, r2, r6, r3
 8008598:	b289      	uxth	r1, r1
 800859a:	3001      	adds	r0, #1
 800859c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085a0:	4285      	cmp	r5, r0
 80085a2:	f84c 1b04 	str.w	r1, [ip], #4
 80085a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085aa:	dcec      	bgt.n	8008586 <__multadd+0x12>
 80085ac:	b30e      	cbz	r6, 80085f2 <__multadd+0x7e>
 80085ae:	68a3      	ldr	r3, [r4, #8]
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dc19      	bgt.n	80085e8 <__multadd+0x74>
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	4638      	mov	r0, r7
 80085b8:	3101      	adds	r1, #1
 80085ba:	f7ff ff79 	bl	80084b0 <_Balloc>
 80085be:	4680      	mov	r8, r0
 80085c0:	b928      	cbnz	r0, 80085ce <__multadd+0x5a>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b0c      	ldr	r3, [pc, #48]	@ (80085f8 <__multadd+0x84>)
 80085c6:	480d      	ldr	r0, [pc, #52]	@ (80085fc <__multadd+0x88>)
 80085c8:	21ba      	movs	r1, #186	@ 0xba
 80085ca:	f001 febd 	bl	800a348 <__assert_func>
 80085ce:	6922      	ldr	r2, [r4, #16]
 80085d0:	3202      	adds	r2, #2
 80085d2:	f104 010c 	add.w	r1, r4, #12
 80085d6:	0092      	lsls	r2, r2, #2
 80085d8:	300c      	adds	r0, #12
 80085da:	f001 fe9d 	bl	800a318 <memcpy>
 80085de:	4621      	mov	r1, r4
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ffa5 	bl	8008530 <_Bfree>
 80085e6:	4644      	mov	r4, r8
 80085e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085ec:	3501      	adds	r5, #1
 80085ee:	615e      	str	r6, [r3, #20]
 80085f0:	6125      	str	r5, [r4, #16]
 80085f2:	4620      	mov	r0, r4
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	0800ad65 	.word	0x0800ad65
 80085fc:	0800ad76 	.word	0x0800ad76

08008600 <__s2b>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	460c      	mov	r4, r1
 8008606:	4615      	mov	r5, r2
 8008608:	461f      	mov	r7, r3
 800860a:	2209      	movs	r2, #9
 800860c:	3308      	adds	r3, #8
 800860e:	4606      	mov	r6, r0
 8008610:	fb93 f3f2 	sdiv	r3, r3, r2
 8008614:	2100      	movs	r1, #0
 8008616:	2201      	movs	r2, #1
 8008618:	429a      	cmp	r2, r3
 800861a:	db09      	blt.n	8008630 <__s2b+0x30>
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ff47 	bl	80084b0 <_Balloc>
 8008622:	b940      	cbnz	r0, 8008636 <__s2b+0x36>
 8008624:	4602      	mov	r2, r0
 8008626:	4b19      	ldr	r3, [pc, #100]	@ (800868c <__s2b+0x8c>)
 8008628:	4819      	ldr	r0, [pc, #100]	@ (8008690 <__s2b+0x90>)
 800862a:	21d3      	movs	r1, #211	@ 0xd3
 800862c:	f001 fe8c 	bl	800a348 <__assert_func>
 8008630:	0052      	lsls	r2, r2, #1
 8008632:	3101      	adds	r1, #1
 8008634:	e7f0      	b.n	8008618 <__s2b+0x18>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	6143      	str	r3, [r0, #20]
 800863a:	2d09      	cmp	r5, #9
 800863c:	f04f 0301 	mov.w	r3, #1
 8008640:	6103      	str	r3, [r0, #16]
 8008642:	dd16      	ble.n	8008672 <__s2b+0x72>
 8008644:	f104 0909 	add.w	r9, r4, #9
 8008648:	46c8      	mov	r8, r9
 800864a:	442c      	add	r4, r5
 800864c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008650:	4601      	mov	r1, r0
 8008652:	3b30      	subs	r3, #48	@ 0x30
 8008654:	220a      	movs	r2, #10
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff8c 	bl	8008574 <__multadd>
 800865c:	45a0      	cmp	r8, r4
 800865e:	d1f5      	bne.n	800864c <__s2b+0x4c>
 8008660:	f1a5 0408 	sub.w	r4, r5, #8
 8008664:	444c      	add	r4, r9
 8008666:	1b2d      	subs	r5, r5, r4
 8008668:	1963      	adds	r3, r4, r5
 800866a:	42bb      	cmp	r3, r7
 800866c:	db04      	blt.n	8008678 <__s2b+0x78>
 800866e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008672:	340a      	adds	r4, #10
 8008674:	2509      	movs	r5, #9
 8008676:	e7f6      	b.n	8008666 <__s2b+0x66>
 8008678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800867c:	4601      	mov	r1, r0
 800867e:	3b30      	subs	r3, #48	@ 0x30
 8008680:	220a      	movs	r2, #10
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ff76 	bl	8008574 <__multadd>
 8008688:	e7ee      	b.n	8008668 <__s2b+0x68>
 800868a:	bf00      	nop
 800868c:	0800ad65 	.word	0x0800ad65
 8008690:	0800ad76 	.word	0x0800ad76

08008694 <__hi0bits>:
 8008694:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008698:	4603      	mov	r3, r0
 800869a:	bf36      	itet	cc
 800869c:	0403      	lslcc	r3, r0, #16
 800869e:	2000      	movcs	r0, #0
 80086a0:	2010      	movcc	r0, #16
 80086a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086a6:	bf3c      	itt	cc
 80086a8:	021b      	lslcc	r3, r3, #8
 80086aa:	3008      	addcc	r0, #8
 80086ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b0:	bf3c      	itt	cc
 80086b2:	011b      	lslcc	r3, r3, #4
 80086b4:	3004      	addcc	r0, #4
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ba:	bf3c      	itt	cc
 80086bc:	009b      	lslcc	r3, r3, #2
 80086be:	3002      	addcc	r0, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db05      	blt.n	80086d0 <__hi0bits+0x3c>
 80086c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086c8:	f100 0001 	add.w	r0, r0, #1
 80086cc:	bf08      	it	eq
 80086ce:	2020      	moveq	r0, #32
 80086d0:	4770      	bx	lr

080086d2 <__lo0bits>:
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	4602      	mov	r2, r0
 80086d6:	f013 0007 	ands.w	r0, r3, #7
 80086da:	d00b      	beq.n	80086f4 <__lo0bits+0x22>
 80086dc:	07d9      	lsls	r1, r3, #31
 80086de:	d421      	bmi.n	8008724 <__lo0bits+0x52>
 80086e0:	0798      	lsls	r0, r3, #30
 80086e2:	bf49      	itett	mi
 80086e4:	085b      	lsrmi	r3, r3, #1
 80086e6:	089b      	lsrpl	r3, r3, #2
 80086e8:	2001      	movmi	r0, #1
 80086ea:	6013      	strmi	r3, [r2, #0]
 80086ec:	bf5c      	itt	pl
 80086ee:	6013      	strpl	r3, [r2, #0]
 80086f0:	2002      	movpl	r0, #2
 80086f2:	4770      	bx	lr
 80086f4:	b299      	uxth	r1, r3
 80086f6:	b909      	cbnz	r1, 80086fc <__lo0bits+0x2a>
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	2010      	movs	r0, #16
 80086fc:	b2d9      	uxtb	r1, r3
 80086fe:	b909      	cbnz	r1, 8008704 <__lo0bits+0x32>
 8008700:	3008      	adds	r0, #8
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	0719      	lsls	r1, r3, #28
 8008706:	bf04      	itt	eq
 8008708:	091b      	lsreq	r3, r3, #4
 800870a:	3004      	addeq	r0, #4
 800870c:	0799      	lsls	r1, r3, #30
 800870e:	bf04      	itt	eq
 8008710:	089b      	lsreq	r3, r3, #2
 8008712:	3002      	addeq	r0, #2
 8008714:	07d9      	lsls	r1, r3, #31
 8008716:	d403      	bmi.n	8008720 <__lo0bits+0x4e>
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	f100 0001 	add.w	r0, r0, #1
 800871e:	d003      	beq.n	8008728 <__lo0bits+0x56>
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	4770      	bx	lr
 8008724:	2000      	movs	r0, #0
 8008726:	4770      	bx	lr
 8008728:	2020      	movs	r0, #32
 800872a:	4770      	bx	lr

0800872c <__i2b>:
 800872c:	b510      	push	{r4, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	2101      	movs	r1, #1
 8008732:	f7ff febd 	bl	80084b0 <_Balloc>
 8008736:	4602      	mov	r2, r0
 8008738:	b928      	cbnz	r0, 8008746 <__i2b+0x1a>
 800873a:	4b05      	ldr	r3, [pc, #20]	@ (8008750 <__i2b+0x24>)
 800873c:	4805      	ldr	r0, [pc, #20]	@ (8008754 <__i2b+0x28>)
 800873e:	f240 1145 	movw	r1, #325	@ 0x145
 8008742:	f001 fe01 	bl	800a348 <__assert_func>
 8008746:	2301      	movs	r3, #1
 8008748:	6144      	str	r4, [r0, #20]
 800874a:	6103      	str	r3, [r0, #16]
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	0800ad65 	.word	0x0800ad65
 8008754:	0800ad76 	.word	0x0800ad76

08008758 <__multiply>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4617      	mov	r7, r2
 800875e:	690a      	ldr	r2, [r1, #16]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	429a      	cmp	r2, r3
 8008764:	bfa8      	it	ge
 8008766:	463b      	movge	r3, r7
 8008768:	4689      	mov	r9, r1
 800876a:	bfa4      	itt	ge
 800876c:	460f      	movge	r7, r1
 800876e:	4699      	movge	r9, r3
 8008770:	693d      	ldr	r5, [r7, #16]
 8008772:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	eb05 060a 	add.w	r6, r5, sl
 800877e:	42b3      	cmp	r3, r6
 8008780:	b085      	sub	sp, #20
 8008782:	bfb8      	it	lt
 8008784:	3101      	addlt	r1, #1
 8008786:	f7ff fe93 	bl	80084b0 <_Balloc>
 800878a:	b930      	cbnz	r0, 800879a <__multiply+0x42>
 800878c:	4602      	mov	r2, r0
 800878e:	4b41      	ldr	r3, [pc, #260]	@ (8008894 <__multiply+0x13c>)
 8008790:	4841      	ldr	r0, [pc, #260]	@ (8008898 <__multiply+0x140>)
 8008792:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008796:	f001 fdd7 	bl	800a348 <__assert_func>
 800879a:	f100 0414 	add.w	r4, r0, #20
 800879e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087a2:	4623      	mov	r3, r4
 80087a4:	2200      	movs	r2, #0
 80087a6:	4573      	cmp	r3, lr
 80087a8:	d320      	bcc.n	80087ec <__multiply+0x94>
 80087aa:	f107 0814 	add.w	r8, r7, #20
 80087ae:	f109 0114 	add.w	r1, r9, #20
 80087b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	1beb      	subs	r3, r5, r7
 80087be:	3b15      	subs	r3, #21
 80087c0:	f023 0303 	bic.w	r3, r3, #3
 80087c4:	3304      	adds	r3, #4
 80087c6:	3715      	adds	r7, #21
 80087c8:	42bd      	cmp	r5, r7
 80087ca:	bf38      	it	cc
 80087cc:	2304      	movcc	r3, #4
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	9103      	str	r1, [sp, #12]
 80087d4:	428b      	cmp	r3, r1
 80087d6:	d80c      	bhi.n	80087f2 <__multiply+0x9a>
 80087d8:	2e00      	cmp	r6, #0
 80087da:	dd03      	ble.n	80087e4 <__multiply+0x8c>
 80087dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d055      	beq.n	8008890 <__multiply+0x138>
 80087e4:	6106      	str	r6, [r0, #16]
 80087e6:	b005      	add	sp, #20
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	f843 2b04 	str.w	r2, [r3], #4
 80087f0:	e7d9      	b.n	80087a6 <__multiply+0x4e>
 80087f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80087f6:	f1ba 0f00 	cmp.w	sl, #0
 80087fa:	d01f      	beq.n	800883c <__multiply+0xe4>
 80087fc:	46c4      	mov	ip, r8
 80087fe:	46a1      	mov	r9, r4
 8008800:	2700      	movs	r7, #0
 8008802:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008806:	f8d9 3000 	ldr.w	r3, [r9]
 800880a:	fa1f fb82 	uxth.w	fp, r2
 800880e:	b29b      	uxth	r3, r3
 8008810:	fb0a 330b 	mla	r3, sl, fp, r3
 8008814:	443b      	add	r3, r7
 8008816:	f8d9 7000 	ldr.w	r7, [r9]
 800881a:	0c12      	lsrs	r2, r2, #16
 800881c:	0c3f      	lsrs	r7, r7, #16
 800881e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008822:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008826:	b29b      	uxth	r3, r3
 8008828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800882c:	4565      	cmp	r5, ip
 800882e:	f849 3b04 	str.w	r3, [r9], #4
 8008832:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008836:	d8e4      	bhi.n	8008802 <__multiply+0xaa>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	50e7      	str	r7, [r4, r3]
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008842:	3104      	adds	r1, #4
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	d020      	beq.n	800888c <__multiply+0x134>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4647      	mov	r7, r8
 800884e:	46a4      	mov	ip, r4
 8008850:	f04f 0a00 	mov.w	sl, #0
 8008854:	f8b7 b000 	ldrh.w	fp, [r7]
 8008858:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800885c:	fb09 220b 	mla	r2, r9, fp, r2
 8008860:	4452      	add	r2, sl
 8008862:	b29b      	uxth	r3, r3
 8008864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008868:	f84c 3b04 	str.w	r3, [ip], #4
 800886c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008874:	f8bc 3000 	ldrh.w	r3, [ip]
 8008878:	fb09 330a 	mla	r3, r9, sl, r3
 800887c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008880:	42bd      	cmp	r5, r7
 8008882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008886:	d8e5      	bhi.n	8008854 <__multiply+0xfc>
 8008888:	9a01      	ldr	r2, [sp, #4]
 800888a:	50a3      	str	r3, [r4, r2]
 800888c:	3404      	adds	r4, #4
 800888e:	e79f      	b.n	80087d0 <__multiply+0x78>
 8008890:	3e01      	subs	r6, #1
 8008892:	e7a1      	b.n	80087d8 <__multiply+0x80>
 8008894:	0800ad65 	.word	0x0800ad65
 8008898:	0800ad76 	.word	0x0800ad76

0800889c <__pow5mult>:
 800889c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a0:	4615      	mov	r5, r2
 80088a2:	f012 0203 	ands.w	r2, r2, #3
 80088a6:	4607      	mov	r7, r0
 80088a8:	460e      	mov	r6, r1
 80088aa:	d007      	beq.n	80088bc <__pow5mult+0x20>
 80088ac:	4c25      	ldr	r4, [pc, #148]	@ (8008944 <__pow5mult+0xa8>)
 80088ae:	3a01      	subs	r2, #1
 80088b0:	2300      	movs	r3, #0
 80088b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088b6:	f7ff fe5d 	bl	8008574 <__multadd>
 80088ba:	4606      	mov	r6, r0
 80088bc:	10ad      	asrs	r5, r5, #2
 80088be:	d03d      	beq.n	800893c <__pow5mult+0xa0>
 80088c0:	69fc      	ldr	r4, [r7, #28]
 80088c2:	b97c      	cbnz	r4, 80088e4 <__pow5mult+0x48>
 80088c4:	2010      	movs	r0, #16
 80088c6:	f7ff fd3d 	bl	8008344 <malloc>
 80088ca:	4602      	mov	r2, r0
 80088cc:	61f8      	str	r0, [r7, #28]
 80088ce:	b928      	cbnz	r0, 80088dc <__pow5mult+0x40>
 80088d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008948 <__pow5mult+0xac>)
 80088d2:	481e      	ldr	r0, [pc, #120]	@ (800894c <__pow5mult+0xb0>)
 80088d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088d8:	f001 fd36 	bl	800a348 <__assert_func>
 80088dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e0:	6004      	str	r4, [r0, #0]
 80088e2:	60c4      	str	r4, [r0, #12]
 80088e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088ec:	b94c      	cbnz	r4, 8008902 <__pow5mult+0x66>
 80088ee:	f240 2171 	movw	r1, #625	@ 0x271
 80088f2:	4638      	mov	r0, r7
 80088f4:	f7ff ff1a 	bl	800872c <__i2b>
 80088f8:	2300      	movs	r3, #0
 80088fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80088fe:	4604      	mov	r4, r0
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	f04f 0900 	mov.w	r9, #0
 8008906:	07eb      	lsls	r3, r5, #31
 8008908:	d50a      	bpl.n	8008920 <__pow5mult+0x84>
 800890a:	4631      	mov	r1, r6
 800890c:	4622      	mov	r2, r4
 800890e:	4638      	mov	r0, r7
 8008910:	f7ff ff22 	bl	8008758 <__multiply>
 8008914:	4631      	mov	r1, r6
 8008916:	4680      	mov	r8, r0
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fe09 	bl	8008530 <_Bfree>
 800891e:	4646      	mov	r6, r8
 8008920:	106d      	asrs	r5, r5, #1
 8008922:	d00b      	beq.n	800893c <__pow5mult+0xa0>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	b938      	cbnz	r0, 8008938 <__pow5mult+0x9c>
 8008928:	4622      	mov	r2, r4
 800892a:	4621      	mov	r1, r4
 800892c:	4638      	mov	r0, r7
 800892e:	f7ff ff13 	bl	8008758 <__multiply>
 8008932:	6020      	str	r0, [r4, #0]
 8008934:	f8c0 9000 	str.w	r9, [r0]
 8008938:	4604      	mov	r4, r0
 800893a:	e7e4      	b.n	8008906 <__pow5mult+0x6a>
 800893c:	4630      	mov	r0, r6
 800893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008942:	bf00      	nop
 8008944:	0800ae88 	.word	0x0800ae88
 8008948:	0800acf6 	.word	0x0800acf6
 800894c:	0800ad76 	.word	0x0800ad76

08008950 <__lshift>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	6849      	ldr	r1, [r1, #4]
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	4607      	mov	r7, r0
 8008962:	4691      	mov	r9, r2
 8008964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008968:	f108 0601 	add.w	r6, r8, #1
 800896c:	42b3      	cmp	r3, r6
 800896e:	db0b      	blt.n	8008988 <__lshift+0x38>
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff fd9d 	bl	80084b0 <_Balloc>
 8008976:	4605      	mov	r5, r0
 8008978:	b948      	cbnz	r0, 800898e <__lshift+0x3e>
 800897a:	4602      	mov	r2, r0
 800897c:	4b28      	ldr	r3, [pc, #160]	@ (8008a20 <__lshift+0xd0>)
 800897e:	4829      	ldr	r0, [pc, #164]	@ (8008a24 <__lshift+0xd4>)
 8008980:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008984:	f001 fce0 	bl	800a348 <__assert_func>
 8008988:	3101      	adds	r1, #1
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	e7ee      	b.n	800896c <__lshift+0x1c>
 800898e:	2300      	movs	r3, #0
 8008990:	f100 0114 	add.w	r1, r0, #20
 8008994:	f100 0210 	add.w	r2, r0, #16
 8008998:	4618      	mov	r0, r3
 800899a:	4553      	cmp	r3, sl
 800899c:	db33      	blt.n	8008a06 <__lshift+0xb6>
 800899e:	6920      	ldr	r0, [r4, #16]
 80089a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089a4:	f104 0314 	add.w	r3, r4, #20
 80089a8:	f019 091f 	ands.w	r9, r9, #31
 80089ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089b4:	d02b      	beq.n	8008a0e <__lshift+0xbe>
 80089b6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ba:	468a      	mov	sl, r1
 80089bc:	2200      	movs	r2, #0
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	fa00 f009 	lsl.w	r0, r0, r9
 80089c4:	4310      	orrs	r0, r2
 80089c6:	f84a 0b04 	str.w	r0, [sl], #4
 80089ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ce:	459c      	cmp	ip, r3
 80089d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089d4:	d8f3      	bhi.n	80089be <__lshift+0x6e>
 80089d6:	ebac 0304 	sub.w	r3, ip, r4
 80089da:	3b15      	subs	r3, #21
 80089dc:	f023 0303 	bic.w	r3, r3, #3
 80089e0:	3304      	adds	r3, #4
 80089e2:	f104 0015 	add.w	r0, r4, #21
 80089e6:	4560      	cmp	r0, ip
 80089e8:	bf88      	it	hi
 80089ea:	2304      	movhi	r3, #4
 80089ec:	50ca      	str	r2, [r1, r3]
 80089ee:	b10a      	cbz	r2, 80089f4 <__lshift+0xa4>
 80089f0:	f108 0602 	add.w	r6, r8, #2
 80089f4:	3e01      	subs	r6, #1
 80089f6:	4638      	mov	r0, r7
 80089f8:	612e      	str	r6, [r5, #16]
 80089fa:	4621      	mov	r1, r4
 80089fc:	f7ff fd98 	bl	8008530 <_Bfree>
 8008a00:	4628      	mov	r0, r5
 8008a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	e7c5      	b.n	800899a <__lshift+0x4a>
 8008a0e:	3904      	subs	r1, #4
 8008a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a18:	459c      	cmp	ip, r3
 8008a1a:	d8f9      	bhi.n	8008a10 <__lshift+0xc0>
 8008a1c:	e7ea      	b.n	80089f4 <__lshift+0xa4>
 8008a1e:	bf00      	nop
 8008a20:	0800ad65 	.word	0x0800ad65
 8008a24:	0800ad76 	.word	0x0800ad76

08008a28 <__mcmp>:
 8008a28:	690a      	ldr	r2, [r1, #16]
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6900      	ldr	r0, [r0, #16]
 8008a2e:	1a80      	subs	r0, r0, r2
 8008a30:	b530      	push	{r4, r5, lr}
 8008a32:	d10e      	bne.n	8008a52 <__mcmp+0x2a>
 8008a34:	3314      	adds	r3, #20
 8008a36:	3114      	adds	r1, #20
 8008a38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a48:	4295      	cmp	r5, r2
 8008a4a:	d003      	beq.n	8008a54 <__mcmp+0x2c>
 8008a4c:	d205      	bcs.n	8008a5a <__mcmp+0x32>
 8008a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a52:	bd30      	pop	{r4, r5, pc}
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d3f3      	bcc.n	8008a40 <__mcmp+0x18>
 8008a58:	e7fb      	b.n	8008a52 <__mcmp+0x2a>
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e7f9      	b.n	8008a52 <__mcmp+0x2a>
	...

08008a60 <__mdiff>:
 8008a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	4689      	mov	r9, r1
 8008a66:	4606      	mov	r6, r0
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4648      	mov	r0, r9
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	f7ff ffdb 	bl	8008a28 <__mcmp>
 8008a72:	1e05      	subs	r5, r0, #0
 8008a74:	d112      	bne.n	8008a9c <__mdiff+0x3c>
 8008a76:	4629      	mov	r1, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff fd19 	bl	80084b0 <_Balloc>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	b928      	cbnz	r0, 8008a8e <__mdiff+0x2e>
 8008a82:	4b3f      	ldr	r3, [pc, #252]	@ (8008b80 <__mdiff+0x120>)
 8008a84:	f240 2137 	movw	r1, #567	@ 0x237
 8008a88:	483e      	ldr	r0, [pc, #248]	@ (8008b84 <__mdiff+0x124>)
 8008a8a:	f001 fc5d 	bl	800a348 <__assert_func>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a94:	4610      	mov	r0, r2
 8008a96:	b003      	add	sp, #12
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	bfbc      	itt	lt
 8008a9e:	464b      	movlt	r3, r9
 8008aa0:	46a1      	movlt	r9, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008aa8:	bfba      	itte	lt
 8008aaa:	461c      	movlt	r4, r3
 8008aac:	2501      	movlt	r5, #1
 8008aae:	2500      	movge	r5, #0
 8008ab0:	f7ff fcfe 	bl	80084b0 <_Balloc>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	b918      	cbnz	r0, 8008ac0 <__mdiff+0x60>
 8008ab8:	4b31      	ldr	r3, [pc, #196]	@ (8008b80 <__mdiff+0x120>)
 8008aba:	f240 2145 	movw	r1, #581	@ 0x245
 8008abe:	e7e3      	b.n	8008a88 <__mdiff+0x28>
 8008ac0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ac4:	6926      	ldr	r6, [r4, #16]
 8008ac6:	60c5      	str	r5, [r0, #12]
 8008ac8:	f109 0310 	add.w	r3, r9, #16
 8008acc:	f109 0514 	add.w	r5, r9, #20
 8008ad0:	f104 0e14 	add.w	lr, r4, #20
 8008ad4:	f100 0b14 	add.w	fp, r0, #20
 8008ad8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008adc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	46d9      	mov	r9, fp
 8008ae4:	f04f 0c00 	mov.w	ip, #0
 8008ae8:	9b01      	ldr	r3, [sp, #4]
 8008aea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008aee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	fa1f f38a 	uxth.w	r3, sl
 8008af8:	4619      	mov	r1, r3
 8008afa:	b283      	uxth	r3, r0
 8008afc:	1acb      	subs	r3, r1, r3
 8008afe:	0c00      	lsrs	r0, r0, #16
 8008b00:	4463      	add	r3, ip
 8008b02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b10:	4576      	cmp	r6, lr
 8008b12:	f849 3b04 	str.w	r3, [r9], #4
 8008b16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b1a:	d8e5      	bhi.n	8008ae8 <__mdiff+0x88>
 8008b1c:	1b33      	subs	r3, r6, r4
 8008b1e:	3b15      	subs	r3, #21
 8008b20:	f023 0303 	bic.w	r3, r3, #3
 8008b24:	3415      	adds	r4, #21
 8008b26:	3304      	adds	r3, #4
 8008b28:	42a6      	cmp	r6, r4
 8008b2a:	bf38      	it	cc
 8008b2c:	2304      	movcc	r3, #4
 8008b2e:	441d      	add	r5, r3
 8008b30:	445b      	add	r3, fp
 8008b32:	461e      	mov	r6, r3
 8008b34:	462c      	mov	r4, r5
 8008b36:	4544      	cmp	r4, r8
 8008b38:	d30e      	bcc.n	8008b58 <__mdiff+0xf8>
 8008b3a:	f108 0103 	add.w	r1, r8, #3
 8008b3e:	1b49      	subs	r1, r1, r5
 8008b40:	f021 0103 	bic.w	r1, r1, #3
 8008b44:	3d03      	subs	r5, #3
 8008b46:	45a8      	cmp	r8, r5
 8008b48:	bf38      	it	cc
 8008b4a:	2100      	movcc	r1, #0
 8008b4c:	440b      	add	r3, r1
 8008b4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b52:	b191      	cbz	r1, 8008b7a <__mdiff+0x11a>
 8008b54:	6117      	str	r7, [r2, #16]
 8008b56:	e79d      	b.n	8008a94 <__mdiff+0x34>
 8008b58:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b5c:	46e6      	mov	lr, ip
 8008b5e:	0c08      	lsrs	r0, r1, #16
 8008b60:	fa1c fc81 	uxtah	ip, ip, r1
 8008b64:	4471      	add	r1, lr
 8008b66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b6a:	b289      	uxth	r1, r1
 8008b6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b70:	f846 1b04 	str.w	r1, [r6], #4
 8008b74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b78:	e7dd      	b.n	8008b36 <__mdiff+0xd6>
 8008b7a:	3f01      	subs	r7, #1
 8008b7c:	e7e7      	b.n	8008b4e <__mdiff+0xee>
 8008b7e:	bf00      	nop
 8008b80:	0800ad65 	.word	0x0800ad65
 8008b84:	0800ad76 	.word	0x0800ad76

08008b88 <__ulp>:
 8008b88:	b082      	sub	sp, #8
 8008b8a:	ed8d 0b00 	vstr	d0, [sp]
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd0 <__ulp+0x48>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dc08      	bgt.n	8008bae <__ulp+0x26>
 8008b9c:	425b      	negs	r3, r3
 8008b9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ba6:	da04      	bge.n	8008bb2 <__ulp+0x2a>
 8008ba8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bac:	4113      	asrs	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	e008      	b.n	8008bc4 <__ulp+0x3c>
 8008bb2:	f1a2 0314 	sub.w	r3, r2, #20
 8008bb6:	2b1e      	cmp	r3, #30
 8008bb8:	bfda      	itte	le
 8008bba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bbe:	40da      	lsrle	r2, r3
 8008bc0:	2201      	movgt	r2, #1
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	ec41 0b10 	vmov	d0, r0, r1
 8008bcc:	b002      	add	sp, #8
 8008bce:	4770      	bx	lr
 8008bd0:	7ff00000 	.word	0x7ff00000

08008bd4 <__b2d>:
 8008bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	6906      	ldr	r6, [r0, #16]
 8008bda:	f100 0814 	add.w	r8, r0, #20
 8008bde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008be2:	1f37      	subs	r7, r6, #4
 8008be4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7ff fd53 	bl	8008694 <__hi0bits>
 8008bee:	f1c0 0320 	rsb	r3, r0, #32
 8008bf2:	280a      	cmp	r0, #10
 8008bf4:	600b      	str	r3, [r1, #0]
 8008bf6:	491b      	ldr	r1, [pc, #108]	@ (8008c64 <__b2d+0x90>)
 8008bf8:	dc15      	bgt.n	8008c26 <__b2d+0x52>
 8008bfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8008bfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c02:	45b8      	cmp	r8, r7
 8008c04:	ea43 0501 	orr.w	r5, r3, r1
 8008c08:	bf34      	ite	cc
 8008c0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c0e:	2300      	movcs	r3, #0
 8008c10:	3015      	adds	r0, #21
 8008c12:	fa02 f000 	lsl.w	r0, r2, r0
 8008c16:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c1a:	4303      	orrs	r3, r0
 8008c1c:	461c      	mov	r4, r3
 8008c1e:	ec45 4b10 	vmov	d0, r4, r5
 8008c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c26:	45b8      	cmp	r8, r7
 8008c28:	bf3a      	itte	cc
 8008c2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c32:	2300      	movcs	r3, #0
 8008c34:	380b      	subs	r0, #11
 8008c36:	d012      	beq.n	8008c5e <__b2d+0x8a>
 8008c38:	f1c0 0120 	rsb	r1, r0, #32
 8008c3c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c40:	4082      	lsls	r2, r0
 8008c42:	4322      	orrs	r2, r4
 8008c44:	4547      	cmp	r7, r8
 8008c46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c4a:	bf8c      	ite	hi
 8008c4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c50:	2200      	movls	r2, #0
 8008c52:	4083      	lsls	r3, r0
 8008c54:	40ca      	lsrs	r2, r1
 8008c56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	e7de      	b.n	8008c1c <__b2d+0x48>
 8008c5e:	ea42 0501 	orr.w	r5, r2, r1
 8008c62:	e7db      	b.n	8008c1c <__b2d+0x48>
 8008c64:	3ff00000 	.word	0x3ff00000

08008c68 <__d2b>:
 8008c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	460f      	mov	r7, r1
 8008c6e:	2101      	movs	r1, #1
 8008c70:	ec59 8b10 	vmov	r8, r9, d0
 8008c74:	4616      	mov	r6, r2
 8008c76:	f7ff fc1b 	bl	80084b0 <_Balloc>
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	b930      	cbnz	r0, 8008c8c <__d2b+0x24>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	4b23      	ldr	r3, [pc, #140]	@ (8008d10 <__d2b+0xa8>)
 8008c82:	4824      	ldr	r0, [pc, #144]	@ (8008d14 <__d2b+0xac>)
 8008c84:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c88:	f001 fb5e 	bl	800a348 <__assert_func>
 8008c8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c94:	b10d      	cbz	r5, 8008c9a <__d2b+0x32>
 8008c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008ca0:	d023      	beq.n	8008cea <__d2b+0x82>
 8008ca2:	4668      	mov	r0, sp
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	f7ff fd14 	bl	80086d2 <__lo0bits>
 8008caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cae:	b1d0      	cbz	r0, 8008ce6 <__d2b+0x7e>
 8008cb0:	f1c0 0320 	rsb	r3, r0, #32
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	40c2      	lsrs	r2, r0
 8008cbc:	6163      	str	r3, [r4, #20]
 8008cbe:	9201      	str	r2, [sp, #4]
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	61a3      	str	r3, [r4, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2201      	moveq	r2, #1
 8008cca:	2202      	movne	r2, #2
 8008ccc:	6122      	str	r2, [r4, #16]
 8008cce:	b1a5      	cbz	r5, 8008cfa <__d2b+0x92>
 8008cd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cd4:	4405      	add	r5, r0
 8008cd6:	603d      	str	r5, [r7, #0]
 8008cd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cdc:	6030      	str	r0, [r6, #0]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	b003      	add	sp, #12
 8008ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce6:	6161      	str	r1, [r4, #20]
 8008ce8:	e7ea      	b.n	8008cc0 <__d2b+0x58>
 8008cea:	a801      	add	r0, sp, #4
 8008cec:	f7ff fcf1 	bl	80086d2 <__lo0bits>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	6163      	str	r3, [r4, #20]
 8008cf4:	3020      	adds	r0, #32
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	e7e8      	b.n	8008ccc <__d2b+0x64>
 8008cfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d02:	6038      	str	r0, [r7, #0]
 8008d04:	6918      	ldr	r0, [r3, #16]
 8008d06:	f7ff fcc5 	bl	8008694 <__hi0bits>
 8008d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d0e:	e7e5      	b.n	8008cdc <__d2b+0x74>
 8008d10:	0800ad65 	.word	0x0800ad65
 8008d14:	0800ad76 	.word	0x0800ad76

08008d18 <__ratio>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d22:	a902      	add	r1, sp, #8
 8008d24:	f7ff ff56 	bl	8008bd4 <__b2d>
 8008d28:	9800      	ldr	r0, [sp, #0]
 8008d2a:	a903      	add	r1, sp, #12
 8008d2c:	ec55 4b10 	vmov	r4, r5, d0
 8008d30:	f7ff ff50 	bl	8008bd4 <__b2d>
 8008d34:	9b01      	ldr	r3, [sp, #4]
 8008d36:	6919      	ldr	r1, [r3, #16]
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	1ac9      	subs	r1, r1, r3
 8008d3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d42:	1a9b      	subs	r3, r3, r2
 8008d44:	ec5b ab10 	vmov	sl, fp, d0
 8008d48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfce      	itee	gt
 8008d50:	462a      	movgt	r2, r5
 8008d52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d56:	465a      	movle	r2, fp
 8008d58:	462f      	mov	r7, r5
 8008d5a:	46d9      	mov	r9, fp
 8008d5c:	bfcc      	ite	gt
 8008d5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d66:	464b      	mov	r3, r9
 8008d68:	4652      	mov	r2, sl
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fd6d 	bl	800084c <__aeabi_ddiv>
 8008d72:	ec41 0b10 	vmov	d0, r0, r1
 8008d76:	b005      	add	sp, #20
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d7c <__copybits>:
 8008d7c:	3901      	subs	r1, #1
 8008d7e:	b570      	push	{r4, r5, r6, lr}
 8008d80:	1149      	asrs	r1, r1, #5
 8008d82:	6914      	ldr	r4, [r2, #16]
 8008d84:	3101      	adds	r1, #1
 8008d86:	f102 0314 	add.w	r3, r2, #20
 8008d8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d92:	1f05      	subs	r5, r0, #4
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d30c      	bcc.n	8008db2 <__copybits+0x36>
 8008d98:	1aa3      	subs	r3, r4, r2
 8008d9a:	3b11      	subs	r3, #17
 8008d9c:	f023 0303 	bic.w	r3, r3, #3
 8008da0:	3211      	adds	r2, #17
 8008da2:	42a2      	cmp	r2, r4
 8008da4:	bf88      	it	hi
 8008da6:	2300      	movhi	r3, #0
 8008da8:	4418      	add	r0, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	4288      	cmp	r0, r1
 8008dae:	d305      	bcc.n	8008dbc <__copybits+0x40>
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008db6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dba:	e7eb      	b.n	8008d94 <__copybits+0x18>
 8008dbc:	f840 3b04 	str.w	r3, [r0], #4
 8008dc0:	e7f4      	b.n	8008dac <__copybits+0x30>

08008dc2 <__any_on>:
 8008dc2:	f100 0214 	add.w	r2, r0, #20
 8008dc6:	6900      	ldr	r0, [r0, #16]
 8008dc8:	114b      	asrs	r3, r1, #5
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	db11      	blt.n	8008df4 <__any_on+0x32>
 8008dd0:	dd0a      	ble.n	8008de8 <__any_on+0x26>
 8008dd2:	f011 011f 	ands.w	r1, r1, #31
 8008dd6:	d007      	beq.n	8008de8 <__any_on+0x26>
 8008dd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ddc:	fa24 f001 	lsr.w	r0, r4, r1
 8008de0:	fa00 f101 	lsl.w	r1, r0, r1
 8008de4:	428c      	cmp	r4, r1
 8008de6:	d10b      	bne.n	8008e00 <__any_on+0x3e>
 8008de8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d803      	bhi.n	8008df8 <__any_on+0x36>
 8008df0:	2000      	movs	r0, #0
 8008df2:	bd10      	pop	{r4, pc}
 8008df4:	4603      	mov	r3, r0
 8008df6:	e7f7      	b.n	8008de8 <__any_on+0x26>
 8008df8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d0f5      	beq.n	8008dec <__any_on+0x2a>
 8008e00:	2001      	movs	r0, #1
 8008e02:	e7f6      	b.n	8008df2 <__any_on+0x30>

08008e04 <sulp>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	ec45 4b10 	vmov	d0, r4, r5
 8008e0e:	4616      	mov	r6, r2
 8008e10:	f7ff feba 	bl	8008b88 <__ulp>
 8008e14:	ec51 0b10 	vmov	r0, r1, d0
 8008e18:	b17e      	cbz	r6, 8008e3a <sulp+0x36>
 8008e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dd09      	ble.n	8008e3a <sulp+0x36>
 8008e26:	051b      	lsls	r3, r3, #20
 8008e28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e32:	4622      	mov	r2, r4
 8008e34:	462b      	mov	r3, r5
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	ec41 0b10 	vmov	d0, r0, r1
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}

08008e40 <_strtod_l>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	b09f      	sub	sp, #124	@ 0x7c
 8008e46:	460c      	mov	r4, r1
 8008e48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e4e:	9005      	str	r0, [sp, #20]
 8008e50:	f04f 0a00 	mov.w	sl, #0
 8008e54:	f04f 0b00 	mov.w	fp, #0
 8008e58:	460a      	mov	r2, r1
 8008e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e5c:	7811      	ldrb	r1, [r2, #0]
 8008e5e:	292b      	cmp	r1, #43	@ 0x2b
 8008e60:	d04a      	beq.n	8008ef8 <_strtod_l+0xb8>
 8008e62:	d838      	bhi.n	8008ed6 <_strtod_l+0x96>
 8008e64:	290d      	cmp	r1, #13
 8008e66:	d832      	bhi.n	8008ece <_strtod_l+0x8e>
 8008e68:	2908      	cmp	r1, #8
 8008e6a:	d832      	bhi.n	8008ed2 <_strtod_l+0x92>
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d03b      	beq.n	8008ee8 <_strtod_l+0xa8>
 8008e70:	2200      	movs	r2, #0
 8008e72:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e76:	782a      	ldrb	r2, [r5, #0]
 8008e78:	2a30      	cmp	r2, #48	@ 0x30
 8008e7a:	f040 80b2 	bne.w	8008fe2 <_strtod_l+0x1a2>
 8008e7e:	786a      	ldrb	r2, [r5, #1]
 8008e80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e84:	2a58      	cmp	r2, #88	@ 0x58
 8008e86:	d16e      	bne.n	8008f66 <_strtod_l+0x126>
 8008e88:	9302      	str	r3, [sp, #8]
 8008e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4a8f      	ldr	r2, [pc, #572]	@ (80090d0 <_strtod_l+0x290>)
 8008e94:	9805      	ldr	r0, [sp, #20]
 8008e96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e98:	a919      	add	r1, sp, #100	@ 0x64
 8008e9a:	f001 faef 	bl	800a47c <__gethex>
 8008e9e:	f010 060f 	ands.w	r6, r0, #15
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	d005      	beq.n	8008eb2 <_strtod_l+0x72>
 8008ea6:	2e06      	cmp	r6, #6
 8008ea8:	d128      	bne.n	8008efc <_strtod_l+0xbc>
 8008eaa:	3501      	adds	r5, #1
 8008eac:	2300      	movs	r3, #0
 8008eae:	9519      	str	r5, [sp, #100]	@ 0x64
 8008eb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f040 858e 	bne.w	80099d6 <_strtod_l+0xb96>
 8008eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ebc:	b1cb      	cbz	r3, 8008ef2 <_strtod_l+0xb2>
 8008ebe:	4652      	mov	r2, sl
 8008ec0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ec4:	ec43 2b10 	vmov	d0, r2, r3
 8008ec8:	b01f      	add	sp, #124	@ 0x7c
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	2920      	cmp	r1, #32
 8008ed0:	d1ce      	bne.n	8008e70 <_strtod_l+0x30>
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	e7c1      	b.n	8008e5a <_strtod_l+0x1a>
 8008ed6:	292d      	cmp	r1, #45	@ 0x2d
 8008ed8:	d1ca      	bne.n	8008e70 <_strtod_l+0x30>
 8008eda:	2101      	movs	r1, #1
 8008edc:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ede:	1c51      	adds	r1, r2, #1
 8008ee0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ee2:	7852      	ldrb	r2, [r2, #1]
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	d1c5      	bne.n	8008e74 <_strtod_l+0x34>
 8008ee8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eea:	9419      	str	r4, [sp, #100]	@ 0x64
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f040 8570 	bne.w	80099d2 <_strtod_l+0xb92>
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	e7e5      	b.n	8008ec4 <_strtod_l+0x84>
 8008ef8:	2100      	movs	r1, #0
 8008efa:	e7ef      	b.n	8008edc <_strtod_l+0x9c>
 8008efc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008efe:	b13a      	cbz	r2, 8008f10 <_strtod_l+0xd0>
 8008f00:	2135      	movs	r1, #53	@ 0x35
 8008f02:	a81c      	add	r0, sp, #112	@ 0x70
 8008f04:	f7ff ff3a 	bl	8008d7c <__copybits>
 8008f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f0a:	9805      	ldr	r0, [sp, #20]
 8008f0c:	f7ff fb10 	bl	8008530 <_Bfree>
 8008f10:	3e01      	subs	r6, #1
 8008f12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f14:	2e04      	cmp	r6, #4
 8008f16:	d806      	bhi.n	8008f26 <_strtod_l+0xe6>
 8008f18:	e8df f006 	tbb	[pc, r6]
 8008f1c:	201d0314 	.word	0x201d0314
 8008f20:	14          	.byte	0x14
 8008f21:	00          	.byte	0x00
 8008f22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f26:	05e1      	lsls	r1, r4, #23
 8008f28:	bf48      	it	mi
 8008f2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f32:	0d1b      	lsrs	r3, r3, #20
 8008f34:	051b      	lsls	r3, r3, #20
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1bb      	bne.n	8008eb2 <_strtod_l+0x72>
 8008f3a:	f7fe fb2b 	bl	8007594 <__errno>
 8008f3e:	2322      	movs	r3, #34	@ 0x22
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	e7b6      	b.n	8008eb2 <_strtod_l+0x72>
 8008f44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f54:	e7e7      	b.n	8008f26 <_strtod_l+0xe6>
 8008f56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80090d8 <_strtod_l+0x298>
 8008f5a:	e7e4      	b.n	8008f26 <_strtod_l+0xe6>
 8008f5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f60:	f04f 3aff 	mov.w	sl, #4294967295
 8008f64:	e7df      	b.n	8008f26 <_strtod_l+0xe6>
 8008f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b30      	cmp	r3, #48	@ 0x30
 8008f70:	d0f9      	beq.n	8008f66 <_strtod_l+0x126>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d09d      	beq.n	8008eb2 <_strtod_l+0x72>
 8008f76:	2301      	movs	r3, #1
 8008f78:	2700      	movs	r7, #0
 8008f7a:	9308      	str	r3, [sp, #32]
 8008f7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f80:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008f82:	46b9      	mov	r9, r7
 8008f84:	220a      	movs	r2, #10
 8008f86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f88:	7805      	ldrb	r5, [r0, #0]
 8008f8a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f8e:	b2d9      	uxtb	r1, r3
 8008f90:	2909      	cmp	r1, #9
 8008f92:	d928      	bls.n	8008fe6 <_strtod_l+0x1a6>
 8008f94:	494f      	ldr	r1, [pc, #316]	@ (80090d4 <_strtod_l+0x294>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	f001 f97a 	bl	800a290 <strncmp>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d032      	beq.n	8009006 <_strtod_l+0x1c6>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fa6:	464d      	mov	r5, r9
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2a65      	cmp	r2, #101	@ 0x65
 8008fac:	d001      	beq.n	8008fb2 <_strtod_l+0x172>
 8008fae:	2a45      	cmp	r2, #69	@ 0x45
 8008fb0:	d114      	bne.n	8008fdc <_strtod_l+0x19c>
 8008fb2:	b91d      	cbnz	r5, 8008fbc <_strtod_l+0x17c>
 8008fb4:	9a08      	ldr	r2, [sp, #32]
 8008fb6:	4302      	orrs	r2, r0
 8008fb8:	d096      	beq.n	8008ee8 <_strtod_l+0xa8>
 8008fba:	2500      	movs	r5, #0
 8008fbc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fbe:	1c62      	adds	r2, r4, #1
 8008fc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fc2:	7862      	ldrb	r2, [r4, #1]
 8008fc4:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fc6:	d07a      	beq.n	80090be <_strtod_l+0x27e>
 8008fc8:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fca:	d07e      	beq.n	80090ca <_strtod_l+0x28a>
 8008fcc:	f04f 0c00 	mov.w	ip, #0
 8008fd0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fd4:	2909      	cmp	r1, #9
 8008fd6:	f240 8085 	bls.w	80090e4 <_strtod_l+0x2a4>
 8008fda:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fdc:	f04f 0800 	mov.w	r8, #0
 8008fe0:	e0a5      	b.n	800912e <_strtod_l+0x2ee>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e7c8      	b.n	8008f78 <_strtod_l+0x138>
 8008fe6:	f1b9 0f08 	cmp.w	r9, #8
 8008fea:	bfd8      	it	le
 8008fec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008fee:	f100 0001 	add.w	r0, r0, #1
 8008ff2:	bfda      	itte	le
 8008ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ff8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008ffa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008ffe:	f109 0901 	add.w	r9, r9, #1
 8009002:	9019      	str	r0, [sp, #100]	@ 0x64
 8009004:	e7bf      	b.n	8008f86 <_strtod_l+0x146>
 8009006:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	9219      	str	r2, [sp, #100]	@ 0x64
 800900c:	785a      	ldrb	r2, [r3, #1]
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d03b      	beq.n	800908c <_strtod_l+0x24c>
 8009014:	900a      	str	r0, [sp, #40]	@ 0x28
 8009016:	464d      	mov	r5, r9
 8009018:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800901c:	2b09      	cmp	r3, #9
 800901e:	d912      	bls.n	8009046 <_strtod_l+0x206>
 8009020:	2301      	movs	r3, #1
 8009022:	e7c2      	b.n	8008faa <_strtod_l+0x16a>
 8009024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	9219      	str	r2, [sp, #100]	@ 0x64
 800902a:	785a      	ldrb	r2, [r3, #1]
 800902c:	3001      	adds	r0, #1
 800902e:	2a30      	cmp	r2, #48	@ 0x30
 8009030:	d0f8      	beq.n	8009024 <_strtod_l+0x1e4>
 8009032:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009036:	2b08      	cmp	r3, #8
 8009038:	f200 84d2 	bhi.w	80099e0 <_strtod_l+0xba0>
 800903c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009040:	2000      	movs	r0, #0
 8009042:	930c      	str	r3, [sp, #48]	@ 0x30
 8009044:	4605      	mov	r5, r0
 8009046:	3a30      	subs	r2, #48	@ 0x30
 8009048:	f100 0301 	add.w	r3, r0, #1
 800904c:	d018      	beq.n	8009080 <_strtod_l+0x240>
 800904e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009050:	4419      	add	r1, r3
 8009052:	910a      	str	r1, [sp, #40]	@ 0x28
 8009054:	462e      	mov	r6, r5
 8009056:	f04f 0e0a 	mov.w	lr, #10
 800905a:	1c71      	adds	r1, r6, #1
 800905c:	eba1 0c05 	sub.w	ip, r1, r5
 8009060:	4563      	cmp	r3, ip
 8009062:	dc15      	bgt.n	8009090 <_strtod_l+0x250>
 8009064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009068:	182b      	adds	r3, r5, r0
 800906a:	2b08      	cmp	r3, #8
 800906c:	f105 0501 	add.w	r5, r5, #1
 8009070:	4405      	add	r5, r0
 8009072:	dc1a      	bgt.n	80090aa <_strtod_l+0x26a>
 8009074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009076:	230a      	movs	r3, #10
 8009078:	fb03 2301 	mla	r3, r3, r1, r2
 800907c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800907e:	2300      	movs	r3, #0
 8009080:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009082:	1c51      	adds	r1, r2, #1
 8009084:	9119      	str	r1, [sp, #100]	@ 0x64
 8009086:	7852      	ldrb	r2, [r2, #1]
 8009088:	4618      	mov	r0, r3
 800908a:	e7c5      	b.n	8009018 <_strtod_l+0x1d8>
 800908c:	4648      	mov	r0, r9
 800908e:	e7ce      	b.n	800902e <_strtod_l+0x1ee>
 8009090:	2e08      	cmp	r6, #8
 8009092:	dc05      	bgt.n	80090a0 <_strtod_l+0x260>
 8009094:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009096:	fb0e f606 	mul.w	r6, lr, r6
 800909a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800909c:	460e      	mov	r6, r1
 800909e:	e7dc      	b.n	800905a <_strtod_l+0x21a>
 80090a0:	2910      	cmp	r1, #16
 80090a2:	bfd8      	it	le
 80090a4:	fb0e f707 	mulle.w	r7, lr, r7
 80090a8:	e7f8      	b.n	800909c <_strtod_l+0x25c>
 80090aa:	2b0f      	cmp	r3, #15
 80090ac:	bfdc      	itt	le
 80090ae:	230a      	movle	r3, #10
 80090b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80090b4:	e7e3      	b.n	800907e <_strtod_l+0x23e>
 80090b6:	2300      	movs	r3, #0
 80090b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ba:	2301      	movs	r3, #1
 80090bc:	e77a      	b.n	8008fb4 <_strtod_l+0x174>
 80090be:	f04f 0c00 	mov.w	ip, #0
 80090c2:	1ca2      	adds	r2, r4, #2
 80090c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80090c6:	78a2      	ldrb	r2, [r4, #2]
 80090c8:	e782      	b.n	8008fd0 <_strtod_l+0x190>
 80090ca:	f04f 0c01 	mov.w	ip, #1
 80090ce:	e7f8      	b.n	80090c2 <_strtod_l+0x282>
 80090d0:	0800af9c 	.word	0x0800af9c
 80090d4:	0800adcf 	.word	0x0800adcf
 80090d8:	7ff00000 	.word	0x7ff00000
 80090dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090de:	1c51      	adds	r1, r2, #1
 80090e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090e2:	7852      	ldrb	r2, [r2, #1]
 80090e4:	2a30      	cmp	r2, #48	@ 0x30
 80090e6:	d0f9      	beq.n	80090dc <_strtod_l+0x29c>
 80090e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090ec:	2908      	cmp	r1, #8
 80090ee:	f63f af75 	bhi.w	8008fdc <_strtod_l+0x19c>
 80090f2:	3a30      	subs	r2, #48	@ 0x30
 80090f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80090f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80090fa:	f04f 080a 	mov.w	r8, #10
 80090fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009100:	1c56      	adds	r6, r2, #1
 8009102:	9619      	str	r6, [sp, #100]	@ 0x64
 8009104:	7852      	ldrb	r2, [r2, #1]
 8009106:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800910a:	f1be 0f09 	cmp.w	lr, #9
 800910e:	d939      	bls.n	8009184 <_strtod_l+0x344>
 8009110:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009112:	1a76      	subs	r6, r6, r1
 8009114:	2e08      	cmp	r6, #8
 8009116:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800911a:	dc03      	bgt.n	8009124 <_strtod_l+0x2e4>
 800911c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800911e:	4588      	cmp	r8, r1
 8009120:	bfa8      	it	ge
 8009122:	4688      	movge	r8, r1
 8009124:	f1bc 0f00 	cmp.w	ip, #0
 8009128:	d001      	beq.n	800912e <_strtod_l+0x2ee>
 800912a:	f1c8 0800 	rsb	r8, r8, #0
 800912e:	2d00      	cmp	r5, #0
 8009130:	d14e      	bne.n	80091d0 <_strtod_l+0x390>
 8009132:	9908      	ldr	r1, [sp, #32]
 8009134:	4308      	orrs	r0, r1
 8009136:	f47f aebc 	bne.w	8008eb2 <_strtod_l+0x72>
 800913a:	2b00      	cmp	r3, #0
 800913c:	f47f aed4 	bne.w	8008ee8 <_strtod_l+0xa8>
 8009140:	2a69      	cmp	r2, #105	@ 0x69
 8009142:	d028      	beq.n	8009196 <_strtod_l+0x356>
 8009144:	dc25      	bgt.n	8009192 <_strtod_l+0x352>
 8009146:	2a49      	cmp	r2, #73	@ 0x49
 8009148:	d025      	beq.n	8009196 <_strtod_l+0x356>
 800914a:	2a4e      	cmp	r2, #78	@ 0x4e
 800914c:	f47f aecc 	bne.w	8008ee8 <_strtod_l+0xa8>
 8009150:	499a      	ldr	r1, [pc, #616]	@ (80093bc <_strtod_l+0x57c>)
 8009152:	a819      	add	r0, sp, #100	@ 0x64
 8009154:	f001 fbb4 	bl	800a8c0 <__match>
 8009158:	2800      	cmp	r0, #0
 800915a:	f43f aec5 	beq.w	8008ee8 <_strtod_l+0xa8>
 800915e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b28      	cmp	r3, #40	@ 0x28
 8009164:	d12e      	bne.n	80091c4 <_strtod_l+0x384>
 8009166:	4996      	ldr	r1, [pc, #600]	@ (80093c0 <_strtod_l+0x580>)
 8009168:	aa1c      	add	r2, sp, #112	@ 0x70
 800916a:	a819      	add	r0, sp, #100	@ 0x64
 800916c:	f001 fbbc 	bl	800a8e8 <__hexnan>
 8009170:	2805      	cmp	r0, #5
 8009172:	d127      	bne.n	80091c4 <_strtod_l+0x384>
 8009174:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009176:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800917a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800917e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009182:	e696      	b.n	8008eb2 <_strtod_l+0x72>
 8009184:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009186:	fb08 2101 	mla	r1, r8, r1, r2
 800918a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800918e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009190:	e7b5      	b.n	80090fe <_strtod_l+0x2be>
 8009192:	2a6e      	cmp	r2, #110	@ 0x6e
 8009194:	e7da      	b.n	800914c <_strtod_l+0x30c>
 8009196:	498b      	ldr	r1, [pc, #556]	@ (80093c4 <_strtod_l+0x584>)
 8009198:	a819      	add	r0, sp, #100	@ 0x64
 800919a:	f001 fb91 	bl	800a8c0 <__match>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f43f aea2 	beq.w	8008ee8 <_strtod_l+0xa8>
 80091a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a6:	4988      	ldr	r1, [pc, #544]	@ (80093c8 <_strtod_l+0x588>)
 80091a8:	3b01      	subs	r3, #1
 80091aa:	a819      	add	r0, sp, #100	@ 0x64
 80091ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ae:	f001 fb87 	bl	800a8c0 <__match>
 80091b2:	b910      	cbnz	r0, 80091ba <_strtod_l+0x37a>
 80091b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b6:	3301      	adds	r3, #1
 80091b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80093d8 <_strtod_l+0x598>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	e676      	b.n	8008eb2 <_strtod_l+0x72>
 80091c4:	4881      	ldr	r0, [pc, #516]	@ (80093cc <_strtod_l+0x58c>)
 80091c6:	f001 f8b7 	bl	800a338 <nan>
 80091ca:	ec5b ab10 	vmov	sl, fp, d0
 80091ce:	e670      	b.n	8008eb2 <_strtod_l+0x72>
 80091d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80091d4:	eba8 0303 	sub.w	r3, r8, r3
 80091d8:	f1b9 0f00 	cmp.w	r9, #0
 80091dc:	bf08      	it	eq
 80091de:	46a9      	moveq	r9, r5
 80091e0:	2d10      	cmp	r5, #16
 80091e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e4:	462c      	mov	r4, r5
 80091e6:	bfa8      	it	ge
 80091e8:	2410      	movge	r4, #16
 80091ea:	f7f7 f98b 	bl	8000504 <__aeabi_ui2d>
 80091ee:	2d09      	cmp	r5, #9
 80091f0:	4682      	mov	sl, r0
 80091f2:	468b      	mov	fp, r1
 80091f4:	dc13      	bgt.n	800921e <_strtod_l+0x3de>
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f43f ae5a 	beq.w	8008eb2 <_strtod_l+0x72>
 80091fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009200:	dd78      	ble.n	80092f4 <_strtod_l+0x4b4>
 8009202:	2b16      	cmp	r3, #22
 8009204:	dc5f      	bgt.n	80092c6 <_strtod_l+0x486>
 8009206:	4972      	ldr	r1, [pc, #456]	@ (80093d0 <_strtod_l+0x590>)
 8009208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800920c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	f7f7 f9f0 	bl	80005f8 <__aeabi_dmul>
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	e649      	b.n	8008eb2 <_strtod_l+0x72>
 800921e:	4b6c      	ldr	r3, [pc, #432]	@ (80093d0 <_strtod_l+0x590>)
 8009220:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009224:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009228:	f7f7 f9e6 	bl	80005f8 <__aeabi_dmul>
 800922c:	4682      	mov	sl, r0
 800922e:	4638      	mov	r0, r7
 8009230:	468b      	mov	fp, r1
 8009232:	f7f7 f967 	bl	8000504 <__aeabi_ui2d>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4650      	mov	r0, sl
 800923c:	4659      	mov	r1, fp
 800923e:	f7f7 f825 	bl	800028c <__adddf3>
 8009242:	2d0f      	cmp	r5, #15
 8009244:	4682      	mov	sl, r0
 8009246:	468b      	mov	fp, r1
 8009248:	ddd5      	ble.n	80091f6 <_strtod_l+0x3b6>
 800924a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924c:	1b2c      	subs	r4, r5, r4
 800924e:	441c      	add	r4, r3
 8009250:	2c00      	cmp	r4, #0
 8009252:	f340 8093 	ble.w	800937c <_strtod_l+0x53c>
 8009256:	f014 030f 	ands.w	r3, r4, #15
 800925a:	d00a      	beq.n	8009272 <_strtod_l+0x432>
 800925c:	495c      	ldr	r1, [pc, #368]	@ (80093d0 <_strtod_l+0x590>)
 800925e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009262:	4652      	mov	r2, sl
 8009264:	465b      	mov	r3, fp
 8009266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926a:	f7f7 f9c5 	bl	80005f8 <__aeabi_dmul>
 800926e:	4682      	mov	sl, r0
 8009270:	468b      	mov	fp, r1
 8009272:	f034 040f 	bics.w	r4, r4, #15
 8009276:	d073      	beq.n	8009360 <_strtod_l+0x520>
 8009278:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800927c:	dd49      	ble.n	8009312 <_strtod_l+0x4d2>
 800927e:	2400      	movs	r4, #0
 8009280:	46a0      	mov	r8, r4
 8009282:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009284:	46a1      	mov	r9, r4
 8009286:	9a05      	ldr	r2, [sp, #20]
 8009288:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80093d8 <_strtod_l+0x598>
 800928c:	2322      	movs	r3, #34	@ 0x22
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	f04f 0a00 	mov.w	sl, #0
 8009294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	f43f ae0b 	beq.w	8008eb2 <_strtod_l+0x72>
 800929c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800929e:	9805      	ldr	r0, [sp, #20]
 80092a0:	f7ff f946 	bl	8008530 <_Bfree>
 80092a4:	9805      	ldr	r0, [sp, #20]
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7ff f942 	bl	8008530 <_Bfree>
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	4641      	mov	r1, r8
 80092b0:	f7ff f93e 	bl	8008530 <_Bfree>
 80092b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	f7ff f93a 	bl	8008530 <_Bfree>
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	4621      	mov	r1, r4
 80092c0:	f7ff f936 	bl	8008530 <_Bfree>
 80092c4:	e5f5      	b.n	8008eb2 <_strtod_l+0x72>
 80092c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092cc:	4293      	cmp	r3, r2
 80092ce:	dbbc      	blt.n	800924a <_strtod_l+0x40a>
 80092d0:	4c3f      	ldr	r4, [pc, #252]	@ (80093d0 <_strtod_l+0x590>)
 80092d2:	f1c5 050f 	rsb	r5, r5, #15
 80092d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	1b5d      	subs	r5, r3, r5
 80092ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092f2:	e78f      	b.n	8009214 <_strtod_l+0x3d4>
 80092f4:	3316      	adds	r3, #22
 80092f6:	dba8      	blt.n	800924a <_strtod_l+0x40a>
 80092f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092fa:	eba3 0808 	sub.w	r8, r3, r8
 80092fe:	4b34      	ldr	r3, [pc, #208]	@ (80093d0 <_strtod_l+0x590>)
 8009300:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009304:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	f7f7 fa9e 	bl	800084c <__aeabi_ddiv>
 8009310:	e782      	b.n	8009218 <_strtod_l+0x3d8>
 8009312:	2300      	movs	r3, #0
 8009314:	4f2f      	ldr	r7, [pc, #188]	@ (80093d4 <_strtod_l+0x594>)
 8009316:	1124      	asrs	r4, r4, #4
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	461e      	mov	r6, r3
 800931e:	2c01      	cmp	r4, #1
 8009320:	dc21      	bgt.n	8009366 <_strtod_l+0x526>
 8009322:	b10b      	cbz	r3, 8009328 <_strtod_l+0x4e8>
 8009324:	4682      	mov	sl, r0
 8009326:	468b      	mov	fp, r1
 8009328:	492a      	ldr	r1, [pc, #168]	@ (80093d4 <_strtod_l+0x594>)
 800932a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800932e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009332:	4652      	mov	r2, sl
 8009334:	465b      	mov	r3, fp
 8009336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933a:	f7f7 f95d 	bl	80005f8 <__aeabi_dmul>
 800933e:	4b26      	ldr	r3, [pc, #152]	@ (80093d8 <_strtod_l+0x598>)
 8009340:	460a      	mov	r2, r1
 8009342:	400b      	ands	r3, r1
 8009344:	4925      	ldr	r1, [pc, #148]	@ (80093dc <_strtod_l+0x59c>)
 8009346:	428b      	cmp	r3, r1
 8009348:	4682      	mov	sl, r0
 800934a:	d898      	bhi.n	800927e <_strtod_l+0x43e>
 800934c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009350:	428b      	cmp	r3, r1
 8009352:	bf86      	itte	hi
 8009354:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80093e0 <_strtod_l+0x5a0>
 8009358:	f04f 3aff 	movhi.w	sl, #4294967295
 800935c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009360:	2300      	movs	r3, #0
 8009362:	9308      	str	r3, [sp, #32]
 8009364:	e076      	b.n	8009454 <_strtod_l+0x614>
 8009366:	07e2      	lsls	r2, r4, #31
 8009368:	d504      	bpl.n	8009374 <_strtod_l+0x534>
 800936a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936e:	f7f7 f943 	bl	80005f8 <__aeabi_dmul>
 8009372:	2301      	movs	r3, #1
 8009374:	3601      	adds	r6, #1
 8009376:	1064      	asrs	r4, r4, #1
 8009378:	3708      	adds	r7, #8
 800937a:	e7d0      	b.n	800931e <_strtod_l+0x4de>
 800937c:	d0f0      	beq.n	8009360 <_strtod_l+0x520>
 800937e:	4264      	negs	r4, r4
 8009380:	f014 020f 	ands.w	r2, r4, #15
 8009384:	d00a      	beq.n	800939c <_strtod_l+0x55c>
 8009386:	4b12      	ldr	r3, [pc, #72]	@ (80093d0 <_strtod_l+0x590>)
 8009388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800938c:	4650      	mov	r0, sl
 800938e:	4659      	mov	r1, fp
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f7 fa5a 	bl	800084c <__aeabi_ddiv>
 8009398:	4682      	mov	sl, r0
 800939a:	468b      	mov	fp, r1
 800939c:	1124      	asrs	r4, r4, #4
 800939e:	d0df      	beq.n	8009360 <_strtod_l+0x520>
 80093a0:	2c1f      	cmp	r4, #31
 80093a2:	dd1f      	ble.n	80093e4 <_strtod_l+0x5a4>
 80093a4:	2400      	movs	r4, #0
 80093a6:	46a0      	mov	r8, r4
 80093a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093aa:	46a1      	mov	r9, r4
 80093ac:	9a05      	ldr	r2, [sp, #20]
 80093ae:	2322      	movs	r3, #34	@ 0x22
 80093b0:	f04f 0a00 	mov.w	sl, #0
 80093b4:	f04f 0b00 	mov.w	fp, #0
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	e76b      	b.n	8009294 <_strtod_l+0x454>
 80093bc:	0800acbd 	.word	0x0800acbd
 80093c0:	0800af88 	.word	0x0800af88
 80093c4:	0800acb5 	.word	0x0800acb5
 80093c8:	0800acec 	.word	0x0800acec
 80093cc:	0800ae25 	.word	0x0800ae25
 80093d0:	0800aec0 	.word	0x0800aec0
 80093d4:	0800ae98 	.word	0x0800ae98
 80093d8:	7ff00000 	.word	0x7ff00000
 80093dc:	7ca00000 	.word	0x7ca00000
 80093e0:	7fefffff 	.word	0x7fefffff
 80093e4:	f014 0310 	ands.w	r3, r4, #16
 80093e8:	bf18      	it	ne
 80093ea:	236a      	movne	r3, #106	@ 0x6a
 80093ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009694 <_strtod_l+0x854>)
 80093ee:	9308      	str	r3, [sp, #32]
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	2300      	movs	r3, #0
 80093f6:	07e7      	lsls	r7, r4, #31
 80093f8:	d504      	bpl.n	8009404 <_strtod_l+0x5c4>
 80093fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	2301      	movs	r3, #1
 8009404:	1064      	asrs	r4, r4, #1
 8009406:	f106 0608 	add.w	r6, r6, #8
 800940a:	d1f4      	bne.n	80093f6 <_strtod_l+0x5b6>
 800940c:	b10b      	cbz	r3, 8009412 <_strtod_l+0x5d2>
 800940e:	4682      	mov	sl, r0
 8009410:	468b      	mov	fp, r1
 8009412:	9b08      	ldr	r3, [sp, #32]
 8009414:	b1b3      	cbz	r3, 8009444 <_strtod_l+0x604>
 8009416:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800941a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800941e:	2b00      	cmp	r3, #0
 8009420:	4659      	mov	r1, fp
 8009422:	dd0f      	ble.n	8009444 <_strtod_l+0x604>
 8009424:	2b1f      	cmp	r3, #31
 8009426:	dd56      	ble.n	80094d6 <_strtod_l+0x696>
 8009428:	2b34      	cmp	r3, #52	@ 0x34
 800942a:	bfde      	ittt	le
 800942c:	f04f 33ff 	movle.w	r3, #4294967295
 8009430:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009434:	4093      	lslle	r3, r2
 8009436:	f04f 0a00 	mov.w	sl, #0
 800943a:	bfcc      	ite	gt
 800943c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009440:	ea03 0b01 	andle.w	fp, r3, r1
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f7 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009450:	2800      	cmp	r0, #0
 8009452:	d1a7      	bne.n	80093a4 <_strtod_l+0x564>
 8009454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800945a:	9805      	ldr	r0, [sp, #20]
 800945c:	462b      	mov	r3, r5
 800945e:	464a      	mov	r2, r9
 8009460:	f7ff f8ce 	bl	8008600 <__s2b>
 8009464:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009466:	2800      	cmp	r0, #0
 8009468:	f43f af09 	beq.w	800927e <_strtod_l+0x43e>
 800946c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800946e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009470:	2a00      	cmp	r2, #0
 8009472:	eba3 0308 	sub.w	r3, r3, r8
 8009476:	bfa8      	it	ge
 8009478:	2300      	movge	r3, #0
 800947a:	9312      	str	r3, [sp, #72]	@ 0x48
 800947c:	2400      	movs	r4, #0
 800947e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009482:	9316      	str	r3, [sp, #88]	@ 0x58
 8009484:	46a0      	mov	r8, r4
 8009486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009488:	9805      	ldr	r0, [sp, #20]
 800948a:	6859      	ldr	r1, [r3, #4]
 800948c:	f7ff f810 	bl	80084b0 <_Balloc>
 8009490:	4681      	mov	r9, r0
 8009492:	2800      	cmp	r0, #0
 8009494:	f43f aef7 	beq.w	8009286 <_strtod_l+0x446>
 8009498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	3202      	adds	r2, #2
 800949e:	f103 010c 	add.w	r1, r3, #12
 80094a2:	0092      	lsls	r2, r2, #2
 80094a4:	300c      	adds	r0, #12
 80094a6:	f000 ff37 	bl	800a318 <memcpy>
 80094aa:	ec4b ab10 	vmov	d0, sl, fp
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80094b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80094b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094b8:	f7ff fbd6 	bl	8008c68 <__d2b>
 80094bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f aee1 	beq.w	8009286 <_strtod_l+0x446>
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	2101      	movs	r1, #1
 80094c8:	f7ff f930 	bl	800872c <__i2b>
 80094cc:	4680      	mov	r8, r0
 80094ce:	b948      	cbnz	r0, 80094e4 <_strtod_l+0x6a4>
 80094d0:	f04f 0800 	mov.w	r8, #0
 80094d4:	e6d7      	b.n	8009286 <_strtod_l+0x446>
 80094d6:	f04f 32ff 	mov.w	r2, #4294967295
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	ea03 0a0a 	and.w	sl, r3, sl
 80094e2:	e7af      	b.n	8009444 <_strtod_l+0x604>
 80094e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	bfab      	itete	ge
 80094ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80094f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80094f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80094f4:	bfac      	ite	ge
 80094f6:	18ef      	addge	r7, r5, r3
 80094f8:	1b5e      	sublt	r6, r3, r5
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	1aed      	subs	r5, r5, r3
 80094fe:	4415      	add	r5, r2
 8009500:	4b65      	ldr	r3, [pc, #404]	@ (8009698 <_strtod_l+0x858>)
 8009502:	3d01      	subs	r5, #1
 8009504:	429d      	cmp	r5, r3
 8009506:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800950a:	da50      	bge.n	80095ae <_strtod_l+0x76e>
 800950c:	1b5b      	subs	r3, r3, r5
 800950e:	2b1f      	cmp	r3, #31
 8009510:	eba2 0203 	sub.w	r2, r2, r3
 8009514:	f04f 0101 	mov.w	r1, #1
 8009518:	dc3d      	bgt.n	8009596 <_strtod_l+0x756>
 800951a:	fa01 f303 	lsl.w	r3, r1, r3
 800951e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009520:	2300      	movs	r3, #0
 8009522:	9310      	str	r3, [sp, #64]	@ 0x40
 8009524:	18bd      	adds	r5, r7, r2
 8009526:	9b08      	ldr	r3, [sp, #32]
 8009528:	42af      	cmp	r7, r5
 800952a:	4416      	add	r6, r2
 800952c:	441e      	add	r6, r3
 800952e:	463b      	mov	r3, r7
 8009530:	bfa8      	it	ge
 8009532:	462b      	movge	r3, r5
 8009534:	42b3      	cmp	r3, r6
 8009536:	bfa8      	it	ge
 8009538:	4633      	movge	r3, r6
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfc2      	ittt	gt
 800953e:	1aed      	subgt	r5, r5, r3
 8009540:	1af6      	subgt	r6, r6, r3
 8009542:	1aff      	subgt	r7, r7, r3
 8009544:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd16      	ble.n	8009578 <_strtod_l+0x738>
 800954a:	4641      	mov	r1, r8
 800954c:	9805      	ldr	r0, [sp, #20]
 800954e:	461a      	mov	r2, r3
 8009550:	f7ff f9a4 	bl	800889c <__pow5mult>
 8009554:	4680      	mov	r8, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d0ba      	beq.n	80094d0 <_strtod_l+0x690>
 800955a:	4601      	mov	r1, r0
 800955c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800955e:	9805      	ldr	r0, [sp, #20]
 8009560:	f7ff f8fa 	bl	8008758 <__multiply>
 8009564:	900a      	str	r0, [sp, #40]	@ 0x28
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f ae8d 	beq.w	8009286 <_strtod_l+0x446>
 800956c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800956e:	9805      	ldr	r0, [sp, #20]
 8009570:	f7fe ffde 	bl	8008530 <_Bfree>
 8009574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009576:	931a      	str	r3, [sp, #104]	@ 0x68
 8009578:	2d00      	cmp	r5, #0
 800957a:	dc1d      	bgt.n	80095b8 <_strtod_l+0x778>
 800957c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd23      	ble.n	80095ca <_strtod_l+0x78a>
 8009582:	4649      	mov	r1, r9
 8009584:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7ff f988 	bl	800889c <__pow5mult>
 800958c:	4681      	mov	r9, r0
 800958e:	b9e0      	cbnz	r0, 80095ca <_strtod_l+0x78a>
 8009590:	f04f 0900 	mov.w	r9, #0
 8009594:	e677      	b.n	8009286 <_strtod_l+0x446>
 8009596:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800959a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800959e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095a2:	35e2      	adds	r5, #226	@ 0xe2
 80095a4:	fa01 f305 	lsl.w	r3, r1, r5
 80095a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095ac:	e7ba      	b.n	8009524 <_strtod_l+0x6e4>
 80095ae:	2300      	movs	r3, #0
 80095b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80095b2:	2301      	movs	r3, #1
 80095b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095b6:	e7b5      	b.n	8009524 <_strtod_l+0x6e4>
 80095b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ba:	9805      	ldr	r0, [sp, #20]
 80095bc:	462a      	mov	r2, r5
 80095be:	f7ff f9c7 	bl	8008950 <__lshift>
 80095c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1d9      	bne.n	800957c <_strtod_l+0x73c>
 80095c8:	e65d      	b.n	8009286 <_strtod_l+0x446>
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	dd07      	ble.n	80095de <_strtod_l+0x79e>
 80095ce:	4649      	mov	r1, r9
 80095d0:	9805      	ldr	r0, [sp, #20]
 80095d2:	4632      	mov	r2, r6
 80095d4:	f7ff f9bc 	bl	8008950 <__lshift>
 80095d8:	4681      	mov	r9, r0
 80095da:	2800      	cmp	r0, #0
 80095dc:	d0d8      	beq.n	8009590 <_strtod_l+0x750>
 80095de:	2f00      	cmp	r7, #0
 80095e0:	dd08      	ble.n	80095f4 <_strtod_l+0x7b4>
 80095e2:	4641      	mov	r1, r8
 80095e4:	9805      	ldr	r0, [sp, #20]
 80095e6:	463a      	mov	r2, r7
 80095e8:	f7ff f9b2 	bl	8008950 <__lshift>
 80095ec:	4680      	mov	r8, r0
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f ae49 	beq.w	8009286 <_strtod_l+0x446>
 80095f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095f6:	9805      	ldr	r0, [sp, #20]
 80095f8:	464a      	mov	r2, r9
 80095fa:	f7ff fa31 	bl	8008a60 <__mdiff>
 80095fe:	4604      	mov	r4, r0
 8009600:	2800      	cmp	r0, #0
 8009602:	f43f ae40 	beq.w	8009286 <_strtod_l+0x446>
 8009606:	68c3      	ldr	r3, [r0, #12]
 8009608:	930f      	str	r3, [sp, #60]	@ 0x3c
 800960a:	2300      	movs	r3, #0
 800960c:	60c3      	str	r3, [r0, #12]
 800960e:	4641      	mov	r1, r8
 8009610:	f7ff fa0a 	bl	8008a28 <__mcmp>
 8009614:	2800      	cmp	r0, #0
 8009616:	da45      	bge.n	80096a4 <_strtod_l+0x864>
 8009618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800961a:	ea53 030a 	orrs.w	r3, r3, sl
 800961e:	d16b      	bne.n	80096f8 <_strtod_l+0x8b8>
 8009620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009624:	2b00      	cmp	r3, #0
 8009626:	d167      	bne.n	80096f8 <_strtod_l+0x8b8>
 8009628:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800962c:	0d1b      	lsrs	r3, r3, #20
 800962e:	051b      	lsls	r3, r3, #20
 8009630:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009634:	d960      	bls.n	80096f8 <_strtod_l+0x8b8>
 8009636:	6963      	ldr	r3, [r4, #20]
 8009638:	b913      	cbnz	r3, 8009640 <_strtod_l+0x800>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	2b01      	cmp	r3, #1
 800963e:	dd5b      	ble.n	80096f8 <_strtod_l+0x8b8>
 8009640:	4621      	mov	r1, r4
 8009642:	2201      	movs	r2, #1
 8009644:	9805      	ldr	r0, [sp, #20]
 8009646:	f7ff f983 	bl	8008950 <__lshift>
 800964a:	4641      	mov	r1, r8
 800964c:	4604      	mov	r4, r0
 800964e:	f7ff f9eb 	bl	8008a28 <__mcmp>
 8009652:	2800      	cmp	r0, #0
 8009654:	dd50      	ble.n	80096f8 <_strtod_l+0x8b8>
 8009656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800965a:	9a08      	ldr	r2, [sp, #32]
 800965c:	0d1b      	lsrs	r3, r3, #20
 800965e:	051b      	lsls	r3, r3, #20
 8009660:	2a00      	cmp	r2, #0
 8009662:	d06a      	beq.n	800973a <_strtod_l+0x8fa>
 8009664:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009668:	d867      	bhi.n	800973a <_strtod_l+0x8fa>
 800966a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800966e:	f67f ae9d 	bls.w	80093ac <_strtod_l+0x56c>
 8009672:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <_strtod_l+0x85c>)
 8009674:	4650      	mov	r0, sl
 8009676:	4659      	mov	r1, fp
 8009678:	2200      	movs	r2, #0
 800967a:	f7f6 ffbd 	bl	80005f8 <__aeabi_dmul>
 800967e:	4b08      	ldr	r3, [pc, #32]	@ (80096a0 <_strtod_l+0x860>)
 8009680:	400b      	ands	r3, r1
 8009682:	4682      	mov	sl, r0
 8009684:	468b      	mov	fp, r1
 8009686:	2b00      	cmp	r3, #0
 8009688:	f47f ae08 	bne.w	800929c <_strtod_l+0x45c>
 800968c:	9a05      	ldr	r2, [sp, #20]
 800968e:	2322      	movs	r3, #34	@ 0x22
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	e603      	b.n	800929c <_strtod_l+0x45c>
 8009694:	0800afb0 	.word	0x0800afb0
 8009698:	fffffc02 	.word	0xfffffc02
 800969c:	39500000 	.word	0x39500000
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80096a8:	d165      	bne.n	8009776 <_strtod_l+0x936>
 80096aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096b0:	b35a      	cbz	r2, 800970a <_strtod_l+0x8ca>
 80096b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009930 <_strtod_l+0xaf0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d12b      	bne.n	8009710 <_strtod_l+0x8d0>
 80096b8:	9b08      	ldr	r3, [sp, #32]
 80096ba:	4651      	mov	r1, sl
 80096bc:	b303      	cbz	r3, 8009700 <_strtod_l+0x8c0>
 80096be:	4b9d      	ldr	r3, [pc, #628]	@ (8009934 <_strtod_l+0xaf4>)
 80096c0:	465a      	mov	r2, fp
 80096c2:	4013      	ands	r3, r2
 80096c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295
 80096cc:	d81b      	bhi.n	8009706 <_strtod_l+0x8c6>
 80096ce:	0d1b      	lsrs	r3, r3, #20
 80096d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096d4:	fa02 f303 	lsl.w	r3, r2, r3
 80096d8:	4299      	cmp	r1, r3
 80096da:	d119      	bne.n	8009710 <_strtod_l+0x8d0>
 80096dc:	4b96      	ldr	r3, [pc, #600]	@ (8009938 <_strtod_l+0xaf8>)
 80096de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d102      	bne.n	80096ea <_strtod_l+0x8aa>
 80096e4:	3101      	adds	r1, #1
 80096e6:	f43f adce 	beq.w	8009286 <_strtod_l+0x446>
 80096ea:	4b92      	ldr	r3, [pc, #584]	@ (8009934 <_strtod_l+0xaf4>)
 80096ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096ee:	401a      	ands	r2, r3
 80096f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80096f4:	f04f 0a00 	mov.w	sl, #0
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1b9      	bne.n	8009672 <_strtod_l+0x832>
 80096fe:	e5cd      	b.n	800929c <_strtod_l+0x45c>
 8009700:	f04f 33ff 	mov.w	r3, #4294967295
 8009704:	e7e8      	b.n	80096d8 <_strtod_l+0x898>
 8009706:	4613      	mov	r3, r2
 8009708:	e7e6      	b.n	80096d8 <_strtod_l+0x898>
 800970a:	ea53 030a 	orrs.w	r3, r3, sl
 800970e:	d0a2      	beq.n	8009656 <_strtod_l+0x816>
 8009710:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009712:	b1db      	cbz	r3, 800974c <_strtod_l+0x90c>
 8009714:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009716:	4213      	tst	r3, r2
 8009718:	d0ee      	beq.n	80096f8 <_strtod_l+0x8b8>
 800971a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971c:	9a08      	ldr	r2, [sp, #32]
 800971e:	4650      	mov	r0, sl
 8009720:	4659      	mov	r1, fp
 8009722:	b1bb      	cbz	r3, 8009754 <_strtod_l+0x914>
 8009724:	f7ff fb6e 	bl	8008e04 <sulp>
 8009728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800972c:	ec53 2b10 	vmov	r2, r3, d0
 8009730:	f7f6 fdac 	bl	800028c <__adddf3>
 8009734:	4682      	mov	sl, r0
 8009736:	468b      	mov	fp, r1
 8009738:	e7de      	b.n	80096f8 <_strtod_l+0x8b8>
 800973a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800973e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009742:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009746:	f04f 3aff 	mov.w	sl, #4294967295
 800974a:	e7d5      	b.n	80096f8 <_strtod_l+0x8b8>
 800974c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800974e:	ea13 0f0a 	tst.w	r3, sl
 8009752:	e7e1      	b.n	8009718 <_strtod_l+0x8d8>
 8009754:	f7ff fb56 	bl	8008e04 <sulp>
 8009758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975c:	ec53 2b10 	vmov	r2, r3, d0
 8009760:	f7f6 fd92 	bl	8000288 <__aeabi_dsub>
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4682      	mov	sl, r0
 800976a:	468b      	mov	fp, r1
 800976c:	f7f7 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009770:	2800      	cmp	r0, #0
 8009772:	d0c1      	beq.n	80096f8 <_strtod_l+0x8b8>
 8009774:	e61a      	b.n	80093ac <_strtod_l+0x56c>
 8009776:	4641      	mov	r1, r8
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff facd 	bl	8008d18 <__ratio>
 800977e:	ec57 6b10 	vmov	r6, r7, d0
 8009782:	2200      	movs	r2, #0
 8009784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 f9b0 	bl	8000af0 <__aeabi_dcmple>
 8009790:	2800      	cmp	r0, #0
 8009792:	d06f      	beq.n	8009874 <_strtod_l+0xa34>
 8009794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d17a      	bne.n	8009890 <_strtod_l+0xa50>
 800979a:	f1ba 0f00 	cmp.w	sl, #0
 800979e:	d158      	bne.n	8009852 <_strtod_l+0xa12>
 80097a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d15a      	bne.n	8009860 <_strtod_l+0xa20>
 80097aa:	4b64      	ldr	r3, [pc, #400]	@ (800993c <_strtod_l+0xafc>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f7 f993 	bl	8000adc <__aeabi_dcmplt>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d159      	bne.n	800986e <_strtod_l+0xa2e>
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	4b60      	ldr	r3, [pc, #384]	@ (8009940 <_strtod_l+0xb00>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	f7f6 ff19 	bl	80005f8 <__aeabi_dmul>
 80097c6:	4606      	mov	r6, r0
 80097c8:	460f      	mov	r7, r1
 80097ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097ce:	9606      	str	r6, [sp, #24]
 80097d0:	9307      	str	r3, [sp, #28]
 80097d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097d6:	4d57      	ldr	r5, [pc, #348]	@ (8009934 <_strtod_l+0xaf4>)
 80097d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097de:	401d      	ands	r5, r3
 80097e0:	4b58      	ldr	r3, [pc, #352]	@ (8009944 <_strtod_l+0xb04>)
 80097e2:	429d      	cmp	r5, r3
 80097e4:	f040 80b2 	bne.w	800994c <_strtod_l+0xb0c>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097ee:	ec4b ab10 	vmov	d0, sl, fp
 80097f2:	f7ff f9c9 	bl	8008b88 <__ulp>
 80097f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097fa:	ec51 0b10 	vmov	r0, r1, d0
 80097fe:	f7f6 fefb 	bl	80005f8 <__aeabi_dmul>
 8009802:	4652      	mov	r2, sl
 8009804:	465b      	mov	r3, fp
 8009806:	f7f6 fd41 	bl	800028c <__adddf3>
 800980a:	460b      	mov	r3, r1
 800980c:	4949      	ldr	r1, [pc, #292]	@ (8009934 <_strtod_l+0xaf4>)
 800980e:	4a4e      	ldr	r2, [pc, #312]	@ (8009948 <_strtod_l+0xb08>)
 8009810:	4019      	ands	r1, r3
 8009812:	4291      	cmp	r1, r2
 8009814:	4682      	mov	sl, r0
 8009816:	d942      	bls.n	800989e <_strtod_l+0xa5e>
 8009818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800981a:	4b47      	ldr	r3, [pc, #284]	@ (8009938 <_strtod_l+0xaf8>)
 800981c:	429a      	cmp	r2, r3
 800981e:	d103      	bne.n	8009828 <_strtod_l+0x9e8>
 8009820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009822:	3301      	adds	r3, #1
 8009824:	f43f ad2f 	beq.w	8009286 <_strtod_l+0x446>
 8009828:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009938 <_strtod_l+0xaf8>
 800982c:	f04f 3aff 	mov.w	sl, #4294967295
 8009830:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009832:	9805      	ldr	r0, [sp, #20]
 8009834:	f7fe fe7c 	bl	8008530 <_Bfree>
 8009838:	9805      	ldr	r0, [sp, #20]
 800983a:	4649      	mov	r1, r9
 800983c:	f7fe fe78 	bl	8008530 <_Bfree>
 8009840:	9805      	ldr	r0, [sp, #20]
 8009842:	4641      	mov	r1, r8
 8009844:	f7fe fe74 	bl	8008530 <_Bfree>
 8009848:	9805      	ldr	r0, [sp, #20]
 800984a:	4621      	mov	r1, r4
 800984c:	f7fe fe70 	bl	8008530 <_Bfree>
 8009850:	e619      	b.n	8009486 <_strtod_l+0x646>
 8009852:	f1ba 0f01 	cmp.w	sl, #1
 8009856:	d103      	bne.n	8009860 <_strtod_l+0xa20>
 8009858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	f43f ada6 	beq.w	80093ac <_strtod_l+0x56c>
 8009860:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009910 <_strtod_l+0xad0>
 8009864:	4f35      	ldr	r7, [pc, #212]	@ (800993c <_strtod_l+0xafc>)
 8009866:	ed8d 7b06 	vstr	d7, [sp, #24]
 800986a:	2600      	movs	r6, #0
 800986c:	e7b1      	b.n	80097d2 <_strtod_l+0x992>
 800986e:	4f34      	ldr	r7, [pc, #208]	@ (8009940 <_strtod_l+0xb00>)
 8009870:	2600      	movs	r6, #0
 8009872:	e7aa      	b.n	80097ca <_strtod_l+0x98a>
 8009874:	4b32      	ldr	r3, [pc, #200]	@ (8009940 <_strtod_l+0xb00>)
 8009876:	4630      	mov	r0, r6
 8009878:	4639      	mov	r1, r7
 800987a:	2200      	movs	r2, #0
 800987c:	f7f6 febc 	bl	80005f8 <__aeabi_dmul>
 8009880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d09f      	beq.n	80097ca <_strtod_l+0x98a>
 800988a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800988e:	e7a0      	b.n	80097d2 <_strtod_l+0x992>
 8009890:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009918 <_strtod_l+0xad8>
 8009894:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009898:	ec57 6b17 	vmov	r6, r7, d7
 800989c:	e799      	b.n	80097d2 <_strtod_l+0x992>
 800989e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1c1      	bne.n	8009830 <_strtod_l+0x9f0>
 80098ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098b0:	0d1b      	lsrs	r3, r3, #20
 80098b2:	051b      	lsls	r3, r3, #20
 80098b4:	429d      	cmp	r5, r3
 80098b6:	d1bb      	bne.n	8009830 <_strtod_l+0x9f0>
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	f7f7 f9fc 	bl	8000cb8 <__aeabi_d2lz>
 80098c0:	f7f6 fe6c 	bl	800059c <__aeabi_l2d>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f6 fcdc 	bl	8000288 <__aeabi_dsub>
 80098d0:	460b      	mov	r3, r1
 80098d2:	4602      	mov	r2, r0
 80098d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098de:	ea46 060a 	orr.w	r6, r6, sl
 80098e2:	431e      	orrs	r6, r3
 80098e4:	d06f      	beq.n	80099c6 <_strtod_l+0xb86>
 80098e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009920 <_strtod_l+0xae0>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f7 f8f6 	bl	8000adc <__aeabi_dcmplt>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f47f acd3 	bne.w	800929c <_strtod_l+0x45c>
 80098f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009928 <_strtod_l+0xae8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009900:	f7f7 f90a 	bl	8000b18 <__aeabi_dcmpgt>
 8009904:	2800      	cmp	r0, #0
 8009906:	d093      	beq.n	8009830 <_strtod_l+0x9f0>
 8009908:	e4c8      	b.n	800929c <_strtod_l+0x45c>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	00000000 	.word	0x00000000
 8009914:	bff00000 	.word	0xbff00000
 8009918:	00000000 	.word	0x00000000
 800991c:	3ff00000 	.word	0x3ff00000
 8009920:	94a03595 	.word	0x94a03595
 8009924:	3fdfffff 	.word	0x3fdfffff
 8009928:	35afe535 	.word	0x35afe535
 800992c:	3fe00000 	.word	0x3fe00000
 8009930:	000fffff 	.word	0x000fffff
 8009934:	7ff00000 	.word	0x7ff00000
 8009938:	7fefffff 	.word	0x7fefffff
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	3fe00000 	.word	0x3fe00000
 8009944:	7fe00000 	.word	0x7fe00000
 8009948:	7c9fffff 	.word	0x7c9fffff
 800994c:	9b08      	ldr	r3, [sp, #32]
 800994e:	b323      	cbz	r3, 800999a <_strtod_l+0xb5a>
 8009950:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009954:	d821      	bhi.n	800999a <_strtod_l+0xb5a>
 8009956:	a328      	add	r3, pc, #160	@ (adr r3, 80099f8 <_strtod_l+0xbb8>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f7f7 f8c6 	bl	8000af0 <__aeabi_dcmple>
 8009964:	b1a0      	cbz	r0, 8009990 <_strtod_l+0xb50>
 8009966:	4639      	mov	r1, r7
 8009968:	4630      	mov	r0, r6
 800996a:	f7f7 f91d 	bl	8000ba8 <__aeabi_d2uiz>
 800996e:	2801      	cmp	r0, #1
 8009970:	bf38      	it	cc
 8009972:	2001      	movcc	r0, #1
 8009974:	f7f6 fdc6 	bl	8000504 <__aeabi_ui2d>
 8009978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	b9fb      	cbnz	r3, 80099c0 <_strtod_l+0xb80>
 8009980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009984:	9014      	str	r0, [sp, #80]	@ 0x50
 8009986:	9315      	str	r3, [sp, #84]	@ 0x54
 8009988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800998c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009992:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009996:	1b5b      	subs	r3, r3, r5
 8009998:	9311      	str	r3, [sp, #68]	@ 0x44
 800999a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800999e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099a2:	f7ff f8f1 	bl	8008b88 <__ulp>
 80099a6:	4650      	mov	r0, sl
 80099a8:	ec53 2b10 	vmov	r2, r3, d0
 80099ac:	4659      	mov	r1, fp
 80099ae:	f7f6 fe23 	bl	80005f8 <__aeabi_dmul>
 80099b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099b6:	f7f6 fc69 	bl	800028c <__adddf3>
 80099ba:	4682      	mov	sl, r0
 80099bc:	468b      	mov	fp, r1
 80099be:	e770      	b.n	80098a2 <_strtod_l+0xa62>
 80099c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099c4:	e7e0      	b.n	8009988 <_strtod_l+0xb48>
 80099c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a00 <_strtod_l+0xbc0>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f7 f886 	bl	8000adc <__aeabi_dcmplt>
 80099d0:	e798      	b.n	8009904 <_strtod_l+0xac4>
 80099d2:	2300      	movs	r3, #0
 80099d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80099d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	f7ff ba6d 	b.w	8008eba <_strtod_l+0x7a>
 80099e0:	2a65      	cmp	r2, #101	@ 0x65
 80099e2:	f43f ab68 	beq.w	80090b6 <_strtod_l+0x276>
 80099e6:	2a45      	cmp	r2, #69	@ 0x45
 80099e8:	f43f ab65 	beq.w	80090b6 <_strtod_l+0x276>
 80099ec:	2301      	movs	r3, #1
 80099ee:	f7ff bba0 	b.w	8009132 <_strtod_l+0x2f2>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	ffc00000 	.word	0xffc00000
 80099fc:	41dfffff 	.word	0x41dfffff
 8009a00:	94a03595 	.word	0x94a03595
 8009a04:	3fcfffff 	.word	0x3fcfffff

08009a08 <_strtod_r>:
 8009a08:	4b01      	ldr	r3, [pc, #4]	@ (8009a10 <_strtod_r+0x8>)
 8009a0a:	f7ff ba19 	b.w	8008e40 <_strtod_l>
 8009a0e:	bf00      	nop
 8009a10:	20000070 	.word	0x20000070

08009a14 <_strtol_l.isra.0>:
 8009a14:	2b24      	cmp	r3, #36	@ 0x24
 8009a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1a:	4686      	mov	lr, r0
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	d801      	bhi.n	8009a24 <_strtol_l.isra.0+0x10>
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d106      	bne.n	8009a32 <_strtol_l.isra.0+0x1e>
 8009a24:	f7fd fdb6 	bl	8007594 <__errno>
 8009a28:	2316      	movs	r3, #22
 8009a2a:	6003      	str	r3, [r0, #0]
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a32:	4834      	ldr	r0, [pc, #208]	@ (8009b04 <_strtol_l.isra.0+0xf0>)
 8009a34:	460d      	mov	r5, r1
 8009a36:	462a      	mov	r2, r5
 8009a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a3c:	5d06      	ldrb	r6, [r0, r4]
 8009a3e:	f016 0608 	ands.w	r6, r6, #8
 8009a42:	d1f8      	bne.n	8009a36 <_strtol_l.isra.0+0x22>
 8009a44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a46:	d110      	bne.n	8009a6a <_strtol_l.isra.0+0x56>
 8009a48:	782c      	ldrb	r4, [r5, #0]
 8009a4a:	2601      	movs	r6, #1
 8009a4c:	1c95      	adds	r5, r2, #2
 8009a4e:	f033 0210 	bics.w	r2, r3, #16
 8009a52:	d115      	bne.n	8009a80 <_strtol_l.isra.0+0x6c>
 8009a54:	2c30      	cmp	r4, #48	@ 0x30
 8009a56:	d10d      	bne.n	8009a74 <_strtol_l.isra.0+0x60>
 8009a58:	782a      	ldrb	r2, [r5, #0]
 8009a5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a5e:	2a58      	cmp	r2, #88	@ 0x58
 8009a60:	d108      	bne.n	8009a74 <_strtol_l.isra.0+0x60>
 8009a62:	786c      	ldrb	r4, [r5, #1]
 8009a64:	3502      	adds	r5, #2
 8009a66:	2310      	movs	r3, #16
 8009a68:	e00a      	b.n	8009a80 <_strtol_l.isra.0+0x6c>
 8009a6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a6c:	bf04      	itt	eq
 8009a6e:	782c      	ldrbeq	r4, [r5, #0]
 8009a70:	1c95      	addeq	r5, r2, #2
 8009a72:	e7ec      	b.n	8009a4e <_strtol_l.isra.0+0x3a>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f6      	bne.n	8009a66 <_strtol_l.isra.0+0x52>
 8009a78:	2c30      	cmp	r4, #48	@ 0x30
 8009a7a:	bf14      	ite	ne
 8009a7c:	230a      	movne	r3, #10
 8009a7e:	2308      	moveq	r3, #8
 8009a80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a88:	2200      	movs	r2, #0
 8009a8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a98:	2f09      	cmp	r7, #9
 8009a9a:	d80f      	bhi.n	8009abc <_strtol_l.isra.0+0xa8>
 8009a9c:	463c      	mov	r4, r7
 8009a9e:	42a3      	cmp	r3, r4
 8009aa0:	dd1b      	ble.n	8009ada <_strtol_l.isra.0+0xc6>
 8009aa2:	1c57      	adds	r7, r2, #1
 8009aa4:	d007      	beq.n	8009ab6 <_strtol_l.isra.0+0xa2>
 8009aa6:	4581      	cmp	r9, r0
 8009aa8:	d314      	bcc.n	8009ad4 <_strtol_l.isra.0+0xc0>
 8009aaa:	d101      	bne.n	8009ab0 <_strtol_l.isra.0+0x9c>
 8009aac:	45a2      	cmp	sl, r4
 8009aae:	db11      	blt.n	8009ad4 <_strtol_l.isra.0+0xc0>
 8009ab0:	fb00 4003 	mla	r0, r0, r3, r4
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aba:	e7eb      	b.n	8009a94 <_strtol_l.isra.0+0x80>
 8009abc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ac0:	2f19      	cmp	r7, #25
 8009ac2:	d801      	bhi.n	8009ac8 <_strtol_l.isra.0+0xb4>
 8009ac4:	3c37      	subs	r4, #55	@ 0x37
 8009ac6:	e7ea      	b.n	8009a9e <_strtol_l.isra.0+0x8a>
 8009ac8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009acc:	2f19      	cmp	r7, #25
 8009ace:	d804      	bhi.n	8009ada <_strtol_l.isra.0+0xc6>
 8009ad0:	3c57      	subs	r4, #87	@ 0x57
 8009ad2:	e7e4      	b.n	8009a9e <_strtol_l.isra.0+0x8a>
 8009ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad8:	e7ed      	b.n	8009ab6 <_strtol_l.isra.0+0xa2>
 8009ada:	1c53      	adds	r3, r2, #1
 8009adc:	d108      	bne.n	8009af0 <_strtol_l.isra.0+0xdc>
 8009ade:	2322      	movs	r3, #34	@ 0x22
 8009ae0:	f8ce 3000 	str.w	r3, [lr]
 8009ae4:	4660      	mov	r0, ip
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	d0a0      	beq.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009aec:	1e69      	subs	r1, r5, #1
 8009aee:	e006      	b.n	8009afe <_strtol_l.isra.0+0xea>
 8009af0:	b106      	cbz	r6, 8009af4 <_strtol_l.isra.0+0xe0>
 8009af2:	4240      	negs	r0, r0
 8009af4:	f1b8 0f00 	cmp.w	r8, #0
 8009af8:	d099      	beq.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	d1f6      	bne.n	8009aec <_strtol_l.isra.0+0xd8>
 8009afe:	f8c8 1000 	str.w	r1, [r8]
 8009b02:	e794      	b.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009b04:	0800afd9 	.word	0x0800afd9

08009b08 <_strtol_r>:
 8009b08:	f7ff bf84 	b.w	8009a14 <_strtol_l.isra.0>

08009b0c <__ssputs_r>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	688e      	ldr	r6, [r1, #8]
 8009b12:	461f      	mov	r7, r3
 8009b14:	42be      	cmp	r6, r7
 8009b16:	680b      	ldr	r3, [r1, #0]
 8009b18:	4682      	mov	sl, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4690      	mov	r8, r2
 8009b1e:	d82d      	bhi.n	8009b7c <__ssputs_r+0x70>
 8009b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b28:	d026      	beq.n	8009b78 <__ssputs_r+0x6c>
 8009b2a:	6965      	ldr	r5, [r4, #20]
 8009b2c:	6909      	ldr	r1, [r1, #16]
 8009b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b32:	eba3 0901 	sub.w	r9, r3, r1
 8009b36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b3a:	1c7b      	adds	r3, r7, #1
 8009b3c:	444b      	add	r3, r9
 8009b3e:	106d      	asrs	r5, r5, #1
 8009b40:	429d      	cmp	r5, r3
 8009b42:	bf38      	it	cc
 8009b44:	461d      	movcc	r5, r3
 8009b46:	0553      	lsls	r3, r2, #21
 8009b48:	d527      	bpl.n	8009b9a <__ssputs_r+0x8e>
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7fe fc24 	bl	8008398 <_malloc_r>
 8009b50:	4606      	mov	r6, r0
 8009b52:	b360      	cbz	r0, 8009bae <__ssputs_r+0xa2>
 8009b54:	6921      	ldr	r1, [r4, #16]
 8009b56:	464a      	mov	r2, r9
 8009b58:	f000 fbde 	bl	800a318 <memcpy>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b66:	81a3      	strh	r3, [r4, #12]
 8009b68:	6126      	str	r6, [r4, #16]
 8009b6a:	6165      	str	r5, [r4, #20]
 8009b6c:	444e      	add	r6, r9
 8009b6e:	eba5 0509 	sub.w	r5, r5, r9
 8009b72:	6026      	str	r6, [r4, #0]
 8009b74:	60a5      	str	r5, [r4, #8]
 8009b76:	463e      	mov	r6, r7
 8009b78:	42be      	cmp	r6, r7
 8009b7a:	d900      	bls.n	8009b7e <__ssputs_r+0x72>
 8009b7c:	463e      	mov	r6, r7
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	4632      	mov	r2, r6
 8009b82:	4641      	mov	r1, r8
 8009b84:	f000 fb6a 	bl	800a25c <memmove>
 8009b88:	68a3      	ldr	r3, [r4, #8]
 8009b8a:	1b9b      	subs	r3, r3, r6
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	4433      	add	r3, r6
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	2000      	movs	r0, #0
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	f000 ff51 	bl	800aa42 <_realloc_r>
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d1e0      	bne.n	8009b68 <__ssputs_r+0x5c>
 8009ba6:	6921      	ldr	r1, [r4, #16]
 8009ba8:	4650      	mov	r0, sl
 8009baa:	f7fe fb81 	bl	80082b0 <_free_r>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	f8ca 3000 	str.w	r3, [sl]
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bba:	81a3      	strh	r3, [r4, #12]
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	e7e9      	b.n	8009b96 <__ssputs_r+0x8a>
	...

08009bc4 <_svfiprintf_r>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4698      	mov	r8, r3
 8009bca:	898b      	ldrh	r3, [r1, #12]
 8009bcc:	061b      	lsls	r3, r3, #24
 8009bce:	b09d      	sub	sp, #116	@ 0x74
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	d510      	bpl.n	8009bfa <_svfiprintf_r+0x36>
 8009bd8:	690b      	ldr	r3, [r1, #16]
 8009bda:	b973      	cbnz	r3, 8009bfa <_svfiprintf_r+0x36>
 8009bdc:	2140      	movs	r1, #64	@ 0x40
 8009bde:	f7fe fbdb 	bl	8008398 <_malloc_r>
 8009be2:	6028      	str	r0, [r5, #0]
 8009be4:	6128      	str	r0, [r5, #16]
 8009be6:	b930      	cbnz	r0, 8009bf6 <_svfiprintf_r+0x32>
 8009be8:	230c      	movs	r3, #12
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	b01d      	add	sp, #116	@ 0x74
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	2340      	movs	r3, #64	@ 0x40
 8009bf8:	616b      	str	r3, [r5, #20]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfe:	2320      	movs	r3, #32
 8009c00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c08:	2330      	movs	r3, #48	@ 0x30
 8009c0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009da8 <_svfiprintf_r+0x1e4>
 8009c0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c12:	f04f 0901 	mov.w	r9, #1
 8009c16:	4623      	mov	r3, r4
 8009c18:	469a      	mov	sl, r3
 8009c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1e:	b10a      	cbz	r2, 8009c24 <_svfiprintf_r+0x60>
 8009c20:	2a25      	cmp	r2, #37	@ 0x25
 8009c22:	d1f9      	bne.n	8009c18 <_svfiprintf_r+0x54>
 8009c24:	ebba 0b04 	subs.w	fp, sl, r4
 8009c28:	d00b      	beq.n	8009c42 <_svfiprintf_r+0x7e>
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff6b 	bl	8009b0c <__ssputs_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	f000 80a7 	beq.w	8009d8a <_svfiprintf_r+0x1c6>
 8009c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c3e:	445a      	add	r2, fp
 8009c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c42:	f89a 3000 	ldrb.w	r3, [sl]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 809f 	beq.w	8009d8a <_svfiprintf_r+0x1c6>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c56:	f10a 0a01 	add.w	sl, sl, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	9307      	str	r3, [sp, #28]
 8009c5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c64:	4654      	mov	r4, sl
 8009c66:	2205      	movs	r2, #5
 8009c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6c:	484e      	ldr	r0, [pc, #312]	@ (8009da8 <_svfiprintf_r+0x1e4>)
 8009c6e:	f7f6 faaf 	bl	80001d0 <memchr>
 8009c72:	9a04      	ldr	r2, [sp, #16]
 8009c74:	b9d8      	cbnz	r0, 8009cae <_svfiprintf_r+0xea>
 8009c76:	06d0      	lsls	r0, r2, #27
 8009c78:	bf44      	itt	mi
 8009c7a:	2320      	movmi	r3, #32
 8009c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c80:	0711      	lsls	r1, r2, #28
 8009c82:	bf44      	itt	mi
 8009c84:	232b      	movmi	r3, #43	@ 0x2b
 8009c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c90:	d015      	beq.n	8009cbe <_svfiprintf_r+0xfa>
 8009c92:	9a07      	ldr	r2, [sp, #28]
 8009c94:	4654      	mov	r4, sl
 8009c96:	2000      	movs	r0, #0
 8009c98:	f04f 0c0a 	mov.w	ip, #10
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca2:	3b30      	subs	r3, #48	@ 0x30
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d94b      	bls.n	8009d40 <_svfiprintf_r+0x17c>
 8009ca8:	b1b0      	cbz	r0, 8009cd8 <_svfiprintf_r+0x114>
 8009caa:	9207      	str	r2, [sp, #28]
 8009cac:	e014      	b.n	8009cd8 <_svfiprintf_r+0x114>
 8009cae:	eba0 0308 	sub.w	r3, r0, r8
 8009cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	46a2      	mov	sl, r4
 8009cbc:	e7d2      	b.n	8009c64 <_svfiprintf_r+0xa0>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	1d19      	adds	r1, r3, #4
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	9103      	str	r1, [sp, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfbb      	ittet	lt
 8009cca:	425b      	neglt	r3, r3
 8009ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd0:	9307      	strge	r3, [sp, #28]
 8009cd2:	9307      	strlt	r3, [sp, #28]
 8009cd4:	bfb8      	it	lt
 8009cd6:	9204      	strlt	r2, [sp, #16]
 8009cd8:	7823      	ldrb	r3, [r4, #0]
 8009cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cdc:	d10a      	bne.n	8009cf4 <_svfiprintf_r+0x130>
 8009cde:	7863      	ldrb	r3, [r4, #1]
 8009ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ce2:	d132      	bne.n	8009d4a <_svfiprintf_r+0x186>
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	1d1a      	adds	r2, r3, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	9203      	str	r2, [sp, #12]
 8009cec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cf0:	3402      	adds	r4, #2
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009db8 <_svfiprintf_r+0x1f4>
 8009cf8:	7821      	ldrb	r1, [r4, #0]
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	f7f6 fa67 	bl	80001d0 <memchr>
 8009d02:	b138      	cbz	r0, 8009d14 <_svfiprintf_r+0x150>
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	eba0 000a 	sub.w	r0, r0, sl
 8009d0a:	2240      	movs	r2, #64	@ 0x40
 8009d0c:	4082      	lsls	r2, r0
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	3401      	adds	r4, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d18:	4824      	ldr	r0, [pc, #144]	@ (8009dac <_svfiprintf_r+0x1e8>)
 8009d1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d1e:	2206      	movs	r2, #6
 8009d20:	f7f6 fa56 	bl	80001d0 <memchr>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d036      	beq.n	8009d96 <_svfiprintf_r+0x1d2>
 8009d28:	4b21      	ldr	r3, [pc, #132]	@ (8009db0 <_svfiprintf_r+0x1ec>)
 8009d2a:	bb1b      	cbnz	r3, 8009d74 <_svfiprintf_r+0x1b0>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	f023 0307 	bic.w	r3, r3, #7
 8009d34:	3308      	adds	r3, #8
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3a:	4433      	add	r3, r6
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	e76a      	b.n	8009c16 <_svfiprintf_r+0x52>
 8009d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d44:	460c      	mov	r4, r1
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7a8      	b.n	8009c9c <_svfiprintf_r+0xd8>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	3401      	adds	r4, #1
 8009d4e:	9305      	str	r3, [sp, #20]
 8009d50:	4619      	mov	r1, r3
 8009d52:	f04f 0c0a 	mov.w	ip, #10
 8009d56:	4620      	mov	r0, r4
 8009d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d5c:	3a30      	subs	r2, #48	@ 0x30
 8009d5e:	2a09      	cmp	r2, #9
 8009d60:	d903      	bls.n	8009d6a <_svfiprintf_r+0x1a6>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0c6      	beq.n	8009cf4 <_svfiprintf_r+0x130>
 8009d66:	9105      	str	r1, [sp, #20]
 8009d68:	e7c4      	b.n	8009cf4 <_svfiprintf_r+0x130>
 8009d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d6e:	4604      	mov	r4, r0
 8009d70:	2301      	movs	r3, #1
 8009d72:	e7f0      	b.n	8009d56 <_svfiprintf_r+0x192>
 8009d74:	ab03      	add	r3, sp, #12
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009db4 <_svfiprintf_r+0x1f0>)
 8009d7c:	a904      	add	r1, sp, #16
 8009d7e:	4638      	mov	r0, r7
 8009d80:	f7fc fbc6 	bl	8006510 <_printf_float>
 8009d84:	1c42      	adds	r2, r0, #1
 8009d86:	4606      	mov	r6, r0
 8009d88:	d1d6      	bne.n	8009d38 <_svfiprintf_r+0x174>
 8009d8a:	89ab      	ldrh	r3, [r5, #12]
 8009d8c:	065b      	lsls	r3, r3, #25
 8009d8e:	f53f af2d 	bmi.w	8009bec <_svfiprintf_r+0x28>
 8009d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d94:	e72c      	b.n	8009bf0 <_svfiprintf_r+0x2c>
 8009d96:	ab03      	add	r3, sp, #12
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	462a      	mov	r2, r5
 8009d9c:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <_svfiprintf_r+0x1f0>)
 8009d9e:	a904      	add	r1, sp, #16
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7fc fe4d 	bl	8006a40 <_printf_i>
 8009da6:	e7ed      	b.n	8009d84 <_svfiprintf_r+0x1c0>
 8009da8:	0800add1 	.word	0x0800add1
 8009dac:	0800addb 	.word	0x0800addb
 8009db0:	08006511 	.word	0x08006511
 8009db4:	08009b0d 	.word	0x08009b0d
 8009db8:	0800add7 	.word	0x0800add7

08009dbc <__sfputc_r>:
 8009dbc:	6893      	ldr	r3, [r2, #8]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	b410      	push	{r4}
 8009dc4:	6093      	str	r3, [r2, #8]
 8009dc6:	da08      	bge.n	8009dda <__sfputc_r+0x1e>
 8009dc8:	6994      	ldr	r4, [r2, #24]
 8009dca:	42a3      	cmp	r3, r4
 8009dcc:	db01      	blt.n	8009dd2 <__sfputc_r+0x16>
 8009dce:	290a      	cmp	r1, #10
 8009dd0:	d103      	bne.n	8009dda <__sfputc_r+0x1e>
 8009dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd6:	f7fd baf6 	b.w	80073c6 <__swbuf_r>
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	1c58      	adds	r0, r3, #1
 8009dde:	6010      	str	r0, [r2, #0]
 8009de0:	7019      	strb	r1, [r3, #0]
 8009de2:	4608      	mov	r0, r1
 8009de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <__sfputs_r>:
 8009dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	18d5      	adds	r5, r2, r3
 8009df4:	42ac      	cmp	r4, r5
 8009df6:	d101      	bne.n	8009dfc <__sfputs_r+0x12>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	e007      	b.n	8009e0c <__sfputs_r+0x22>
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	463a      	mov	r2, r7
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ffda 	bl	8009dbc <__sfputc_r>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d1f3      	bne.n	8009df4 <__sfputs_r+0xa>
 8009e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e10 <_vfiprintf_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	460d      	mov	r5, r1
 8009e16:	b09d      	sub	sp, #116	@ 0x74
 8009e18:	4614      	mov	r4, r2
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	b118      	cbz	r0, 8009e28 <_vfiprintf_r+0x18>
 8009e20:	6a03      	ldr	r3, [r0, #32]
 8009e22:	b90b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x18>
 8009e24:	f7fd f9c4 	bl	80071b0 <__sinit>
 8009e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e36:	f7fd fbd8 	bl	80075ea <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x34>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b99b      	cbnz	r3, 8009e6c <_vfiprintf_r+0x5c>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7fd fafc 	bl	8007444 <__swsetup_r>
 8009e4c:	b170      	cbz	r0, 8009e6c <_vfiprintf_r+0x5c>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d504      	bpl.n	8009e5e <_vfiprintf_r+0x4e>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	@ 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	0598      	lsls	r0, r3, #22
 8009e62:	d4f7      	bmi.n	8009e54 <_vfiprintf_r+0x44>
 8009e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e66:	f7fd fbc1 	bl	80075ec <__retarget_lock_release_recursive>
 8009e6a:	e7f3      	b.n	8009e54 <_vfiprintf_r+0x44>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e70:	2320      	movs	r3, #32
 8009e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e7a:	2330      	movs	r3, #48	@ 0x30
 8009e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a02c <_vfiprintf_r+0x21c>
 8009e80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e84:	f04f 0901 	mov.w	r9, #1
 8009e88:	4623      	mov	r3, r4
 8009e8a:	469a      	mov	sl, r3
 8009e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e90:	b10a      	cbz	r2, 8009e96 <_vfiprintf_r+0x86>
 8009e92:	2a25      	cmp	r2, #37	@ 0x25
 8009e94:	d1f9      	bne.n	8009e8a <_vfiprintf_r+0x7a>
 8009e96:	ebba 0b04 	subs.w	fp, sl, r4
 8009e9a:	d00b      	beq.n	8009eb4 <_vfiprintf_r+0xa4>
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffa1 	bl	8009dea <__sfputs_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f000 80a7 	beq.w	8009ffc <_vfiprintf_r+0x1ec>
 8009eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eb0:	445a      	add	r2, fp
 8009eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 809f 	beq.w	8009ffc <_vfiprintf_r+0x1ec>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec8:	f10a 0a01 	add.w	sl, sl, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ed6:	4654      	mov	r4, sl
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ede:	4853      	ldr	r0, [pc, #332]	@ (800a02c <_vfiprintf_r+0x21c>)
 8009ee0:	f7f6 f976 	bl	80001d0 <memchr>
 8009ee4:	9a04      	ldr	r2, [sp, #16]
 8009ee6:	b9d8      	cbnz	r0, 8009f20 <_vfiprintf_r+0x110>
 8009ee8:	06d1      	lsls	r1, r2, #27
 8009eea:	bf44      	itt	mi
 8009eec:	2320      	movmi	r3, #32
 8009eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef2:	0713      	lsls	r3, r2, #28
 8009ef4:	bf44      	itt	mi
 8009ef6:	232b      	movmi	r3, #43	@ 0x2b
 8009ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009efc:	f89a 3000 	ldrb.w	r3, [sl]
 8009f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f02:	d015      	beq.n	8009f30 <_vfiprintf_r+0x120>
 8009f04:	9a07      	ldr	r2, [sp, #28]
 8009f06:	4654      	mov	r4, sl
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f04f 0c0a 	mov.w	ip, #10
 8009f0e:	4621      	mov	r1, r4
 8009f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f14:	3b30      	subs	r3, #48	@ 0x30
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d94b      	bls.n	8009fb2 <_vfiprintf_r+0x1a2>
 8009f1a:	b1b0      	cbz	r0, 8009f4a <_vfiprintf_r+0x13a>
 8009f1c:	9207      	str	r2, [sp, #28]
 8009f1e:	e014      	b.n	8009f4a <_vfiprintf_r+0x13a>
 8009f20:	eba0 0308 	sub.w	r3, r0, r8
 8009f24:	fa09 f303 	lsl.w	r3, r9, r3
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	46a2      	mov	sl, r4
 8009f2e:	e7d2      	b.n	8009ed6 <_vfiprintf_r+0xc6>
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	1d19      	adds	r1, r3, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	9103      	str	r1, [sp, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbb      	ittet	lt
 8009f3c:	425b      	neglt	r3, r3
 8009f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f42:	9307      	strge	r3, [sp, #28]
 8009f44:	9307      	strlt	r3, [sp, #28]
 8009f46:	bfb8      	it	lt
 8009f48:	9204      	strlt	r2, [sp, #16]
 8009f4a:	7823      	ldrb	r3, [r4, #0]
 8009f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f4e:	d10a      	bne.n	8009f66 <_vfiprintf_r+0x156>
 8009f50:	7863      	ldrb	r3, [r4, #1]
 8009f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f54:	d132      	bne.n	8009fbc <_vfiprintf_r+0x1ac>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	9203      	str	r2, [sp, #12]
 8009f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f62:	3402      	adds	r4, #2
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a03c <_vfiprintf_r+0x22c>
 8009f6a:	7821      	ldrb	r1, [r4, #0]
 8009f6c:	2203      	movs	r2, #3
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f7f6 f92e 	bl	80001d0 <memchr>
 8009f74:	b138      	cbz	r0, 8009f86 <_vfiprintf_r+0x176>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	eba0 000a 	sub.w	r0, r0, sl
 8009f7c:	2240      	movs	r2, #64	@ 0x40
 8009f7e:	4082      	lsls	r2, r0
 8009f80:	4313      	orrs	r3, r2
 8009f82:	3401      	adds	r4, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8a:	4829      	ldr	r0, [pc, #164]	@ (800a030 <_vfiprintf_r+0x220>)
 8009f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f90:	2206      	movs	r2, #6
 8009f92:	f7f6 f91d 	bl	80001d0 <memchr>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d03f      	beq.n	800a01a <_vfiprintf_r+0x20a>
 8009f9a:	4b26      	ldr	r3, [pc, #152]	@ (800a034 <_vfiprintf_r+0x224>)
 8009f9c:	bb1b      	cbnz	r3, 8009fe6 <_vfiprintf_r+0x1d6>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	3307      	adds	r3, #7
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fac:	443b      	add	r3, r7
 8009fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb0:	e76a      	b.n	8009e88 <_vfiprintf_r+0x78>
 8009fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2001      	movs	r0, #1
 8009fba:	e7a8      	b.n	8009f0e <_vfiprintf_r+0xfe>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	9305      	str	r3, [sp, #20]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f04f 0c0a 	mov.w	ip, #10
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fce:	3a30      	subs	r2, #48	@ 0x30
 8009fd0:	2a09      	cmp	r2, #9
 8009fd2:	d903      	bls.n	8009fdc <_vfiprintf_r+0x1cc>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0c6      	beq.n	8009f66 <_vfiprintf_r+0x156>
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	e7c4      	b.n	8009f66 <_vfiprintf_r+0x156>
 8009fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7f0      	b.n	8009fc8 <_vfiprintf_r+0x1b8>
 8009fe6:	ab03      	add	r3, sp, #12
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	462a      	mov	r2, r5
 8009fec:	4b12      	ldr	r3, [pc, #72]	@ (800a038 <_vfiprintf_r+0x228>)
 8009fee:	a904      	add	r1, sp, #16
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7fc fa8d 	bl	8006510 <_printf_float>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	1c78      	adds	r0, r7, #1
 8009ffa:	d1d6      	bne.n	8009faa <_vfiprintf_r+0x19a>
 8009ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ffe:	07d9      	lsls	r1, r3, #31
 800a000:	d405      	bmi.n	800a00e <_vfiprintf_r+0x1fe>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	059a      	lsls	r2, r3, #22
 800a006:	d402      	bmi.n	800a00e <_vfiprintf_r+0x1fe>
 800a008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a00a:	f7fd faef 	bl	80075ec <__retarget_lock_release_recursive>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	065b      	lsls	r3, r3, #25
 800a012:	f53f af1f 	bmi.w	8009e54 <_vfiprintf_r+0x44>
 800a016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a018:	e71e      	b.n	8009e58 <_vfiprintf_r+0x48>
 800a01a:	ab03      	add	r3, sp, #12
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	462a      	mov	r2, r5
 800a020:	4b05      	ldr	r3, [pc, #20]	@ (800a038 <_vfiprintf_r+0x228>)
 800a022:	a904      	add	r1, sp, #16
 800a024:	4630      	mov	r0, r6
 800a026:	f7fc fd0b 	bl	8006a40 <_printf_i>
 800a02a:	e7e4      	b.n	8009ff6 <_vfiprintf_r+0x1e6>
 800a02c:	0800add1 	.word	0x0800add1
 800a030:	0800addb 	.word	0x0800addb
 800a034:	08006511 	.word	0x08006511
 800a038:	08009deb 	.word	0x08009deb
 800a03c:	0800add7 	.word	0x0800add7

0800a040 <__sflush_r>:
 800a040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a048:	0716      	lsls	r6, r2, #28
 800a04a:	4605      	mov	r5, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	d454      	bmi.n	800a0fa <__sflush_r+0xba>
 800a050:	684b      	ldr	r3, [r1, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	dc02      	bgt.n	800a05c <__sflush_r+0x1c>
 800a056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd48      	ble.n	800a0ee <__sflush_r+0xae>
 800a05c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a05e:	2e00      	cmp	r6, #0
 800a060:	d045      	beq.n	800a0ee <__sflush_r+0xae>
 800a062:	2300      	movs	r3, #0
 800a064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a068:	682f      	ldr	r7, [r5, #0]
 800a06a:	6a21      	ldr	r1, [r4, #32]
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	d030      	beq.n	800a0d2 <__sflush_r+0x92>
 800a070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	0759      	lsls	r1, r3, #29
 800a076:	d505      	bpl.n	800a084 <__sflush_r+0x44>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a07e:	b10b      	cbz	r3, 800a084 <__sflush_r+0x44>
 800a080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a082:	1ad2      	subs	r2, r2, r3
 800a084:	2300      	movs	r3, #0
 800a086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a088:	6a21      	ldr	r1, [r4, #32]
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b0      	blx	r6
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	d106      	bne.n	800a0a2 <__sflush_r+0x62>
 800a094:	6829      	ldr	r1, [r5, #0]
 800a096:	291d      	cmp	r1, #29
 800a098:	d82b      	bhi.n	800a0f2 <__sflush_r+0xb2>
 800a09a:	4a2a      	ldr	r2, [pc, #168]	@ (800a144 <__sflush_r+0x104>)
 800a09c:	40ca      	lsrs	r2, r1
 800a09e:	07d6      	lsls	r6, r2, #31
 800a0a0:	d527      	bpl.n	800a0f2 <__sflush_r+0xb2>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	6062      	str	r2, [r4, #4]
 800a0a6:	04d9      	lsls	r1, r3, #19
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	d504      	bpl.n	800a0b8 <__sflush_r+0x78>
 800a0ae:	1c42      	adds	r2, r0, #1
 800a0b0:	d101      	bne.n	800a0b6 <__sflush_r+0x76>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	b903      	cbnz	r3, 800a0b8 <__sflush_r+0x78>
 800a0b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ba:	602f      	str	r7, [r5, #0]
 800a0bc:	b1b9      	cbz	r1, 800a0ee <__sflush_r+0xae>
 800a0be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	d002      	beq.n	800a0cc <__sflush_r+0x8c>
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f7fe f8f2 	bl	80082b0 <_free_r>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0d0:	e00d      	b.n	800a0ee <__sflush_r+0xae>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	47b0      	blx	r6
 800a0d8:	4602      	mov	r2, r0
 800a0da:	1c50      	adds	r0, r2, #1
 800a0dc:	d1c9      	bne.n	800a072 <__sflush_r+0x32>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0c6      	beq.n	800a072 <__sflush_r+0x32>
 800a0e4:	2b1d      	cmp	r3, #29
 800a0e6:	d001      	beq.n	800a0ec <__sflush_r+0xac>
 800a0e8:	2b16      	cmp	r3, #22
 800a0ea:	d11e      	bne.n	800a12a <__sflush_r+0xea>
 800a0ec:	602f      	str	r7, [r5, #0]
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e022      	b.n	800a138 <__sflush_r+0xf8>
 800a0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0f6:	b21b      	sxth	r3, r3
 800a0f8:	e01b      	b.n	800a132 <__sflush_r+0xf2>
 800a0fa:	690f      	ldr	r7, [r1, #16]
 800a0fc:	2f00      	cmp	r7, #0
 800a0fe:	d0f6      	beq.n	800a0ee <__sflush_r+0xae>
 800a100:	0793      	lsls	r3, r2, #30
 800a102:	680e      	ldr	r6, [r1, #0]
 800a104:	bf08      	it	eq
 800a106:	694b      	ldreq	r3, [r1, #20]
 800a108:	600f      	str	r7, [r1, #0]
 800a10a:	bf18      	it	ne
 800a10c:	2300      	movne	r3, #0
 800a10e:	eba6 0807 	sub.w	r8, r6, r7
 800a112:	608b      	str	r3, [r1, #8]
 800a114:	f1b8 0f00 	cmp.w	r8, #0
 800a118:	dde9      	ble.n	800a0ee <__sflush_r+0xae>
 800a11a:	6a21      	ldr	r1, [r4, #32]
 800a11c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a11e:	4643      	mov	r3, r8
 800a120:	463a      	mov	r2, r7
 800a122:	4628      	mov	r0, r5
 800a124:	47b0      	blx	r6
 800a126:	2800      	cmp	r0, #0
 800a128:	dc08      	bgt.n	800a13c <__sflush_r+0xfc>
 800a12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	4407      	add	r7, r0
 800a13e:	eba8 0800 	sub.w	r8, r8, r0
 800a142:	e7e7      	b.n	800a114 <__sflush_r+0xd4>
 800a144:	20400001 	.word	0x20400001

0800a148 <_fflush_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	4605      	mov	r5, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	b913      	cbnz	r3, 800a158 <_fflush_r+0x10>
 800a152:	2500      	movs	r5, #0
 800a154:	4628      	mov	r0, r5
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	b118      	cbz	r0, 800a162 <_fflush_r+0x1a>
 800a15a:	6a03      	ldr	r3, [r0, #32]
 800a15c:	b90b      	cbnz	r3, 800a162 <_fflush_r+0x1a>
 800a15e:	f7fd f827 	bl	80071b0 <__sinit>
 800a162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f3      	beq.n	800a152 <_fflush_r+0xa>
 800a16a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a16c:	07d0      	lsls	r0, r2, #31
 800a16e:	d404      	bmi.n	800a17a <_fflush_r+0x32>
 800a170:	0599      	lsls	r1, r3, #22
 800a172:	d402      	bmi.n	800a17a <_fflush_r+0x32>
 800a174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a176:	f7fd fa38 	bl	80075ea <__retarget_lock_acquire_recursive>
 800a17a:	4628      	mov	r0, r5
 800a17c:	4621      	mov	r1, r4
 800a17e:	f7ff ff5f 	bl	800a040 <__sflush_r>
 800a182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a184:	07da      	lsls	r2, r3, #31
 800a186:	4605      	mov	r5, r0
 800a188:	d4e4      	bmi.n	800a154 <_fflush_r+0xc>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	059b      	lsls	r3, r3, #22
 800a18e:	d4e1      	bmi.n	800a154 <_fflush_r+0xc>
 800a190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a192:	f7fd fa2b 	bl	80075ec <__retarget_lock_release_recursive>
 800a196:	e7dd      	b.n	800a154 <_fflush_r+0xc>

0800a198 <__swhatbuf_r>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	460c      	mov	r4, r1
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	b096      	sub	sp, #88	@ 0x58
 800a1a4:	4615      	mov	r5, r2
 800a1a6:	461e      	mov	r6, r3
 800a1a8:	da0d      	bge.n	800a1c6 <__swhatbuf_r+0x2e>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1b0:	f04f 0100 	mov.w	r1, #0
 800a1b4:	bf14      	ite	ne
 800a1b6:	2340      	movne	r3, #64	@ 0x40
 800a1b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1bc:	2000      	movs	r0, #0
 800a1be:	6031      	str	r1, [r6, #0]
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	b016      	add	sp, #88	@ 0x58
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
 800a1c6:	466a      	mov	r2, sp
 800a1c8:	f000 f874 	bl	800a2b4 <_fstat_r>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	dbec      	blt.n	800a1aa <__swhatbuf_r+0x12>
 800a1d0:	9901      	ldr	r1, [sp, #4]
 800a1d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1da:	4259      	negs	r1, r3
 800a1dc:	4159      	adcs	r1, r3
 800a1de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1e2:	e7eb      	b.n	800a1bc <__swhatbuf_r+0x24>

0800a1e4 <__smakebuf_r>:
 800a1e4:	898b      	ldrh	r3, [r1, #12]
 800a1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1e8:	079d      	lsls	r5, r3, #30
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	d507      	bpl.n	800a200 <__smakebuf_r+0x1c>
 800a1f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	6163      	str	r3, [r4, #20]
 800a1fc:	b003      	add	sp, #12
 800a1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a200:	ab01      	add	r3, sp, #4
 800a202:	466a      	mov	r2, sp
 800a204:	f7ff ffc8 	bl	800a198 <__swhatbuf_r>
 800a208:	9f00      	ldr	r7, [sp, #0]
 800a20a:	4605      	mov	r5, r0
 800a20c:	4639      	mov	r1, r7
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fe f8c2 	bl	8008398 <_malloc_r>
 800a214:	b948      	cbnz	r0, 800a22a <__smakebuf_r+0x46>
 800a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21a:	059a      	lsls	r2, r3, #22
 800a21c:	d4ee      	bmi.n	800a1fc <__smakebuf_r+0x18>
 800a21e:	f023 0303 	bic.w	r3, r3, #3
 800a222:	f043 0302 	orr.w	r3, r3, #2
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	e7e2      	b.n	800a1f0 <__smakebuf_r+0xc>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	6020      	str	r0, [r4, #0]
 800a22e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a23a:	b15b      	cbz	r3, 800a254 <__smakebuf_r+0x70>
 800a23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a240:	4630      	mov	r0, r6
 800a242:	f000 f849 	bl	800a2d8 <_isatty_r>
 800a246:	b128      	cbz	r0, 800a254 <__smakebuf_r+0x70>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	431d      	orrs	r5, r3
 800a258:	81a5      	strh	r5, [r4, #12]
 800a25a:	e7cf      	b.n	800a1fc <__smakebuf_r+0x18>

0800a25c <memmove>:
 800a25c:	4288      	cmp	r0, r1
 800a25e:	b510      	push	{r4, lr}
 800a260:	eb01 0402 	add.w	r4, r1, r2
 800a264:	d902      	bls.n	800a26c <memmove+0x10>
 800a266:	4284      	cmp	r4, r0
 800a268:	4623      	mov	r3, r4
 800a26a:	d807      	bhi.n	800a27c <memmove+0x20>
 800a26c:	1e43      	subs	r3, r0, #1
 800a26e:	42a1      	cmp	r1, r4
 800a270:	d008      	beq.n	800a284 <memmove+0x28>
 800a272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a27a:	e7f8      	b.n	800a26e <memmove+0x12>
 800a27c:	4402      	add	r2, r0
 800a27e:	4601      	mov	r1, r0
 800a280:	428a      	cmp	r2, r1
 800a282:	d100      	bne.n	800a286 <memmove+0x2a>
 800a284:	bd10      	pop	{r4, pc}
 800a286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a28e:	e7f7      	b.n	800a280 <memmove+0x24>

0800a290 <strncmp>:
 800a290:	b510      	push	{r4, lr}
 800a292:	b16a      	cbz	r2, 800a2b0 <strncmp+0x20>
 800a294:	3901      	subs	r1, #1
 800a296:	1884      	adds	r4, r0, r2
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d103      	bne.n	800a2ac <strncmp+0x1c>
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d001      	beq.n	800a2ac <strncmp+0x1c>
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	d1f5      	bne.n	800a298 <strncmp+0x8>
 800a2ac:	1ad0      	subs	r0, r2, r3
 800a2ae:	bd10      	pop	{r4, pc}
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	e7fc      	b.n	800a2ae <strncmp+0x1e>

0800a2b4 <_fstat_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	@ (800a2d4 <_fstat_r+0x20>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	4611      	mov	r1, r2
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	f7f9 f8d4 	bl	800346e <_fstat>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d102      	bne.n	800a2d0 <_fstat_r+0x1c>
 800a2ca:	682b      	ldr	r3, [r5, #0]
 800a2cc:	b103      	cbz	r3, 800a2d0 <_fstat_r+0x1c>
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200008b8 	.word	0x200008b8

0800a2d8 <_isatty_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d06      	ldr	r5, [pc, #24]	@ (800a2f4 <_isatty_r+0x1c>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f9 f8d3 	bl	800348e <_isatty>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_isatty_r+0x1a>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_isatty_r+0x1a>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	200008b8 	.word	0x200008b8

0800a2f8 <_sbrk_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d06      	ldr	r5, [pc, #24]	@ (800a314 <_sbrk_r+0x1c>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f9 f8dc 	bl	80034c0 <_sbrk>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_sbrk_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_sbrk_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	200008b8 	.word	0x200008b8

0800a318 <memcpy>:
 800a318:	440a      	add	r2, r1
 800a31a:	4291      	cmp	r1, r2
 800a31c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a320:	d100      	bne.n	800a324 <memcpy+0xc>
 800a322:	4770      	bx	lr
 800a324:	b510      	push	{r4, lr}
 800a326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a32a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a32e:	4291      	cmp	r1, r2
 800a330:	d1f9      	bne.n	800a326 <memcpy+0xe>
 800a332:	bd10      	pop	{r4, pc}
 800a334:	0000      	movs	r0, r0
	...

0800a338 <nan>:
 800a338:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a340 <nan+0x8>
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	00000000 	.word	0x00000000
 800a344:	7ff80000 	.word	0x7ff80000

0800a348 <__assert_func>:
 800a348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a34a:	4614      	mov	r4, r2
 800a34c:	461a      	mov	r2, r3
 800a34e:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <__assert_func+0x2c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4605      	mov	r5, r0
 800a354:	68d8      	ldr	r0, [r3, #12]
 800a356:	b14c      	cbz	r4, 800a36c <__assert_func+0x24>
 800a358:	4b07      	ldr	r3, [pc, #28]	@ (800a378 <__assert_func+0x30>)
 800a35a:	9100      	str	r1, [sp, #0]
 800a35c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a360:	4906      	ldr	r1, [pc, #24]	@ (800a37c <__assert_func+0x34>)
 800a362:	462b      	mov	r3, r5
 800a364:	f000 fba8 	bl	800aab8 <fiprintf>
 800a368:	f000 fbb8 	bl	800aadc <abort>
 800a36c:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <__assert_func+0x38>)
 800a36e:	461c      	mov	r4, r3
 800a370:	e7f3      	b.n	800a35a <__assert_func+0x12>
 800a372:	bf00      	nop
 800a374:	20000020 	.word	0x20000020
 800a378:	0800adea 	.word	0x0800adea
 800a37c:	0800adf7 	.word	0x0800adf7
 800a380:	0800ae25 	.word	0x0800ae25

0800a384 <_calloc_r>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	fba1 5402 	umull	r5, r4, r1, r2
 800a38a:	b934      	cbnz	r4, 800a39a <_calloc_r+0x16>
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7fe f803 	bl	8008398 <_malloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <_calloc_r+0x1e>
 800a396:	4630      	mov	r0, r6
 800a398:	bd70      	pop	{r4, r5, r6, pc}
 800a39a:	220c      	movs	r2, #12
 800a39c:	6002      	str	r2, [r0, #0]
 800a39e:	2600      	movs	r6, #0
 800a3a0:	e7f9      	b.n	800a396 <_calloc_r+0x12>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7fd f8a3 	bl	80074f0 <memset>
 800a3aa:	e7f4      	b.n	800a396 <_calloc_r+0x12>

0800a3ac <rshift>:
 800a3ac:	6903      	ldr	r3, [r0, #16]
 800a3ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3ba:	f100 0414 	add.w	r4, r0, #20
 800a3be:	dd45      	ble.n	800a44c <rshift+0xa0>
 800a3c0:	f011 011f 	ands.w	r1, r1, #31
 800a3c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3cc:	d10c      	bne.n	800a3e8 <rshift+0x3c>
 800a3ce:	f100 0710 	add.w	r7, r0, #16
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	42b1      	cmp	r1, r6
 800a3d6:	d334      	bcc.n	800a442 <rshift+0x96>
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	1eea      	subs	r2, r5, #3
 800a3de:	4296      	cmp	r6, r2
 800a3e0:	bf38      	it	cc
 800a3e2:	2300      	movcc	r3, #0
 800a3e4:	4423      	add	r3, r4
 800a3e6:	e015      	b.n	800a414 <rshift+0x68>
 800a3e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ec:	f1c1 0820 	rsb	r8, r1, #32
 800a3f0:	40cf      	lsrs	r7, r1
 800a3f2:	f105 0e04 	add.w	lr, r5, #4
 800a3f6:	46a1      	mov	r9, r4
 800a3f8:	4576      	cmp	r6, lr
 800a3fa:	46f4      	mov	ip, lr
 800a3fc:	d815      	bhi.n	800a42a <rshift+0x7e>
 800a3fe:	1a9a      	subs	r2, r3, r2
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	3a04      	subs	r2, #4
 800a404:	3501      	adds	r5, #1
 800a406:	42ae      	cmp	r6, r5
 800a408:	bf38      	it	cc
 800a40a:	2200      	movcc	r2, #0
 800a40c:	18a3      	adds	r3, r4, r2
 800a40e:	50a7      	str	r7, [r4, r2]
 800a410:	b107      	cbz	r7, 800a414 <rshift+0x68>
 800a412:	3304      	adds	r3, #4
 800a414:	1b1a      	subs	r2, r3, r4
 800a416:	42a3      	cmp	r3, r4
 800a418:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a41c:	bf08      	it	eq
 800a41e:	2300      	moveq	r3, #0
 800a420:	6102      	str	r2, [r0, #16]
 800a422:	bf08      	it	eq
 800a424:	6143      	streq	r3, [r0, #20]
 800a426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42a:	f8dc c000 	ldr.w	ip, [ip]
 800a42e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a432:	ea4c 0707 	orr.w	r7, ip, r7
 800a436:	f849 7b04 	str.w	r7, [r9], #4
 800a43a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a43e:	40cf      	lsrs	r7, r1
 800a440:	e7da      	b.n	800a3f8 <rshift+0x4c>
 800a442:	f851 cb04 	ldr.w	ip, [r1], #4
 800a446:	f847 cf04 	str.w	ip, [r7, #4]!
 800a44a:	e7c3      	b.n	800a3d4 <rshift+0x28>
 800a44c:	4623      	mov	r3, r4
 800a44e:	e7e1      	b.n	800a414 <rshift+0x68>

0800a450 <__hexdig_fun>:
 800a450:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a454:	2b09      	cmp	r3, #9
 800a456:	d802      	bhi.n	800a45e <__hexdig_fun+0xe>
 800a458:	3820      	subs	r0, #32
 800a45a:	b2c0      	uxtb	r0, r0
 800a45c:	4770      	bx	lr
 800a45e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a462:	2b05      	cmp	r3, #5
 800a464:	d801      	bhi.n	800a46a <__hexdig_fun+0x1a>
 800a466:	3847      	subs	r0, #71	@ 0x47
 800a468:	e7f7      	b.n	800a45a <__hexdig_fun+0xa>
 800a46a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d801      	bhi.n	800a476 <__hexdig_fun+0x26>
 800a472:	3827      	subs	r0, #39	@ 0x27
 800a474:	e7f1      	b.n	800a45a <__hexdig_fun+0xa>
 800a476:	2000      	movs	r0, #0
 800a478:	4770      	bx	lr
	...

0800a47c <__gethex>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	b085      	sub	sp, #20
 800a482:	468a      	mov	sl, r1
 800a484:	9302      	str	r3, [sp, #8]
 800a486:	680b      	ldr	r3, [r1, #0]
 800a488:	9001      	str	r0, [sp, #4]
 800a48a:	4690      	mov	r8, r2
 800a48c:	1c9c      	adds	r4, r3, #2
 800a48e:	46a1      	mov	r9, r4
 800a490:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a494:	2830      	cmp	r0, #48	@ 0x30
 800a496:	d0fa      	beq.n	800a48e <__gethex+0x12>
 800a498:	eba9 0303 	sub.w	r3, r9, r3
 800a49c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4a0:	f7ff ffd6 	bl	800a450 <__hexdig_fun>
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d168      	bne.n	800a57c <__gethex+0x100>
 800a4aa:	49a0      	ldr	r1, [pc, #640]	@ (800a72c <__gethex+0x2b0>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4648      	mov	r0, r9
 800a4b0:	f7ff feee 	bl	800a290 <strncmp>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d167      	bne.n	800a58a <__gethex+0x10e>
 800a4ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4be:	4626      	mov	r6, r4
 800a4c0:	f7ff ffc6 	bl	800a450 <__hexdig_fun>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d062      	beq.n	800a58e <__gethex+0x112>
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	7818      	ldrb	r0, [r3, #0]
 800a4cc:	2830      	cmp	r0, #48	@ 0x30
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	f103 0301 	add.w	r3, r3, #1
 800a4d4:	d0f9      	beq.n	800a4ca <__gethex+0x4e>
 800a4d6:	f7ff ffbb 	bl	800a450 <__hexdig_fun>
 800a4da:	fab0 f580 	clz	r5, r0
 800a4de:	096d      	lsrs	r5, r5, #5
 800a4e0:	f04f 0b01 	mov.w	fp, #1
 800a4e4:	464a      	mov	r2, r9
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	7830      	ldrb	r0, [r6, #0]
 800a4ec:	f7ff ffb0 	bl	800a450 <__hexdig_fun>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d1f8      	bne.n	800a4e6 <__gethex+0x6a>
 800a4f4:	498d      	ldr	r1, [pc, #564]	@ (800a72c <__gethex+0x2b0>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7ff fec9 	bl	800a290 <strncmp>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d13f      	bne.n	800a582 <__gethex+0x106>
 800a502:	b944      	cbnz	r4, 800a516 <__gethex+0x9a>
 800a504:	1c74      	adds	r4, r6, #1
 800a506:	4622      	mov	r2, r4
 800a508:	4616      	mov	r6, r2
 800a50a:	3201      	adds	r2, #1
 800a50c:	7830      	ldrb	r0, [r6, #0]
 800a50e:	f7ff ff9f 	bl	800a450 <__hexdig_fun>
 800a512:	2800      	cmp	r0, #0
 800a514:	d1f8      	bne.n	800a508 <__gethex+0x8c>
 800a516:	1ba4      	subs	r4, r4, r6
 800a518:	00a7      	lsls	r7, r4, #2
 800a51a:	7833      	ldrb	r3, [r6, #0]
 800a51c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a520:	2b50      	cmp	r3, #80	@ 0x50
 800a522:	d13e      	bne.n	800a5a2 <__gethex+0x126>
 800a524:	7873      	ldrb	r3, [r6, #1]
 800a526:	2b2b      	cmp	r3, #43	@ 0x2b
 800a528:	d033      	beq.n	800a592 <__gethex+0x116>
 800a52a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a52c:	d034      	beq.n	800a598 <__gethex+0x11c>
 800a52e:	1c71      	adds	r1, r6, #1
 800a530:	2400      	movs	r4, #0
 800a532:	7808      	ldrb	r0, [r1, #0]
 800a534:	f7ff ff8c 	bl	800a450 <__hexdig_fun>
 800a538:	1e43      	subs	r3, r0, #1
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b18      	cmp	r3, #24
 800a53e:	d830      	bhi.n	800a5a2 <__gethex+0x126>
 800a540:	f1a0 0210 	sub.w	r2, r0, #16
 800a544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a548:	f7ff ff82 	bl	800a450 <__hexdig_fun>
 800a54c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a550:	fa5f fc8c 	uxtb.w	ip, ip
 800a554:	f1bc 0f18 	cmp.w	ip, #24
 800a558:	f04f 030a 	mov.w	r3, #10
 800a55c:	d91e      	bls.n	800a59c <__gethex+0x120>
 800a55e:	b104      	cbz	r4, 800a562 <__gethex+0xe6>
 800a560:	4252      	negs	r2, r2
 800a562:	4417      	add	r7, r2
 800a564:	f8ca 1000 	str.w	r1, [sl]
 800a568:	b1ed      	cbz	r5, 800a5a6 <__gethex+0x12a>
 800a56a:	f1bb 0f00 	cmp.w	fp, #0
 800a56e:	bf0c      	ite	eq
 800a570:	2506      	moveq	r5, #6
 800a572:	2500      	movne	r5, #0
 800a574:	4628      	mov	r0, r5
 800a576:	b005      	add	sp, #20
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	2500      	movs	r5, #0
 800a57e:	462c      	mov	r4, r5
 800a580:	e7b0      	b.n	800a4e4 <__gethex+0x68>
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1c7      	bne.n	800a516 <__gethex+0x9a>
 800a586:	4627      	mov	r7, r4
 800a588:	e7c7      	b.n	800a51a <__gethex+0x9e>
 800a58a:	464e      	mov	r6, r9
 800a58c:	462f      	mov	r7, r5
 800a58e:	2501      	movs	r5, #1
 800a590:	e7c3      	b.n	800a51a <__gethex+0x9e>
 800a592:	2400      	movs	r4, #0
 800a594:	1cb1      	adds	r1, r6, #2
 800a596:	e7cc      	b.n	800a532 <__gethex+0xb6>
 800a598:	2401      	movs	r4, #1
 800a59a:	e7fb      	b.n	800a594 <__gethex+0x118>
 800a59c:	fb03 0002 	mla	r0, r3, r2, r0
 800a5a0:	e7ce      	b.n	800a540 <__gethex+0xc4>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	e7de      	b.n	800a564 <__gethex+0xe8>
 800a5a6:	eba6 0309 	sub.w	r3, r6, r9
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	dc0a      	bgt.n	800a5c8 <__gethex+0x14c>
 800a5b2:	9801      	ldr	r0, [sp, #4]
 800a5b4:	f7fd ff7c 	bl	80084b0 <_Balloc>
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	b940      	cbnz	r0, 800a5ce <__gethex+0x152>
 800a5bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a730 <__gethex+0x2b4>)
 800a5be:	4602      	mov	r2, r0
 800a5c0:	21e4      	movs	r1, #228	@ 0xe4
 800a5c2:	485c      	ldr	r0, [pc, #368]	@ (800a734 <__gethex+0x2b8>)
 800a5c4:	f7ff fec0 	bl	800a348 <__assert_func>
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	105b      	asrs	r3, r3, #1
 800a5cc:	e7ef      	b.n	800a5ae <__gethex+0x132>
 800a5ce:	f100 0a14 	add.w	sl, r0, #20
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4655      	mov	r5, sl
 800a5d6:	469b      	mov	fp, r3
 800a5d8:	45b1      	cmp	r9, r6
 800a5da:	d337      	bcc.n	800a64c <__gethex+0x1d0>
 800a5dc:	f845 bb04 	str.w	fp, [r5], #4
 800a5e0:	eba5 050a 	sub.w	r5, r5, sl
 800a5e4:	10ad      	asrs	r5, r5, #2
 800a5e6:	6125      	str	r5, [r4, #16]
 800a5e8:	4658      	mov	r0, fp
 800a5ea:	f7fe f853 	bl	8008694 <__hi0bits>
 800a5ee:	016d      	lsls	r5, r5, #5
 800a5f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5f4:	1a2d      	subs	r5, r5, r0
 800a5f6:	42b5      	cmp	r5, r6
 800a5f8:	dd54      	ble.n	800a6a4 <__gethex+0x228>
 800a5fa:	1bad      	subs	r5, r5, r6
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7fe fbdf 	bl	8008dc2 <__any_on>
 800a604:	4681      	mov	r9, r0
 800a606:	b178      	cbz	r0, 800a628 <__gethex+0x1ac>
 800a608:	1e6b      	subs	r3, r5, #1
 800a60a:	1159      	asrs	r1, r3, #5
 800a60c:	f003 021f 	and.w	r2, r3, #31
 800a610:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a614:	f04f 0901 	mov.w	r9, #1
 800a618:	fa09 f202 	lsl.w	r2, r9, r2
 800a61c:	420a      	tst	r2, r1
 800a61e:	d003      	beq.n	800a628 <__gethex+0x1ac>
 800a620:	454b      	cmp	r3, r9
 800a622:	dc36      	bgt.n	800a692 <__gethex+0x216>
 800a624:	f04f 0902 	mov.w	r9, #2
 800a628:	4629      	mov	r1, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	f7ff febe 	bl	800a3ac <rshift>
 800a630:	442f      	add	r7, r5
 800a632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a636:	42bb      	cmp	r3, r7
 800a638:	da42      	bge.n	800a6c0 <__gethex+0x244>
 800a63a:	9801      	ldr	r0, [sp, #4]
 800a63c:	4621      	mov	r1, r4
 800a63e:	f7fd ff77 	bl	8008530 <_Bfree>
 800a642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a644:	2300      	movs	r3, #0
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	25a3      	movs	r5, #163	@ 0xa3
 800a64a:	e793      	b.n	800a574 <__gethex+0xf8>
 800a64c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a650:	2a2e      	cmp	r2, #46	@ 0x2e
 800a652:	d012      	beq.n	800a67a <__gethex+0x1fe>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d104      	bne.n	800a662 <__gethex+0x1e6>
 800a658:	f845 bb04 	str.w	fp, [r5], #4
 800a65c:	f04f 0b00 	mov.w	fp, #0
 800a660:	465b      	mov	r3, fp
 800a662:	7830      	ldrb	r0, [r6, #0]
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	f7ff fef3 	bl	800a450 <__hexdig_fun>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	f000 000f 	and.w	r0, r0, #15
 800a670:	4098      	lsls	r0, r3
 800a672:	ea4b 0b00 	orr.w	fp, fp, r0
 800a676:	3304      	adds	r3, #4
 800a678:	e7ae      	b.n	800a5d8 <__gethex+0x15c>
 800a67a:	45b1      	cmp	r9, r6
 800a67c:	d8ea      	bhi.n	800a654 <__gethex+0x1d8>
 800a67e:	492b      	ldr	r1, [pc, #172]	@ (800a72c <__gethex+0x2b0>)
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff fe03 	bl	800a290 <strncmp>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d1e1      	bne.n	800a654 <__gethex+0x1d8>
 800a690:	e7a2      	b.n	800a5d8 <__gethex+0x15c>
 800a692:	1ea9      	subs	r1, r5, #2
 800a694:	4620      	mov	r0, r4
 800a696:	f7fe fb94 	bl	8008dc2 <__any_on>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d0c2      	beq.n	800a624 <__gethex+0x1a8>
 800a69e:	f04f 0903 	mov.w	r9, #3
 800a6a2:	e7c1      	b.n	800a628 <__gethex+0x1ac>
 800a6a4:	da09      	bge.n	800a6ba <__gethex+0x23e>
 800a6a6:	1b75      	subs	r5, r6, r5
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	9801      	ldr	r0, [sp, #4]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	f7fe f94f 	bl	8008950 <__lshift>
 800a6b2:	1b7f      	subs	r7, r7, r5
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	f100 0a14 	add.w	sl, r0, #20
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	e7b8      	b.n	800a632 <__gethex+0x1b6>
 800a6c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6c4:	42bd      	cmp	r5, r7
 800a6c6:	dd6f      	ble.n	800a7a8 <__gethex+0x32c>
 800a6c8:	1bed      	subs	r5, r5, r7
 800a6ca:	42ae      	cmp	r6, r5
 800a6cc:	dc34      	bgt.n	800a738 <__gethex+0x2bc>
 800a6ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d022      	beq.n	800a71c <__gethex+0x2a0>
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d024      	beq.n	800a724 <__gethex+0x2a8>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d115      	bne.n	800a70a <__gethex+0x28e>
 800a6de:	42ae      	cmp	r6, r5
 800a6e0:	d113      	bne.n	800a70a <__gethex+0x28e>
 800a6e2:	2e01      	cmp	r6, #1
 800a6e4:	d10b      	bne.n	800a6fe <__gethex+0x282>
 800a6e6:	9a02      	ldr	r2, [sp, #8]
 800a6e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	f8ca 3000 	str.w	r3, [sl]
 800a6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f8:	2562      	movs	r5, #98	@ 0x62
 800a6fa:	601c      	str	r4, [r3, #0]
 800a6fc:	e73a      	b.n	800a574 <__gethex+0xf8>
 800a6fe:	1e71      	subs	r1, r6, #1
 800a700:	4620      	mov	r0, r4
 800a702:	f7fe fb5e 	bl	8008dc2 <__any_on>
 800a706:	2800      	cmp	r0, #0
 800a708:	d1ed      	bne.n	800a6e6 <__gethex+0x26a>
 800a70a:	9801      	ldr	r0, [sp, #4]
 800a70c:	4621      	mov	r1, r4
 800a70e:	f7fd ff0f 	bl	8008530 <_Bfree>
 800a712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a714:	2300      	movs	r3, #0
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	2550      	movs	r5, #80	@ 0x50
 800a71a:	e72b      	b.n	800a574 <__gethex+0xf8>
 800a71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1f3      	bne.n	800a70a <__gethex+0x28e>
 800a722:	e7e0      	b.n	800a6e6 <__gethex+0x26a>
 800a724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1dd      	bne.n	800a6e6 <__gethex+0x26a>
 800a72a:	e7ee      	b.n	800a70a <__gethex+0x28e>
 800a72c:	0800adcf 	.word	0x0800adcf
 800a730:	0800ad65 	.word	0x0800ad65
 800a734:	0800ae26 	.word	0x0800ae26
 800a738:	1e6f      	subs	r7, r5, #1
 800a73a:	f1b9 0f00 	cmp.w	r9, #0
 800a73e:	d130      	bne.n	800a7a2 <__gethex+0x326>
 800a740:	b127      	cbz	r7, 800a74c <__gethex+0x2d0>
 800a742:	4639      	mov	r1, r7
 800a744:	4620      	mov	r0, r4
 800a746:	f7fe fb3c 	bl	8008dc2 <__any_on>
 800a74a:	4681      	mov	r9, r0
 800a74c:	117a      	asrs	r2, r7, #5
 800a74e:	2301      	movs	r3, #1
 800a750:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a754:	f007 071f 	and.w	r7, r7, #31
 800a758:	40bb      	lsls	r3, r7
 800a75a:	4213      	tst	r3, r2
 800a75c:	4629      	mov	r1, r5
 800a75e:	4620      	mov	r0, r4
 800a760:	bf18      	it	ne
 800a762:	f049 0902 	orrne.w	r9, r9, #2
 800a766:	f7ff fe21 	bl	800a3ac <rshift>
 800a76a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a76e:	1b76      	subs	r6, r6, r5
 800a770:	2502      	movs	r5, #2
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	d047      	beq.n	800a808 <__gethex+0x38c>
 800a778:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d015      	beq.n	800a7ac <__gethex+0x330>
 800a780:	2b03      	cmp	r3, #3
 800a782:	d017      	beq.n	800a7b4 <__gethex+0x338>
 800a784:	2b01      	cmp	r3, #1
 800a786:	d109      	bne.n	800a79c <__gethex+0x320>
 800a788:	f019 0f02 	tst.w	r9, #2
 800a78c:	d006      	beq.n	800a79c <__gethex+0x320>
 800a78e:	f8da 3000 	ldr.w	r3, [sl]
 800a792:	ea49 0903 	orr.w	r9, r9, r3
 800a796:	f019 0f01 	tst.w	r9, #1
 800a79a:	d10e      	bne.n	800a7ba <__gethex+0x33e>
 800a79c:	f045 0510 	orr.w	r5, r5, #16
 800a7a0:	e032      	b.n	800a808 <__gethex+0x38c>
 800a7a2:	f04f 0901 	mov.w	r9, #1
 800a7a6:	e7d1      	b.n	800a74c <__gethex+0x2d0>
 800a7a8:	2501      	movs	r5, #1
 800a7aa:	e7e2      	b.n	800a772 <__gethex+0x2f6>
 800a7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ae:	f1c3 0301 	rsb	r3, r3, #1
 800a7b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0f0      	beq.n	800a79c <__gethex+0x320>
 800a7ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7be:	f104 0314 	add.w	r3, r4, #20
 800a7c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ca:	f04f 0c00 	mov.w	ip, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7d8:	d01b      	beq.n	800a812 <__gethex+0x396>
 800a7da:	3201      	adds	r2, #1
 800a7dc:	6002      	str	r2, [r0, #0]
 800a7de:	2d02      	cmp	r5, #2
 800a7e0:	f104 0314 	add.w	r3, r4, #20
 800a7e4:	d13c      	bne.n	800a860 <__gethex+0x3e4>
 800a7e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7ea:	3a01      	subs	r2, #1
 800a7ec:	42b2      	cmp	r2, r6
 800a7ee:	d109      	bne.n	800a804 <__gethex+0x388>
 800a7f0:	1171      	asrs	r1, r6, #5
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7f8:	f006 061f 	and.w	r6, r6, #31
 800a7fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a800:	421e      	tst	r6, r3
 800a802:	d13a      	bne.n	800a87a <__gethex+0x3fe>
 800a804:	f045 0520 	orr.w	r5, r5, #32
 800a808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a80a:	601c      	str	r4, [r3, #0]
 800a80c:	9b02      	ldr	r3, [sp, #8]
 800a80e:	601f      	str	r7, [r3, #0]
 800a810:	e6b0      	b.n	800a574 <__gethex+0xf8>
 800a812:	4299      	cmp	r1, r3
 800a814:	f843 cc04 	str.w	ip, [r3, #-4]
 800a818:	d8d9      	bhi.n	800a7ce <__gethex+0x352>
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	459b      	cmp	fp, r3
 800a81e:	db17      	blt.n	800a850 <__gethex+0x3d4>
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	9801      	ldr	r0, [sp, #4]
 800a824:	3101      	adds	r1, #1
 800a826:	f7fd fe43 	bl	80084b0 <_Balloc>
 800a82a:	4681      	mov	r9, r0
 800a82c:	b918      	cbnz	r0, 800a836 <__gethex+0x3ba>
 800a82e:	4b1a      	ldr	r3, [pc, #104]	@ (800a898 <__gethex+0x41c>)
 800a830:	4602      	mov	r2, r0
 800a832:	2184      	movs	r1, #132	@ 0x84
 800a834:	e6c5      	b.n	800a5c2 <__gethex+0x146>
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	f104 010c 	add.w	r1, r4, #12
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	300c      	adds	r0, #12
 800a842:	f7ff fd69 	bl	800a318 <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	9801      	ldr	r0, [sp, #4]
 800a84a:	f7fd fe71 	bl	8008530 <_Bfree>
 800a84e:	464c      	mov	r4, r9
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a858:	6122      	str	r2, [r4, #16]
 800a85a:	2201      	movs	r2, #1
 800a85c:	615a      	str	r2, [r3, #20]
 800a85e:	e7be      	b.n	800a7de <__gethex+0x362>
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	455a      	cmp	r2, fp
 800a864:	dd0b      	ble.n	800a87e <__gethex+0x402>
 800a866:	2101      	movs	r1, #1
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fd9f 	bl	800a3ac <rshift>
 800a86e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a872:	3701      	adds	r7, #1
 800a874:	42bb      	cmp	r3, r7
 800a876:	f6ff aee0 	blt.w	800a63a <__gethex+0x1be>
 800a87a:	2501      	movs	r5, #1
 800a87c:	e7c2      	b.n	800a804 <__gethex+0x388>
 800a87e:	f016 061f 	ands.w	r6, r6, #31
 800a882:	d0fa      	beq.n	800a87a <__gethex+0x3fe>
 800a884:	4453      	add	r3, sl
 800a886:	f1c6 0620 	rsb	r6, r6, #32
 800a88a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a88e:	f7fd ff01 	bl	8008694 <__hi0bits>
 800a892:	42b0      	cmp	r0, r6
 800a894:	dbe7      	blt.n	800a866 <__gethex+0x3ea>
 800a896:	e7f0      	b.n	800a87a <__gethex+0x3fe>
 800a898:	0800ad65 	.word	0x0800ad65

0800a89c <L_shift>:
 800a89c:	f1c2 0208 	rsb	r2, r2, #8
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	b570      	push	{r4, r5, r6, lr}
 800a8a4:	f1c2 0620 	rsb	r6, r2, #32
 800a8a8:	6843      	ldr	r3, [r0, #4]
 800a8aa:	6804      	ldr	r4, [r0, #0]
 800a8ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a8b0:	432c      	orrs	r4, r5
 800a8b2:	40d3      	lsrs	r3, r2
 800a8b4:	6004      	str	r4, [r0, #0]
 800a8b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8ba:	4288      	cmp	r0, r1
 800a8bc:	d3f4      	bcc.n	800a8a8 <L_shift+0xc>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}

0800a8c0 <__match>:
 800a8c0:	b530      	push	{r4, r5, lr}
 800a8c2:	6803      	ldr	r3, [r0, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ca:	b914      	cbnz	r4, 800a8d2 <__match+0x12>
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	bd30      	pop	{r4, r5, pc}
 800a8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8da:	2d19      	cmp	r5, #25
 800a8dc:	bf98      	it	ls
 800a8de:	3220      	addls	r2, #32
 800a8e0:	42a2      	cmp	r2, r4
 800a8e2:	d0f0      	beq.n	800a8c6 <__match+0x6>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7f3      	b.n	800a8d0 <__match+0x10>

0800a8e8 <__hexnan>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	680b      	ldr	r3, [r1, #0]
 800a8ee:	6801      	ldr	r1, [r0, #0]
 800a8f0:	115e      	asrs	r6, r3, #5
 800a8f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8f6:	f013 031f 	ands.w	r3, r3, #31
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	bf18      	it	ne
 800a8fe:	3604      	addne	r6, #4
 800a900:	2500      	movs	r5, #0
 800a902:	1f37      	subs	r7, r6, #4
 800a904:	4682      	mov	sl, r0
 800a906:	4690      	mov	r8, r2
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a90e:	46b9      	mov	r9, r7
 800a910:	463c      	mov	r4, r7
 800a912:	9502      	str	r5, [sp, #8]
 800a914:	46ab      	mov	fp, r5
 800a916:	784a      	ldrb	r2, [r1, #1]
 800a918:	1c4b      	adds	r3, r1, #1
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	b342      	cbz	r2, 800a970 <__hexnan+0x88>
 800a91e:	4610      	mov	r0, r2
 800a920:	9105      	str	r1, [sp, #20]
 800a922:	9204      	str	r2, [sp, #16]
 800a924:	f7ff fd94 	bl	800a450 <__hexdig_fun>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d151      	bne.n	800a9d0 <__hexnan+0xe8>
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	9905      	ldr	r1, [sp, #20]
 800a930:	2a20      	cmp	r2, #32
 800a932:	d818      	bhi.n	800a966 <__hexnan+0x7e>
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	459b      	cmp	fp, r3
 800a938:	dd13      	ble.n	800a962 <__hexnan+0x7a>
 800a93a:	454c      	cmp	r4, r9
 800a93c:	d206      	bcs.n	800a94c <__hexnan+0x64>
 800a93e:	2d07      	cmp	r5, #7
 800a940:	dc04      	bgt.n	800a94c <__hexnan+0x64>
 800a942:	462a      	mov	r2, r5
 800a944:	4649      	mov	r1, r9
 800a946:	4620      	mov	r0, r4
 800a948:	f7ff ffa8 	bl	800a89c <L_shift>
 800a94c:	4544      	cmp	r4, r8
 800a94e:	d952      	bls.n	800a9f6 <__hexnan+0x10e>
 800a950:	2300      	movs	r3, #0
 800a952:	f1a4 0904 	sub.w	r9, r4, #4
 800a956:	f844 3c04 	str.w	r3, [r4, #-4]
 800a95a:	f8cd b008 	str.w	fp, [sp, #8]
 800a95e:	464c      	mov	r4, r9
 800a960:	461d      	mov	r5, r3
 800a962:	9903      	ldr	r1, [sp, #12]
 800a964:	e7d7      	b.n	800a916 <__hexnan+0x2e>
 800a966:	2a29      	cmp	r2, #41	@ 0x29
 800a968:	d157      	bne.n	800aa1a <__hexnan+0x132>
 800a96a:	3102      	adds	r1, #2
 800a96c:	f8ca 1000 	str.w	r1, [sl]
 800a970:	f1bb 0f00 	cmp.w	fp, #0
 800a974:	d051      	beq.n	800aa1a <__hexnan+0x132>
 800a976:	454c      	cmp	r4, r9
 800a978:	d206      	bcs.n	800a988 <__hexnan+0xa0>
 800a97a:	2d07      	cmp	r5, #7
 800a97c:	dc04      	bgt.n	800a988 <__hexnan+0xa0>
 800a97e:	462a      	mov	r2, r5
 800a980:	4649      	mov	r1, r9
 800a982:	4620      	mov	r0, r4
 800a984:	f7ff ff8a 	bl	800a89c <L_shift>
 800a988:	4544      	cmp	r4, r8
 800a98a:	d936      	bls.n	800a9fa <__hexnan+0x112>
 800a98c:	f1a8 0204 	sub.w	r2, r8, #4
 800a990:	4623      	mov	r3, r4
 800a992:	f853 1b04 	ldr.w	r1, [r3], #4
 800a996:	f842 1f04 	str.w	r1, [r2, #4]!
 800a99a:	429f      	cmp	r7, r3
 800a99c:	d2f9      	bcs.n	800a992 <__hexnan+0xaa>
 800a99e:	1b3b      	subs	r3, r7, r4
 800a9a0:	f023 0303 	bic.w	r3, r3, #3
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	3e03      	subs	r6, #3
 800a9aa:	42b4      	cmp	r4, r6
 800a9ac:	bf88      	it	hi
 800a9ae:	2304      	movhi	r3, #4
 800a9b0:	4443      	add	r3, r8
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f843 2b04 	str.w	r2, [r3], #4
 800a9b8:	429f      	cmp	r7, r3
 800a9ba:	d2fb      	bcs.n	800a9b4 <__hexnan+0xcc>
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	b91b      	cbnz	r3, 800a9c8 <__hexnan+0xe0>
 800a9c0:	4547      	cmp	r7, r8
 800a9c2:	d128      	bne.n	800aa16 <__hexnan+0x12e>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	2005      	movs	r0, #5
 800a9ca:	b007      	add	sp, #28
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	2d08      	cmp	r5, #8
 800a9d4:	f10b 0b01 	add.w	fp, fp, #1
 800a9d8:	dd06      	ble.n	800a9e8 <__hexnan+0x100>
 800a9da:	4544      	cmp	r4, r8
 800a9dc:	d9c1      	bls.n	800a962 <__hexnan+0x7a>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9e4:	2501      	movs	r5, #1
 800a9e6:	3c04      	subs	r4, #4
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	f000 000f 	and.w	r0, r0, #15
 800a9ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9f2:	6020      	str	r0, [r4, #0]
 800a9f4:	e7b5      	b.n	800a962 <__hexnan+0x7a>
 800a9f6:	2508      	movs	r5, #8
 800a9f8:	e7b3      	b.n	800a962 <__hexnan+0x7a>
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0dd      	beq.n	800a9bc <__hexnan+0xd4>
 800aa00:	f1c3 0320 	rsb	r3, r3, #32
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295
 800aa08:	40da      	lsrs	r2, r3
 800aa0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa14:	e7d2      	b.n	800a9bc <__hexnan+0xd4>
 800aa16:	3f04      	subs	r7, #4
 800aa18:	e7d0      	b.n	800a9bc <__hexnan+0xd4>
 800aa1a:	2004      	movs	r0, #4
 800aa1c:	e7d5      	b.n	800a9ca <__hexnan+0xe2>

0800aa1e <__ascii_mbtowc>:
 800aa1e:	b082      	sub	sp, #8
 800aa20:	b901      	cbnz	r1, 800aa24 <__ascii_mbtowc+0x6>
 800aa22:	a901      	add	r1, sp, #4
 800aa24:	b142      	cbz	r2, 800aa38 <__ascii_mbtowc+0x1a>
 800aa26:	b14b      	cbz	r3, 800aa3c <__ascii_mbtowc+0x1e>
 800aa28:	7813      	ldrb	r3, [r2, #0]
 800aa2a:	600b      	str	r3, [r1, #0]
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	1e10      	subs	r0, r2, #0
 800aa30:	bf18      	it	ne
 800aa32:	2001      	movne	r0, #1
 800aa34:	b002      	add	sp, #8
 800aa36:	4770      	bx	lr
 800aa38:	4610      	mov	r0, r2
 800aa3a:	e7fb      	b.n	800aa34 <__ascii_mbtowc+0x16>
 800aa3c:	f06f 0001 	mvn.w	r0, #1
 800aa40:	e7f8      	b.n	800aa34 <__ascii_mbtowc+0x16>

0800aa42 <_realloc_r>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	4607      	mov	r7, r0
 800aa48:	4614      	mov	r4, r2
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	b921      	cbnz	r1, 800aa58 <_realloc_r+0x16>
 800aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	4611      	mov	r1, r2
 800aa54:	f7fd bca0 	b.w	8008398 <_malloc_r>
 800aa58:	b92a      	cbnz	r2, 800aa66 <_realloc_r+0x24>
 800aa5a:	f7fd fc29 	bl	80082b0 <_free_r>
 800aa5e:	4625      	mov	r5, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa66:	f000 f840 	bl	800aaea <_malloc_usable_size_r>
 800aa6a:	4284      	cmp	r4, r0
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	d802      	bhi.n	800aa76 <_realloc_r+0x34>
 800aa70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa74:	d8f4      	bhi.n	800aa60 <_realloc_r+0x1e>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7fd fc8d 	bl	8008398 <_malloc_r>
 800aa7e:	4680      	mov	r8, r0
 800aa80:	b908      	cbnz	r0, 800aa86 <_realloc_r+0x44>
 800aa82:	4645      	mov	r5, r8
 800aa84:	e7ec      	b.n	800aa60 <_realloc_r+0x1e>
 800aa86:	42b4      	cmp	r4, r6
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	bf28      	it	cs
 800aa8e:	4632      	movcs	r2, r6
 800aa90:	f7ff fc42 	bl	800a318 <memcpy>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7fd fc0a 	bl	80082b0 <_free_r>
 800aa9c:	e7f1      	b.n	800aa82 <_realloc_r+0x40>

0800aa9e <__ascii_wctomb>:
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	b141      	cbz	r1, 800aab6 <__ascii_wctomb+0x18>
 800aaa4:	2aff      	cmp	r2, #255	@ 0xff
 800aaa6:	d904      	bls.n	800aab2 <__ascii_wctomb+0x14>
 800aaa8:	228a      	movs	r2, #138	@ 0x8a
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	4770      	bx	lr
 800aab2:	700a      	strb	r2, [r1, #0]
 800aab4:	2001      	movs	r0, #1
 800aab6:	4770      	bx	lr

0800aab8 <fiprintf>:
 800aab8:	b40e      	push	{r1, r2, r3}
 800aaba:	b503      	push	{r0, r1, lr}
 800aabc:	4601      	mov	r1, r0
 800aabe:	ab03      	add	r3, sp, #12
 800aac0:	4805      	ldr	r0, [pc, #20]	@ (800aad8 <fiprintf+0x20>)
 800aac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac6:	6800      	ldr	r0, [r0, #0]
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	f7ff f9a1 	bl	8009e10 <_vfiprintf_r>
 800aace:	b002      	add	sp, #8
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr
 800aad8:	20000020 	.word	0x20000020

0800aadc <abort>:
 800aadc:	b508      	push	{r3, lr}
 800aade:	2006      	movs	r0, #6
 800aae0:	f000 f834 	bl	800ab4c <raise>
 800aae4:	2001      	movs	r0, #1
 800aae6:	f7f8 fc72 	bl	80033ce <_exit>

0800aaea <_malloc_usable_size_r>:
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	1f18      	subs	r0, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbc      	itt	lt
 800aaf4:	580b      	ldrlt	r3, [r1, r0]
 800aaf6:	18c0      	addlt	r0, r0, r3
 800aaf8:	4770      	bx	lr

0800aafa <_raise_r>:
 800aafa:	291f      	cmp	r1, #31
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4605      	mov	r5, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d904      	bls.n	800ab0e <_raise_r+0x14>
 800ab04:	2316      	movs	r3, #22
 800ab06:	6003      	str	r3, [r0, #0]
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab10:	b112      	cbz	r2, 800ab18 <_raise_r+0x1e>
 800ab12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab16:	b94b      	cbnz	r3, 800ab2c <_raise_r+0x32>
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 f831 	bl	800ab80 <_getpid_r>
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4601      	mov	r1, r0
 800ab22:	4628      	mov	r0, r5
 800ab24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab28:	f000 b818 	b.w	800ab5c <_kill_r>
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d00a      	beq.n	800ab46 <_raise_r+0x4c>
 800ab30:	1c59      	adds	r1, r3, #1
 800ab32:	d103      	bne.n	800ab3c <_raise_r+0x42>
 800ab34:	2316      	movs	r3, #22
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	2001      	movs	r0, #1
 800ab3a:	e7e7      	b.n	800ab0c <_raise_r+0x12>
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab42:	4620      	mov	r0, r4
 800ab44:	4798      	blx	r3
 800ab46:	2000      	movs	r0, #0
 800ab48:	e7e0      	b.n	800ab0c <_raise_r+0x12>
	...

0800ab4c <raise>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	@ (800ab58 <raise+0xc>)
 800ab4e:	4601      	mov	r1, r0
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	f7ff bfd2 	b.w	800aafa <_raise_r>
 800ab56:	bf00      	nop
 800ab58:	20000020 	.word	0x20000020

0800ab5c <_kill_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	@ (800ab7c <_kill_r+0x20>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	4611      	mov	r1, r2
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	f7f8 fc20 	bl	80033ae <_kill>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d102      	bne.n	800ab78 <_kill_r+0x1c>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	b103      	cbz	r3, 800ab78 <_kill_r+0x1c>
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	200008b8 	.word	0x200008b8

0800ab80 <_getpid_r>:
 800ab80:	f7f8 bc0d 	b.w	800339e <_getpid>

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
